{"version":3,"file":"index-DOs8RZfV.js","sources":["../../src/particle-system.ts","../../src/main-complete.ts"],"sourcesContent":["/**\n * Particle Effects System for Super Reversi\n * \n * Creates visual effects based on move quality grades\n */\n\nexport type Grade = 'C' | 'B' | 'A' | 'S' | 'SS' | 'SSS';\n\nexport interface SpecialEffect {\n  corner?: boolean;\n  edge?: boolean;\n  massive?: boolean;  // 10+ flips\n  chain?: boolean;    // Triggered by previous move\n  firstMove?: boolean;\n  comeback?: boolean; // When losing player makes good move\n  domination?: boolean; // When winning player extends lead\n}\n\nexport interface Particle {\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  life: number;\n  maxLife: number;\n  size: number;\n  color: string;\n  alpha: number;\n  type: 'circle' | 'star' | 'spark';\n}\n\nexport class ParticleSystem {\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n  private particles: Particle[] = [];\n  private animationId: number | null = null;\n  private lastTime = 0;\n  \n  constructor() {\n    // Create canvas for particles\n    this.canvas = document.createElement('canvas');\n    this.canvas.id = 'particle-canvas';\n    this.canvas.style.position = 'absolute';\n    this.canvas.style.top = '0';\n    this.canvas.style.left = '0';\n    this.canvas.style.pointerEvents = 'none';\n    this.canvas.style.zIndex = '100';\n    \n    const ctx = this.canvas.getContext('2d');\n    if (!ctx) throw new Error('Could not get canvas context');\n    this.ctx = ctx;\n  }\n  \n  initialize(container: HTMLElement): void {\n    // Set canvas size\n    const rect = container.getBoundingClientRect();\n    this.canvas.width = rect.width;\n    this.canvas.height = rect.height;\n    \n    // Add to container\n    container.style.position = 'relative';\n    container.appendChild(this.canvas);\n    \n    // Start animation loop\n    this.startAnimation();\n  }\n  \n  private startAnimation(): void {\n    const animate = (time: number) => {\n      const deltaTime = time - this.lastTime;\n      this.lastTime = time;\n      \n      this.update(deltaTime / 1000); // Convert to seconds\n      this.render();\n      \n      this.animationId = requestAnimationFrame(animate);\n    };\n    \n    this.animationId = requestAnimationFrame(animate);\n  }\n  \n  private update(deltaTime: number): void {\n    // Update all particles\n    for (let i = this.particles.length - 1; i >= 0; i--) {\n      const p = this.particles[i];\n      if (!p) continue;\n      \n      // Update position\n      p.x += p.vx * deltaTime;\n      p.y += p.vy * deltaTime;\n      \n      // Update life\n      p.life -= deltaTime;\n      \n      // Update alpha based on life\n      p.alpha = Math.max(0, p.life / p.maxLife);\n      \n      // Apply gravity for some effects\n      if (p.type === 'spark') {\n        p.vy += 200 * deltaTime; // Gravity\n      }\n      \n      // Remove dead particles\n      if (p.life <= 0) {\n        this.particles.splice(i, 1);\n      }\n    }\n  }\n  \n  private render(): void {\n    // Clear canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    // Draw all particles\n    for (const p of this.particles) {\n      this.ctx.save();\n      this.ctx.globalAlpha = p.alpha;\n      \n      if (p.type === 'circle') {\n        this.drawCircle(p);\n      } else if (p.type === 'star') {\n        this.drawStar(p);\n      } else if (p.type === 'spark') {\n        this.drawSpark(p);\n      }\n      \n      this.ctx.restore();\n    }\n  }\n  \n  private drawCircle(p: Particle): void {\n    this.ctx.beginPath();\n    this.ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);\n    this.ctx.fillStyle = p.color;\n    this.ctx.fill();\n    \n    // Add glow effect\n    this.ctx.shadowBlur = 10;\n    this.ctx.shadowColor = p.color;\n    this.ctx.fill();\n  }\n  \n  private drawStar(p: Particle): void {\n    const spikes = 5;\n    const outerRadius = p.size;\n    const innerRadius = p.size * 0.5;\n    \n    this.ctx.beginPath();\n    this.ctx.translate(p.x, p.y);\n    \n    for (let i = 0; i < spikes * 2; i++) {\n      const radius = i % 2 === 0 ? outerRadius : innerRadius;\n      const angle = (i * Math.PI) / spikes;\n      const x = Math.cos(angle) * radius;\n      const y = Math.sin(angle) * radius;\n      \n      if (i === 0) {\n        this.ctx.moveTo(x, y);\n      } else {\n        this.ctx.lineTo(x, y);\n      }\n    }\n    \n    this.ctx.closePath();\n    this.ctx.fillStyle = p.color;\n    this.ctx.fill();\n    \n    this.ctx.translate(-p.x, -p.y);\n  }\n  \n  private drawSpark(p: Particle): void {\n    this.ctx.beginPath();\n    this.ctx.moveTo(p.x, p.y);\n    this.ctx.lineTo(p.x - p.vx * 0.1, p.y - p.vy * 0.1);\n    this.ctx.strokeStyle = p.color;\n    this.ctx.lineWidth = p.size;\n    this.ctx.lineCap = 'round';\n    this.ctx.stroke();\n  }\n  \n  // Enhanced move grade calculation with special effects\n  calculateGrade(flippedCount: number, position: number, specialEffects?: SpecialEffect): Grade {\n    // Corner positions are special\n    const isCorner = position === 0 || position === 7 || position === 56 || position === 63;\n    \n    // Edge positions (not corners)\n    const row = Math.floor(position / 8);\n    const col = position % 8;\n    const isEdge = row === 0 || row === 7 || col === 0 || col === 7;\n    \n    let score = flippedCount * 10;\n    \n    // Bonus for strategic positions\n    if (isCorner) score += 60;\n    else if (isEdge) score += 20;\n    \n    // Special bonuses\n    if (specialEffects?.massive) score += 40;      // 10+ flips\n    if (specialEffects?.chain) score += 30;       // Chain reaction\n    if (specialEffects?.comeback) score += 25;    // Comeback move\n    if (specialEffects?.domination) score += 20;  // Domination move\n    if (specialEffects?.firstMove) score -= 10;   // First moves are usually basic\n    \n    // Ultra detailed grading system\n    if (score >= 80 || flippedCount >= 15) return 'SSS';  // LEGENDARY\n    if (score >= 60 || flippedCount >= 12) return 'SS';   // MYTHICAL  \n    if (score >= 40 || flippedCount >= 8) return 'S';     // EPIC\n    if (score >= 25 || flippedCount >= 5) return 'A';     // GREAT\n    if (score >= 12 || flippedCount >= 3) return 'B';     // GOOD\n    return 'C';                                            // BASIC\n  }\n  \n  // Enhanced trigger system with more variations\n  triggerMoveEffect(x: number, y: number, grade: Grade, flippedCount: number, specialEffects?: SpecialEffect): void {\n    switch (grade) {\n      case 'SSS':\n        this.createSSSEffect(x, y, flippedCount, specialEffects);\n        break;\n      case 'SS':\n        this.createSSEffect(x, y, flippedCount, specialEffects);\n        break;\n      case 'S':\n        this.createSEffect(x, y, flippedCount, specialEffects);\n        break;\n      case 'A':\n        this.createAEffect(x, y, flippedCount);\n        break;\n      case 'B':\n        this.createBEffect(x, y, flippedCount);\n        break;\n      case 'C':\n        this.createCEffect(x, y);\n        break;\n    }\n  }\n  \n  private createSSSEffect(x: number, y: number, flippedCount: number, specialEffects?: SpecialEffect): void {\n    // 🌟 LEGENDARY SSS-GRADE - GOLDEN MAGNIFICENCE! 🌟\n    const goldColors = [\n      '#ffd700', '#ffdf00', '#ffed4e', '#fff700', '#ffa500', '#daa520',\n      '#b8860b', '#ffeaa7', '#fdcb6e', '#f39c12', '#e67e22', '#d4af37'\n    ];\n    \n    console.log('🌟✨🎆 LEGENDARY SSS-GRADE MOVE - REALITY SHATTER! 🎆✨🌟');\n    \n    // NUCLEAR BLAST - 8 waves of destruction\n    for (let wave = 0; wave < 8; wave++) {\n      setTimeout(() => {\n        for (let j = 0; j < 60; j++) {\n          const angle = (j / 60) * Math.PI * 2;\n          const speed = 400 + wave * 100;\n          const wobble = Math.sin(j * 0.3) * 50;\n          \n          this.particles.push({\n            x: x,\n            y: y,\n            vx: Math.cos(angle) * speed + wobble,\n            vy: Math.sin(angle) * speed + wobble,\n            life: 2.0,\n            maxLife: 2.0,\n            size: Math.random() * 8 + 4,\n            color: goldColors[Math.floor(Math.random() * goldColors.length)] ?? '#ffd700',\n            alpha: 1,\n            type: Math.random() > 0.3 ? 'star' : 'circle'\n          });\n        }\n      }, wave * 60);\n    }\n    \n    // REALITY TEAR - Multiple vortexes\n    for (let vortex = 0; vortex < 3; vortex++) {\n      const vortexX = x + (vortex - 1) * 100;\n      for (let i = 0; i < 120; i++) {\n        const angle = (i / 10) * Math.PI + vortex * 2;\n        const radius = i * 3;\n        \n        setTimeout(() => {\n          this.particles.push({\n            x: vortexX + Math.cos(angle) * radius * 0.2,\n            y: y + Math.sin(angle) * radius * 0.2,\n            vx: Math.cos(angle + Math.PI/2) * 200,\n            vy: Math.sin(angle + Math.PI/2) * 200,\n            life: 2.5,\n            maxLife: 2.5,\n            size: Math.random() * 6 + 3,\n            color: goldColors[i % goldColors.length] ?? '#ffd700',\n            alpha: 1,\n            type: 'star'\n          });\n        }, i * 10 + vortex * 200);\n      }\n    }\n    \n    // DIMENSIONAL RIFT - Expanding void\n    for (let rift = 0; rift < 5; rift++) {\n      setTimeout(() => {\n        for (let angle = 0; angle < Math.PI * 2; angle += 0.05) {\n          this.particles.push({\n            x: x,\n            y: y,\n            vx: Math.cos(angle) * (600 + rift * 150),\n            vy: Math.sin(angle) * (600 + rift * 150),\n            life: 1.0,\n            maxLife: 1.0,\n            size: 2,\n            color: rift % 2 === 0 ? '#000000' : '#ffffff',\n            alpha: 0.9,\n            type: 'circle'\n          });\n        }\n      }, rift * 300);\n    }\n    \n    // COSMIC STORM\n    for (let i = 0; i < 200 + flippedCount * 20; i++) {\n      setTimeout(() => {\n        this.particles.push({\n          x: x + (Math.random() - 0.5) * 100,\n          y: y + Math.random() * 50,\n          vx: (Math.random() - 0.5) * 800,\n          vy: -Math.random() * 600 - 300,\n          life: 3.0,\n          maxLife: 3.0,\n          size: Math.random() * 6 + 3,\n          color: goldColors[Math.floor(Math.random() * goldColors.length)] ?? '#ffd700',\n          alpha: 1,\n          type: Math.random() > 0.5 ? 'star' : 'spark'\n        });\n      }, Math.random() * 500);\n    }\n    \n    // Special effect variations\n    if (specialEffects?.corner) {\n      console.log('🏰 CORNER LEGENDARY!');\n      this.createCornerExplosion(x, y);\n    }\n    if (specialEffects?.comeback) {\n      console.log('🔄 LEGENDARY COMEBACK!');\n      this.createComebackEffect(x, y);\n    }\n  }\n  \n  private createSSEffect(x: number, y: number, flippedCount: number, specialEffects?: SpecialEffect): void {\n    // 🌪️ MYTHICAL SS-GRADE - RED STORM! 🌪️\n    const redColors = ['#ff0000', '#dc143c', '#b22222', '#cd5c5c', '#ff6347', '#ff4500', '#ff1493', '#8b0000', '#a52a2a', '#c41e3a'];\n    \n    console.log('🌪️💎 MYTHICAL SS-GRADE MOVE! 💎🌪️');\n    \n    // CYCLONE DEVASTATION - 6 waves\n    for (let wave = 0; wave < 6; wave++) {\n      setTimeout(() => {\n        for (let j = 0; j < 50; j++) {\n          const angle = (j / 50) * Math.PI * 2;\n          const speed = 350 + wave * 80;\n          const spiral = Math.sin(j * 0.4) * 30;\n          \n          this.particles.push({\n            x: x,\n            y: y,\n            vx: Math.cos(angle) * speed + spiral,\n            vy: Math.sin(angle) * speed + spiral,\n            life: 1.8,\n            maxLife: 1.8,\n            size: Math.random() * 6 + 3,\n            color: redColors[wave % redColors.length] ?? '#ff0000',\n            alpha: 1,\n            type: Math.random() > 0.4 ? 'star' : 'circle'\n          });\n        }\n      }, wave * 100);\n    }\n    \n    // MYSTIC TORNADO\n    for (let i = 0; i < 100; i++) {\n      const angle = (i / 12) * Math.PI;\n      const radius = i * 2.5;\n      \n      setTimeout(() => {\n        this.particles.push({\n          x: x + Math.cos(angle) * radius * 0.4,\n          y: y + Math.sin(angle) * radius * 0.4,\n          vx: Math.cos(angle + Math.PI/2) * 180,\n          vy: Math.sin(angle + Math.PI/2) * 180,\n          life: 2.2,\n          maxLife: 2.2,\n          size: Math.random() * 5 + 2,\n          color: redColors[i % redColors.length] ?? '#ff0000',\n          alpha: 1,\n          type: 'star'\n        });\n      }, i * 20);\n    }\n    \n    // CRYSTAL SHOWER\n    for (let i = 0; i < 150 + flippedCount * 12; i++) {\n      setTimeout(() => {\n        this.particles.push({\n          x: x + (Math.random() - 0.5) * 80,\n          y: y + Math.random() * 30,\n          vx: (Math.random() - 0.5) * 600,\n          vy: -Math.random() * 500 - 250,\n          life: 2.8,\n          maxLife: 2.8,\n          size: Math.random() * 5 + 2,\n          color: redColors[Math.floor(Math.random() * redColors.length)] ?? '#ff6347',\n          alpha: 1,\n          type: Math.random() > 0.3 ? 'star' : 'spark'\n        });\n      }, Math.random() * 400);\n    }\n    \n    // Special effects\n    if (specialEffects?.massive) {\n      console.log('🌊 MASSIVE MYTHICAL!');\n      this.createMassiveEffect(x, y);\n    }\n    if (specialEffects?.domination) {\n      console.log('👑 MYTHICAL DOMINATION!');\n      this.createDominationEffect(x, y);\n    }\n  }\n  \n  private createSEffect(x: number, y: number, flippedCount: number, specialEffects?: SpecialEffect): void {\n    // ULTRA SPECTACULAR S-grade effect - PURPLE MAJESTY!\n    const purpleColors = ['#9932cc', '#8b00ff', '#9400d3', '#4b0082', '#6a5acd', '#7b68ee', '#9370db', '#8a2be2', '#9966cc', '#ba55d3'];\n    \n    console.log('🎆 LEGENDARY S-GRADE MOVE! 🎆');\n    \n    // MASSIVE RING BURST - 5 waves!\n    for (let wave = 0; wave < 5; wave++) {\n      setTimeout(() => {\n        for (let j = 0; j < 40; j++) { // Double the particles per wave\n          const angle = (j / 40) * Math.PI * 2;\n          const speed = 300 + wave * 80;\n          const wobble = Math.sin(j * 0.5) * 20; // Add wobble\n          \n          this.particles.push({\n            x: x,\n            y: y,\n            vx: Math.cos(angle) * speed + wobble,\n            vy: Math.sin(angle) * speed + wobble,\n            life: 1.5,\n            maxLife: 1.5,\n            size: Math.random() * 5 + 3,\n            color: purpleColors[wave % purpleColors.length] ?? '#9932cc',\n            alpha: 1,\n            type: Math.random() > 0.5 ? 'star' : 'circle'\n          });\n        }\n      }, wave * 80);\n    }\n    \n    // GIANT SPIRAL VORTEX\n    for (let i = 0; i < 80; i++) {\n      const angle = (i / 8) * Math.PI;\n      const radius = i * 4;\n      \n      setTimeout(() => {\n        this.particles.push({\n          x: x + Math.cos(angle) * radius * 0.3,\n          y: y + Math.sin(angle) * radius * 0.3,\n          vx: Math.cos(angle + Math.PI/2) * 150,\n          vy: Math.sin(angle + Math.PI/2) * 150,\n          life: 2.0,\n          maxLife: 2.0,\n          size: Math.random() * 4 + 2,\n          color: purpleColors[i % purpleColors.length] ?? '#9932cc',\n          alpha: 1,\n          type: 'star'\n        });\n      }, i * 15);\n    }\n    \n    // NUCLEAR FOUNTAIN - Always spectacular regardless of flip count\n    for (let i = 0; i < 100 + flippedCount * 15; i++) {\n      setTimeout(() => {\n        this.particles.push({\n          x: x + (Math.random() - 0.5) * 40,\n          y: y + Math.random() * 20,\n          vx: (Math.random() - 0.5) * 400,\n          vy: -Math.random() * 500 - 200,\n          life: 2.5,\n          maxLife: 2.5,\n          size: Math.random() * 4 + 2,\n          color: purpleColors[Math.floor(Math.random() * purpleColors.length)] ?? '#8a2be2',\n          alpha: 1,\n          type: Math.random() > 0.3 ? 'spark' : 'star'\n        });\n      }, Math.random() * 300);\n    }\n    \n    // SHOCKWAVE EFFECT - Expanding circles\n    for (let wave = 0; wave < 3; wave++) {\n      setTimeout(() => {\n        for (let angle = 0; angle < Math.PI * 2; angle += 0.1) {\n          this.particles.push({\n            x: x,\n            y: y,\n            vx: Math.cos(angle) * (400 + wave * 100),\n            vy: Math.sin(angle) * (400 + wave * 100),\n            life: 0.8,\n            maxLife: 0.8,\n            size: 1,\n            color: '#ffffff',\n            alpha: 0.8,\n            type: 'circle'\n          });\n        }\n      }, wave * 200);\n    }\n    \n    // STARBURST - Radial explosion\n    for (let i = 0; i < 50; i++) {\n      const angle = (i / 50) * Math.PI * 2;\n      \n      setTimeout(() => {\n        this.particles.push({\n          x: x,\n          y: y,\n          vx: Math.cos(angle) * 500,\n          vy: Math.sin(angle) * 500,\n          life: 1.2,\n          maxLife: 1.2,\n          size: Math.random() * 6 + 2,\n          color: '#9932cc',\n          alpha: 1,\n          type: 'star'\n        });\n      }, i * 20);\n    }\n  }\n  \n  private createAEffect(x: number, y: number, flippedCount: number): void {\n    // EPIC A-grade effect - AZURE BRILLIANCE!\n    const blueColors = ['#87ceeb', '#87cefa', '#00bfff', '#4169e1', '#1e90ff', '#6495ed', '#7b68ee', '#4682b4', '#5f9ea0', '#add8e6'];\n    \n    console.log('⭐ AMAZING A-GRADE MOVE! ⭐');\n    \n    // EPIC CROSS SWEEP - Multiple waves\n    const directions = [\n      [1,0], [0,1], [-1,0], [0,-1],   // Cardinals\n      [1,1], [-1,1], [1,-1], [-1,-1]  // Diagonals\n    ];\n    \n    for (const [dx, dy] of directions as [number, number][]) {\n      for (let wave = 0; wave < 3; wave++) {\n        for (let i = 0; i < 15; i++) {\n          setTimeout(() => {\n            this.particles.push({\n              x: x,\n              y: y,\n              vx: dx * (250 + wave * 50),\n              vy: dy * (250 + wave * 50),\n              life: 1.0 + wave * 0.2,\n              maxLife: 1.0 + wave * 0.2,\n              size: Math.random() * 4 + 2,\n              color: blueColors[wave % blueColors.length] ?? '#87ceeb',\n              alpha: 1,\n              type: 'star'\n            });\n          }, i * 25 + wave * 200);\n        }\n      }\n    }\n    \n    // GOLDEN RING CASCADES - Multiple expanding rings\n    for (let ring = 0; ring < 4; ring++) {\n      setTimeout(() => {\n        for (let i = 0; i < 30; i++) {\n          const angle = (i / 30) * Math.PI * 2;\n          const speed = 180 + ring * 60;\n          \n          this.particles.push({\n            x: x,\n            y: y,\n            vx: Math.cos(angle) * speed,\n            vy: Math.sin(angle) * speed,\n            life: 1.2,\n            maxLife: 1.2,\n            size: Math.random() * 3 + 2,\n            color: blueColors[ring % blueColors.length] ?? '#87ceeb',\n            alpha: 1,\n            type: ring % 2 === 0 ? 'star' : 'circle'\n          });\n        }\n      }, ring * 150);\n    }\n    \n    // GOLDEN FOUNTAIN\n    for (let i = 0; i < 60 + flippedCount * 8; i++) {\n      setTimeout(() => {\n        this.particles.push({\n          x: x + (Math.random() - 0.5) * 30,\n          y: y + Math.random() * 15,\n          vx: (Math.random() - 0.5) * 300,\n          vy: -Math.random() * 350 - 150,\n          life: 1.8,\n          maxLife: 1.8,\n          size: Math.random() * 3 + 1,\n          color: blueColors[Math.floor(Math.random() * blueColors.length)] ?? '#4169e1',\n          alpha: 1,\n          type: 'spark'\n        });\n      }, Math.random() * 400);\n    }\n    \n    // SPARKLE BURST\n    for (let i = 0; i < 25; i++) {\n      const angle = Math.random() * Math.PI * 2;\n      const distance = Math.random() * 100 + 50;\n      \n      this.particles.push({\n        x: x + Math.cos(angle) * distance,\n        y: y + Math.sin(angle) * distance,\n        vx: Math.cos(angle) * 100,\n        vy: Math.sin(angle) * 100,\n        life: 0.8,\n        maxLife: 0.8,\n        size: Math.random() * 3 + 1,\n        color: '#87ceeb',\n        alpha: 1,\n        type: 'star'\n      });\n    }\n  }\n  \n  private createBEffect(x: number, y: number, flippedCount: number): void {\n    // SOLID B-grade effect - SPRING GREEN POWER!\n    const greenColors = ['#90ee90', '#98fb98', '#00ff7f', '#00fa9a', '#7cfc00', '#7fff00', '#adff2f', '#9aff9a', '#8fbc8f', '#20b2aa'];\n    \n    console.log('💚 GOOD B-GRADE MOVE! 💚');\n    \n    // DOUBLE RING BURST\n    for (let ring = 0; ring < 2; ring++) {\n      setTimeout(() => {\n        for (let i = 0; i < 25; i++) {\n          const angle = (i / 25) * Math.PI * 2;\n          const speed = 120 + ring * 40;\n          \n          this.particles.push({\n            x: x,\n            y: y,\n            vx: Math.cos(angle) * speed,\n            vy: Math.sin(angle) * speed,\n            life: 1.0,\n            maxLife: 1.0,\n            size: Math.random() * 2 + 2,\n            color: greenColors[ring % greenColors.length] ?? '#90ee90',\n            alpha: 1,\n            type: ring === 0 ? 'circle' : 'star'\n          });\n        }\n      }, ring * 100);\n    }\n    \n    // GREEN SPARKS\n    for (let i = 0; i < 20 + flippedCount * 5; i++) {\n      const angle = Math.random() * Math.PI * 2;\n      const speed = Math.random() * 150 + 80;\n      \n      setTimeout(() => {\n        this.particles.push({\n          x: x,\n          y: y,\n          vx: Math.cos(angle) * speed,\n          vy: Math.sin(angle) * speed,\n          life: 1.2,\n          maxLife: 1.2,\n          size: Math.random() * 2 + 1,\n          color: greenColors[Math.floor(Math.random() * greenColors.length)] ?? '#00ff7f',\n          alpha: 1,\n          type: 'spark'\n        });\n      }, Math.random() * 200);\n    }\n    \n    // RADIATING LINES\n    for (let i = 0; i < 8; i++) {\n      const angle = (i / 8) * Math.PI * 2;\n      \n      for (let j = 0; j < 5; j++) {\n        setTimeout(() => {\n          this.particles.push({\n            x: x,\n            y: y,\n            vx: Math.cos(angle) * (150 + j * 30),\n            vy: Math.sin(angle) * (150 + j * 30),\n            life: 0.8,\n            maxLife: 0.8,\n            size: 2,\n            color: '#90ee90',\n            alpha: 1,\n            type: 'circle'\n          });\n        }, j * 50);\n      }\n    }\n  }\n  \n  private createCEffect(x: number, y: number): void {\n    // BASIC C-grade effect - Light gray elegance\n    const grayColors = ['#d3d3d3', '#c0c0c0', '#dcdcdc', '#f5f5f5', '#e0e0e0', '#f8f8f8', '#b8b8b8', '#a9a9a9', '#d8d8d8', '#e6e6e6'];\n    \n    console.log('⚪ Basic C-Grade Move');\n    \n    // SIMPLE RING - Still noticeable\n    for (let i = 0; i < 12; i++) {\n      const angle = (i / 12) * Math.PI * 2;\n      \n      this.particles.push({\n        x: x,\n        y: y,\n        vx: Math.cos(angle) * 80,\n        vy: Math.sin(angle) * 80,\n        life: 0.8,\n        maxLife: 0.8,\n        size: Math.random() * 1.5 + 1,\n        color: grayColors[i % grayColors.length] ?? '#d3d3d3',\n        alpha: 0.8,\n        type: 'circle'\n      });\n    }\n    \n    // SMALL SPARKLES\n    for (let i = 0; i < 6; i++) {\n      const angle = Math.random() * Math.PI * 2;\n      const speed = Math.random() * 60 + 40;\n      \n      this.particles.push({\n        x: x,\n        y: y,\n        vx: Math.cos(angle) * speed,\n        vy: Math.sin(angle) * speed,\n        life: 0.6,\n        maxLife: 0.6,\n        size: 1,\n        color: '#d3d3d3',\n        alpha: 0.7,\n        type: 'spark'\n      });\n    }\n  }\n  \n  // Create flip animation particles - SPECTACULAR ENHANCED!\n  createFlipEffect(x: number, y: number, color: string, grade?: Grade): void {\n    // Much more spectacular flip effects with grade-based colors!\n    const isBlack = color === '#000000';\n    \n    // Get grade-based colors or fallback to basic colors\n    let gradeColors: string[];\n    let intensity: number;\n    \n    if (grade) {\n      switch (grade) {\n        case 'SSS':\n          gradeColors = ['#ffd700', '#ffdf00', '#ffed4e', '#fff700', '#ffa500'];\n          intensity = 3.0;\n          break;\n        case 'SS':\n          gradeColors = ['#ff0000', '#dc143c', '#b22222', '#cd5c5c', '#ff6347'];\n          intensity = 2.5;\n          break;\n        case 'S':\n          gradeColors = ['#9932cc', '#8b00ff', '#9400d3', '#4b0082', '#6a5acd'];\n          intensity = 2.0;\n          break;\n        case 'A':\n          gradeColors = ['#87ceeb', '#87cefa', '#00bfff', '#4169e1', '#1e90ff'];\n          intensity = 1.5;\n          break;\n        case 'B':\n          gradeColors = ['#90ee90', '#98fb98', '#00ff7f', '#00fa9a', '#7cfc00'];\n          intensity = 1.2;\n          break;\n        case 'C':\n          gradeColors = ['#d3d3d3', '#c0c0c0', '#dcdcdc', '#f5f5f5', '#e0e0e0'];\n          intensity = 1.0;\n          break;\n        default:\n          gradeColors = isBlack ? ['#666666', '#888888', '#555555'] : ['#f0f0f0', '#e8e8e8', '#f5f5f5'];\n          intensity = 0.8;\n      }\n    } else {\n      gradeColors = isBlack ? ['#666666', '#888888', '#555555'] : ['#f0f0f0', '#e8e8e8', '#f5f5f5'];\n      intensity = 0.8;\n    }\n    \n    const primaryColor = gradeColors[0] ?? '#ffffff';\n    const accentColors = gradeColors;\n    \n    console.log(`🔄 Flip Effect: ${isBlack ? 'Black' : 'White'} piece flipped! Grade: ${grade || 'Basic'}`);\n    \n    // EXPLOSIVE FLIP BURST - Intensity based on grade!\n    const burstCount = Math.floor(15 * intensity);\n    for (let i = 0; i < burstCount; i++) {\n      const angle = (i / burstCount) * Math.PI * 2;\n      const speed = (Math.random() * 60 + 60) * intensity;\n      \n      this.particles.push({\n        x: x,\n        y: y,\n        vx: Math.cos(angle) * speed,\n        vy: Math.sin(angle) * speed,\n        life: 0.6 * intensity,\n        maxLife: 0.6 * intensity,\n        size: (Math.random() * 1.5 + 1) * intensity,\n        color: i % 3 === 0 ? primaryColor : accentColors[i % accentColors.length] ?? primaryColor,\n        alpha: 0.9,\n        type: i % 2 === 0 ? 'spark' : 'star'\n      });\n    }\n    \n    // RING EXPANSION - Visual flip wave (intensity-based)\n    const ringCount = Math.floor(2 + intensity);\n    for (let ring = 0; ring < ringCount; ring++) {\n      setTimeout(() => {\n        const particlesPerRing = Math.floor(12 + intensity * 4);\n        for (let i = 0; i < particlesPerRing; i++) {\n          const angle = (i / particlesPerRing) * Math.PI * 2;\n          const speed = (80 + ring * 30) * intensity;\n          \n          this.particles.push({\n            x: x,\n            y: y,\n            vx: Math.cos(angle) * speed,\n            vy: Math.sin(angle) * speed,\n            life: 0.6 + ring * 0.2,\n            maxLife: 0.6 + ring * 0.2,\n            size: ring === 0 ? 2 : 1,\n            color: primaryColor,\n            alpha: 0.7 - ring * 0.2,\n            type: 'circle'\n          });\n        }\n      }, ring * 80);\n    }\n    \n    // FLIP SPARKLE TRAIL - Cascading sparkles\n    for (let i = 0; i < 15; i++) {\n      const angle = Math.random() * Math.PI * 2;\n      const speed = Math.random() * 60 + 40;\n      \n      setTimeout(() => {\n        this.particles.push({\n          x: x + (Math.random() - 0.5) * 20,\n          y: y + (Math.random() - 0.5) * 20,\n          vx: Math.cos(angle) * speed,\n          vy: Math.sin(angle) * speed,\n          life: 0.7,\n          maxLife: 0.7,\n          size: Math.random() * 1.5 + 1,\n          color: accentColors[Math.floor(Math.random() * accentColors.length)] ?? '#d3d3d3',\n          alpha: 0.8,\n          type: 'spark'\n        });\n      }, Math.random() * 200);\n    }\n    \n    // MAGIC DUST - Floating ambient particles\n    for (let i = 0; i < 8; i++) {\n      setTimeout(() => {\n        this.particles.push({\n          x: x + (Math.random() - 0.5) * 30,\n          y: y + (Math.random() - 0.5) * 30,\n          vx: (Math.random() - 0.5) * 30,\n          vy: -Math.random() * 40 - 20,\n          life: 1.2,\n          maxLife: 1.2,\n          size: Math.random() * 1 + 0.5,\n          color: primaryColor,\n          alpha: 0.6,\n          type: 'circle'\n        });\n      }, Math.random() * 300);\n    }\n    \n    // FLIP SHOCKWAVE - Single expanding ring\n    setTimeout(() => {\n      for (let angle = 0; angle < Math.PI * 2; angle += 0.2) {\n        this.particles.push({\n          x: x,\n          y: y,\n          vx: Math.cos(angle) * 150,\n          vy: Math.sin(angle) * 150,\n          life: 0.4,\n          maxLife: 0.4,\n          size: 1.5,\n          color: isBlack ? '#333333' : '#f9f9f9',\n          alpha: 0.5,\n          type: 'circle'\n        });\n      }\n    }, 100);\n  }\n  \n  // Clean up\n  destroy(): void {\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n    }\n    this.particles = [];\n    this.canvas.remove();\n  }\n  \n  // Get particle count for performance monitoring\n  getParticleCount(): number {\n    return this.particles.length;\n  }\n  \n  // Special situation effects\n  private createCornerExplosion(x: number, y: number): void {\n    // Golden castle walls effect for corner captures\n    const castleColors = ['#ffd700', '#ffdf00', '#ffa500'];\n    \n    // Castle wall pattern\n    for (let wall = 0; wall < 4; wall++) {\n      const angle = (wall / 4) * Math.PI * 2;\n      \n      for (let brick = 0; brick < 20; brick++) {\n        setTimeout(() => {\n          this.particles.push({\n            x: x,\n            y: y,\n            vx: Math.cos(angle) * 300 + (Math.random() - 0.5) * 100,\n            vy: Math.sin(angle) * 300 + (Math.random() - 0.5) * 100,\n            life: 1.5,\n            maxLife: 1.5,\n            size: Math.random() * 3 + 2,\n            color: castleColors[brick % castleColors.length] ?? '#ffd700',\n            alpha: 1,\n            type: 'circle'\n          });\n        }, brick * 30 + wall * 200);\n      }\n    }\n  }\n  \n  private createComebackEffect(x: number, y: number): void {\n    // Phoenix rising effect for comeback moves\n    const phoenixColors = ['#ff4500', '#ff6347', '#ffa500', '#ff1493'];\n    \n    // Rising phoenix flames\n    for (let i = 0; i < 80; i++) {\n      setTimeout(() => {\n        this.particles.push({\n          x: x + (Math.random() - 0.5) * 60,\n          y: y + Math.random() * 30,\n          vx: (Math.random() - 0.5) * 200,\n          vy: -Math.random() * 400 - 200,\n          life: 2.0,\n          maxLife: 2.0,\n          size: Math.random() * 4 + 2,\n          color: phoenixColors[Math.floor(Math.random() * phoenixColors.length)] ?? '#ff6347',\n          alpha: 0.9,\n          type: 'spark'\n        });\n      }, Math.random() * 600);\n    }\n  }\n  \n  private createMassiveEffect(x: number, y: number): void {\n    // Tsunami wave for massive flips\n    const waveColors = ['#0080ff', '#00bfff', '#87ceeb', '#b0e0e6'];\n    \n    // Wave fronts\n    for (let wave = 0; wave < 6; wave++) {\n      setTimeout(() => {\n        for (let particle = 0; particle < 40; particle++) {\n          const angle = (particle / 40) * Math.PI * 2;\n          \n          this.particles.push({\n            x: x,\n            y: y,\n            vx: Math.cos(angle) * (200 + wave * 50),\n            vy: Math.sin(angle) * (200 + wave * 50),\n            life: 1.0 + wave * 0.2,\n            maxLife: 1.0 + wave * 0.2,\n            size: Math.random() * 3 + 1,\n            color: waveColors[wave % waveColors.length] ?? '#0080ff',\n            alpha: 0.8,\n            type: 'circle'\n          });\n        }\n      }, wave * 150);\n    }\n  }\n  \n  private createDominationEffect(x: number, y: number): void {\n    // Crown and scepter effect for domination\n    const royalColors = ['#9932cc', '#8b00ff', '#ffd700', '#daa520'];\n    \n    // Crown jewels\n    for (let jewel = 0; jewel < 12; jewel++) {\n      const angle = (jewel / 12) * Math.PI * 2;\n      \n      setTimeout(() => {\n        this.particles.push({\n          x: x + Math.cos(angle) * 50,\n          y: y + Math.sin(angle) * 50,\n          vx: Math.cos(angle) * 150,\n          vy: Math.sin(angle) * 150,\n          life: 1.8,\n          maxLife: 1.8,\n          size: Math.random() * 4 + 3,\n          color: royalColors[jewel % royalColors.length] ?? '#9932cc',\n          alpha: 1,\n          type: 'star'\n        });\n      }, jewel * 80);\n    }\n  }\n  \n  // Chain reaction effect\n  createChainEffect(x: number, y: number): void {\n    // Lightning chain for chain reactions\n    const lightningColors = ['#ffff00', '#ffffff', '#00ffff'];\n    \n    // Lightning bolts\n    for (let bolt = 0; bolt < 8; bolt++) {\n      const angle = (bolt / 8) * Math.PI * 2;\n      \n      for (let segment = 0; segment < 10; segment++) {\n        setTimeout(() => {\n          this.particles.push({\n            x: x,\n            y: y,\n            vx: Math.cos(angle) * (100 + segment * 20) + (Math.random() - 0.5) * 60,\n            vy: Math.sin(angle) * (100 + segment * 20) + (Math.random() - 0.5) * 60,\n            life: 0.4,\n            maxLife: 0.4,\n            size: 2,\n            color: lightningColors[segment % lightningColors.length] ?? '#ffff00',\n            alpha: 1,\n            type: 'spark'\n          });\n        }, segment * 20 + bolt * 50);\n      }\n    }\n  }\n}","/**\n * Super Reversi - Complete Game Implementation with Particle Effects\n * \n * Full working version with game logic, AI, animations, and particle effects\n */\n\nimport './style.css';\nimport { ParticleSystem, type Grade, type SpecialEffect } from './particle-system';\n\n// Constants\nconst BOARD_SIZE = 8;\nconst EMPTY = 0;\nconst BLACK = 1;\nconst WHITE = 2;\nconst DIRECTIONS: [number, number][] = [\n  [-1, -1], [-1, 0], [-1, 1],\n  [0, -1],           [0, 1],\n  [1, -1],  [1, 0],  [1, 1]\n];\n\n// Game State\ninterface GameState {\n  board: number[];\n  currentPlayer: number;\n  blackScore: number;\n  whiteScore: number;\n  gameMode: 'pvp' | 'pvc';\n  isGameOver: boolean;\n  validMoves: Set<number>;\n  moveHistory: Array<{position: number, player: number, flipped: number[]}>;\n  aiDifficulty: 'easy' | 'medium' | 'hard';\n}\n\nclass SuperReversiGame {\n  private container: HTMLElement | null = null;\n  private currentScreen: 'menu' | 'game' | 'help' | 'settings' = 'menu';\n  private gameState: GameState | null = null;\n  private isProcessingMove = false;\n  private aiThinking = false;\n  private particleSystem: ParticleSystem;\n  \n  constructor() {\n    console.log('🎮 Super Reversi - Initializing...');\n    this.particleSystem = new ParticleSystem();\n  }\n  \n  async initialize(container: HTMLElement): Promise<void> {\n    this.container = container;\n    this.setupUI();\n    \n    // Initialize particle system\n    this.particleSystem.initialize(container);\n    \n    this.showMenu();\n    console.log('✅ Super Reversi ready!');\n  }\n  \n  private setupUI(): void {\n    if (!this.container) return;\n    \n    this.container.innerHTML = `\n      <div class=\"super-reversi-app\">\n        <div class=\"game-header\" id=\"game-header\" style=\"display: none;\">\n          <h1>🎮 Super Reversi</h1>\n          <div class=\"score-display\" id=\"score-display\">\n            <span id=\"black-score\">⚫ Black: 2</span>\n            <span id=\"current-turn\" style=\"color: #ffd700;\">Current: Black</span>\n            <span id=\"white-score\">⚪ White: 2</span>\n          </div>\n        </div>\n        <div id=\"screen-container\" class=\"screen-container\">\n          <!-- Screens render here -->\n        </div>\n      </div>\n    `;\n    \n    this.addStyles();\n  }\n  \n  private addStyles(): void {\n    const style = document.createElement('style');\n    style.textContent = `\n      body, html {\n        margin: 0;\n        padding: 0;\n        height: 100%;\n        overflow: hidden;\n      }\n      \n      #app {\n        width: 100%;\n        min-height: 100vh;\n        height: 100dvh;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);\n      }\n      \n      #game-container {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 100%;\n        height: 100%;\n      }\n      \n      .super-reversi-app {\n        width: 100%;\n        height: 100%;\n        max-width: 1200px;\n        max-height: 900px;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        padding: 20px;\n        font-family: 'Segoe UI', Arial, sans-serif;\n        box-sizing: border-box;\n      }\n      \n      .game-header {\n        width: 100%;\n        max-width: 800px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 20px;\n        background: rgba(42, 42, 42, 0.9);\n        border-radius: 12px;\n        margin-bottom: 20px;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n      }\n      \n      .game-header h1 {\n        color: #00ff7f;\n        margin: 0;\n        font-size: 28px;\n        text-shadow: 0 0 10px rgba(0,255,127,0.5);\n      }\n      \n      .score-display {\n        display: flex;\n        gap: 30px;\n        color: white;\n        font-size: 18px;\n        font-weight: bold;\n      }\n      \n      .screen-container {\n        width: 100%;\n        max-width: 900px;\n        height: auto;\n        flex: 1;\n        background: rgba(26, 26, 26, 0.95);\n        border-radius: 12px;\n        padding: 30px;\n        box-shadow: 0 8px 24px rgba(0,0,0,0.4);\n        box-sizing: border-box;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        overflow: hidden;\n      }\n      \n      .menu-screen {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        gap: 20px;\n        padding: 40px;\n        animation: fadeIn 0.5s ease;\n        height: 100%;\n      }\n      \n      @keyframes fadeIn {\n        from { opacity: 0; transform: translateY(20px); }\n        to { opacity: 1; transform: translateY(0); }\n      }\n      \n      .menu-title {\n        font-size: 36px;\n        color: #00ff7f;\n        margin-bottom: 20px;\n        text-align: center;\n        text-shadow: 0 0 20px rgba(0,255,127,0.5);\n      }\n      \n      .menu-button {\n        width: 250px;\n        padding: 18px 30px;\n        font-size: 18px;\n        font-weight: bold;\n        background: linear-gradient(135deg, #00ff7f, #00cc65);\n        color: #1a1a1a;\n        border: none;\n        border-radius: 10px;\n        cursor: pointer;\n        transition: all 0.3s ease;\n        box-shadow: 0 4px 12px rgba(0,255,127,0.3);\n      }\n      \n      .menu-button:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 6px 20px rgba(0,255,127,0.5);\n      }\n      \n      .menu-button:active {\n        transform: translateY(0);\n      }\n      \n      .difficulty-selector {\n        display: flex;\n        gap: 10px;\n        margin: 20px 0;\n      }\n      \n      .difficulty-button {\n        padding: 10px 20px;\n        background: #444;\n        color: white;\n        border: 2px solid transparent;\n        border-radius: 6px;\n        cursor: pointer;\n        transition: all 0.3s;\n      }\n      \n      .difficulty-button.active {\n        background: #00ff7f;\n        color: #1a1a1a;\n        border-color: #00ff7f;\n      }\n      \n      .game-board {\n        width: min(450px, 70vmin);\n        height: min(450px, 70vmin);\n        display: grid;\n        grid-template-columns: repeat(8, 1fr);\n        grid-template-rows: repeat(8, 1fr);\n        gap: 2px;\n        background: #1a3d1a;\n        padding: 10px;\n        border-radius: 12px;\n        margin: 10px auto;\n        box-shadow: inset 0 0 20px rgba(0,0,0,0.5);\n        flex-shrink: 0;\n      }\n      \n      @media (max-height: 700px) {\n        .game-board {\n          width: min(350px, 60vh);\n          height: min(350px, 60vh);\n        }\n      }\n      \n      .board-cell {\n        background: #2d4a2d;\n        border: 1px solid #1a3d1a;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        transition: all 0.2s ease;\n        position: relative;\n      }\n      \n      .board-cell:hover {\n        background: #3a5a3a;\n      }\n      \n      .board-cell.valid-move {\n        background: #4a6a4a;\n        box-shadow: inset 0 0 10px rgba(0,255,127,0.3);\n      }\n      \n      .board-cell.valid-move::after {\n        content: '•';\n        color: rgba(0,255,127,0.5);\n        font-size: 24px;\n        position: absolute;\n      }\n      \n      .board-cell.last-move {\n        box-shadow: inset 0 0 15px rgba(255,215,0,0.5);\n      }\n      \n      .piece {\n        width: 85%;\n        height: 85%;\n        border-radius: 50%;\n        transition: all 0.3s ease;\n        box-shadow: 0 2px 8px rgba(0,0,0,0.4);\n      }\n      \n      .piece-black {\n        background: radial-gradient(circle at 30% 30%, #444, #000);\n        border: 2px solid #222;\n      }\n      \n      .piece-white {\n        background: radial-gradient(circle at 30% 30%, #fff, #ddd);\n        border: 2px solid #ccc;\n      }\n      \n      @keyframes flipPiece {\n        0% { transform: rotateY(0deg) scale(1); }\n        50% { transform: rotateY(90deg) scale(0.8); }\n        100% { transform: rotateY(180deg) scale(1); }\n      }\n      \n      .piece.flipping {\n        animation: flipPiece 0.5s ease-in-out;\n      }\n      \n      @keyframes placePiece {\n        0% { transform: scale(0) rotate(0deg); opacity: 0; }\n        50% { transform: scale(1.2) rotate(180deg); opacity: 1; }\n        100% { transform: scale(1) rotate(360deg); opacity: 1; }\n      }\n      \n      .piece.placing {\n        animation: placePiece 0.4s ease-out;\n      }\n      \n      .game-screen {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: flex-start;\n        width: 100%;\n        height: 100%;\n        overflow: hidden;\n        gap: 10px;\n      }\n      \n      .game-controls {\n        width: 100%;\n        display: flex;\n        justify-content: flex-start;\n        margin-bottom: 20px;\n      }\n      \n      .back-button {\n        padding: 12px 24px;\n        background: #666;\n        color: white;\n        border: none;\n        border-radius: 6px;\n        cursor: pointer;\n        font-size: 16px;\n        transition: background 0.3s, transform 0.3s;\n        white-space: nowrap; /* Prevent text wrap */\n      }\n      \n      .back-button:hover {\n        background: #777;\n        transform: translateX(-5px);\n      }\n      \n      .game-info {\n        text-align: center;\n        color: #ccc;\n        font-size: 14px;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n        gap: 5px;\n        flex-shrink: 0;\n      }\n      \n      #ai-status {\n        height: 20px;\n        font-size: 14px;\n      }\n      \n      .game-over-modal {\n        position: fixed;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        background: rgba(42, 42, 42, 0.98);\n        padding: 40px;\n        border-radius: 20px;\n        text-align: center;\n        box-shadow: 0 10px 40px rgba(0,0,0,0.5);\n        z-index: 1000;\n        animation: modalAppear 0.3s ease;\n      }\n      \n      @keyframes modalAppear {\n        from { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }\n        to { opacity: 1; transform: translate(-50%, -50%) scale(1); }\n      }\n      \n      .game-over-title {\n        font-size: 32px;\n        color: #00ff7f;\n        margin-bottom: 20px;\n      }\n      \n      .final-scores {\n        font-size: 24px;\n        color: white;\n        margin: 20px 0;\n      }\n      \n      .modal-buttons {\n        display: flex;\n        gap: 20px;\n        justify-content: center;\n        margin-top: 30px;\n      }\n      \n      .ai-thinking {\n        display: inline-block;\n        color: #ffd700;\n        font-style: italic;\n        animation: pulse 1s infinite;\n      }\n      \n      @keyframes pulse {\n        0%, 100% { opacity: 1; }\n        50% { opacity: 0.5; }\n      }\n      \n      .settings-screen {\n        color: white;\n        flex: 1;\n        overflow-y: auto;\n        padding-right: 10px;\n      }\n      \n      .settings-group {\n        margin: 25px 0;\n      }\n      \n      .settings-group h3 {\n        color: #00ff7f;\n        margin-bottom: 15px;\n        font-size: 20px;\n      }\n      \n      .settings-screen label {\n        display: block;\n        margin: 10px 0;\n        font-size: 16px;\n        cursor: pointer;\n      }\n      \n      .settings-screen input[type=\"checkbox\"] {\n        margin-right: 10px;\n        cursor: pointer;\n      }\n      \n      .help-screen {\n        color: #ccc;\n        line-height: 1.6;\n        flex: 1;\n        overflow-y: auto; /* Allow scrolling if content is too long */\n        padding-right: 10px;\n      }\n      \n      .help-screen h2 {\n        color: #00ff7f;\n        margin-bottom: 15px;\n        font-size: 24px;\n      }\n      \n      .help-screen h3 {\n        color: #ffd700;\n        margin-top: 15px;\n        margin-bottom: 8px;\n        font-size: 18px;\n      }\n      \n      .help-screen ul {\n        margin-left: 20px;\n        margin-bottom: 10px;\n      }\n      \n      .help-screen li {\n        margin: 5px 0;\n        font-size: 14px;\n      }\n      \n      .help-screen p {\n        margin: 8px 0;\n        font-size: 14px;\n      }\n      \n      /* Custom scrollbar for help screen */\n      .help-screen::-webkit-scrollbar {\n        width: 8px;\n      }\n      \n      .help-screen::-webkit-scrollbar-track {\n        background: rgba(255, 255, 255, 0.1);\n        border-radius: 4px;\n      }\n      \n      .help-screen::-webkit-scrollbar-thumb {\n        background: rgba(0, 255, 127, 0.5);\n        border-radius: 4px;\n      }\n      \n      .help-screen::-webkit-scrollbar-thumb:hover {\n        background: rgba(0, 255, 127, 0.7);\n      }\n    `;\n    document.head.appendChild(style);\n  }\n  \n  // ===== MENU SCREENS =====\n  \n  private showMenu(): void {\n    const screenContainer = document.getElementById('screen-container');\n    if (!screenContainer) return;\n    \n    this.currentScreen = 'menu';\n    const header = document.getElementById('game-header');\n    if (header) header.style.display = 'none';\n    \n    screenContainer.innerHTML = `\n      <div class=\"menu-screen\">\n        <h2 class=\"menu-title\">🎯 Choose Game Mode</h2>\n        <button class=\"menu-button\" id=\"pvp-btn\">👥 Player vs Player</button>\n        <button class=\"menu-button\" id=\"pvc-btn\">🤖 Player vs Computer</button>\n        <button class=\"menu-button\" id=\"settings-btn\">⚙️ Settings</button>\n        <button class=\"menu-button\" id=\"help-btn\">❓ How to Play</button>\n      </div>\n    `;\n    \n    document.getElementById('pvp-btn')?.addEventListener('click', () => {\n      this.startNewGame('pvp');\n    });\n    \n    document.getElementById('pvc-btn')?.addEventListener('click', () => {\n      this.showAIDifficultyMenu();\n    });\n    \n    document.getElementById('settings-btn')?.addEventListener('click', () => {\n      this.showSettings();\n    });\n    \n    document.getElementById('help-btn')?.addEventListener('click', () => {\n      this.showHelp();\n    });\n  }\n  \n  private showAIDifficultyMenu(): void {\n    const screenContainer = document.getElementById('screen-container');\n    if (!screenContainer) return;\n    \n    screenContainer.innerHTML = `\n      <div class=\"menu-screen\">\n        <button class=\"back-button\" id=\"back-btn\" style=\"align-self: flex-start; margin-bottom: 20px;\">← Back to Menu</button>\n        <h2 class=\"menu-title\">🤖 Select AI Difficulty</h2>\n        <div class=\"difficulty-selector\">\n          <button class=\"difficulty-button active\" data-diff=\"easy\">Easy</button>\n          <button class=\"difficulty-button\" data-diff=\"medium\">Medium</button>\n          <button class=\"difficulty-button\" data-diff=\"hard\">Hard</button>\n        </div>\n        <p style=\"color: #ccc; text-align: center; margin: 20px 0;\">\n          <span id=\"diff-desc\">Easy: AI makes random valid moves</span>\n        </p>\n        <button class=\"menu-button\" id=\"start-ai-btn\">Start Game</button>\n      </div>\n    `;\n    \n    let selectedDifficulty: 'easy' | 'medium' | 'hard' = 'easy';\n    \n    const diffButtons = document.querySelectorAll('.difficulty-button');\n    const diffDesc = document.getElementById('diff-desc');\n    \n    const descriptions = {\n      easy: 'Easy: AI makes random valid moves',\n      medium: 'Medium: AI tries to maximize flips',\n      hard: 'Hard: AI uses advanced strategy'\n    };\n    \n    diffButtons.forEach(btn => {\n      btn.addEventListener('click', () => {\n        diffButtons.forEach(b => b.classList.remove('active'));\n        btn.classList.add('active');\n        selectedDifficulty = btn.getAttribute('data-diff') as any;\n        if (diffDesc) {\n          diffDesc.textContent = descriptions[selectedDifficulty];\n        }\n      });\n    });\n    \n    document.getElementById('back-btn')?.addEventListener('click', () => {\n      this.showMenu();\n    });\n    \n    document.getElementById('start-ai-btn')?.addEventListener('click', () => {\n      this.startNewGame('pvc', selectedDifficulty);\n    });\n  }\n  \n  private showSettings(): void {\n    const screenContainer = document.getElementById('screen-container');\n    if (!screenContainer) return;\n    \n    this.currentScreen = 'settings';\n    \n    screenContainer.innerHTML = `\n      <button class=\"back-button\" id=\"back-btn\" style=\"margin-bottom: 15px;\">← Back to Menu</button>\n      <div class=\"settings-screen\">\n        <h2 style=\"color: #00ff7f; margin-bottom: 20px;\">⚙️ Settings</h2>\n        \n        <div class=\"settings-group\">\n          <h3>Visual Settings</h3>\n          <label>\n            <input type=\"checkbox\" id=\"show-valid\" checked> Show valid moves\n          </label>\n          <label>\n            <input type=\"checkbox\" id=\"show-last\" checked> Highlight last move\n          </label>\n          <label>\n            <input type=\"checkbox\" id=\"animations\" checked> Enable animations\n          </label>\n        </div>\n        \n        <div class=\"settings-group\">\n          <h3>Game Settings</h3>\n          <label>\n            <input type=\"checkbox\" id=\"auto-pass\" checked> Auto-pass when no moves\n          </label>\n          <label>\n            <input type=\"checkbox\" id=\"confirm-moves\"> Confirm moves (vs Computer)\n          </label>\n        </div>\n        \n        <button class=\"menu-button\" id=\"save-settings\" style=\"margin-top: 20px;\">\n          Save Settings\n        </button>\n      </div>\n    `;\n    \n    document.getElementById('back-btn')?.addEventListener('click', () => {\n      this.showMenu();\n    });\n    \n    document.getElementById('save-settings')?.addEventListener('click', () => {\n      // Save settings to localStorage\n      const settings = {\n        showValid: (document.getElementById('show-valid') as HTMLInputElement)?.checked,\n        showLast: (document.getElementById('show-last') as HTMLInputElement)?.checked,\n        animations: (document.getElementById('animations') as HTMLInputElement)?.checked,\n        autoPass: (document.getElementById('auto-pass') as HTMLInputElement)?.checked,\n        confirmMoves: (document.getElementById('confirm-moves') as HTMLInputElement)?.checked\n      };\n      localStorage.setItem('reversi-settings', JSON.stringify(settings));\n      alert('Settings saved!');\n      this.showMenu();\n    });\n  }\n  \n  private showHelp(): void {\n    const screenContainer = document.getElementById('screen-container');\n    if (!screenContainer) return;\n    \n    this.currentScreen = 'help';\n    \n    screenContainer.innerHTML = `\n      <button class=\"back-button\" id=\"back-btn\" style=\"margin-bottom: 15px;\">← Back to Menu</button>\n      <div class=\"help-screen\">\n        <h2>❓ How to Play Reversi</h2>\n        \n        <h3>🎯 Objective</h3>\n        <p>Have the most pieces when the game ends.</p>\n        \n        <h3>📋 Rules</h3>\n        <ul>\n          <li>Black moves first</li>\n          <li>Capture pieces between yours</li>\n          <li>Can capture in 8 directions</li>\n          <li>Must capture at least 1 piece</li>\n          <li>Pass if no valid moves</li>\n          <li>Game ends when no moves left</li>\n        </ul>\n        \n        <h3>💡 Strategy</h3>\n        <ul>\n          <li><strong>Corners:</strong> Can't be flipped!</li>\n          <li><strong>Edges:</strong> Harder to flip</li>\n          <li><strong>Mobility:</strong> Limit opponent moves</li>\n          <li><strong>Patience:</strong> Less can be more</li>\n        </ul>\n        \n        <h3>🎮 Controls</h3>\n        <ul>\n          <li>Click highlighted cells to move</li>\n          <li>Green = valid moves</li>\n          <li>Gold = last move</li>\n        </ul>\n      </div>\n    `;\n    \n    document.getElementById('back-btn')?.addEventListener('click', () => {\n      this.showMenu();\n    });\n  }\n  \n  // ===== GAME LOGIC =====\n  \n  private startNewGame(mode: 'pvp' | 'pvc', aiDifficulty: 'easy' | 'medium' | 'hard' = 'easy'): void {\n    // Initialize game state\n    this.gameState = {\n      board: this.createInitialBoard(),\n      currentPlayer: BLACK,\n      blackScore: 2,\n      whiteScore: 2,\n      gameMode: mode,\n      isGameOver: false,\n      validMoves: new Set(),\n      moveHistory: [],\n      aiDifficulty: aiDifficulty\n    };\n    \n    // Calculate initial valid moves\n    this.updateValidMoves();\n    \n    // Show game screen\n    this.showGameScreen();\n    \n    // Update display\n    this.updateDisplay();\n  }\n  \n  private createInitialBoard(): number[] {\n    const board = new Array(64).fill(EMPTY);\n    board[27] = WHITE;\n    board[28] = BLACK;\n    board[35] = BLACK;\n    board[36] = WHITE;\n    return board;\n  }\n  \n  private showGameScreen(): void {\n    const screenContainer = document.getElementById('screen-container');\n    if (!screenContainer || !this.gameState) return;\n    \n    this.currentScreen = 'game';\n    const header = document.getElementById('game-header');\n    if (header) header.style.display = 'flex';\n    \n    const modeText = this.gameState.gameMode === 'pvp' ? \n      'Player vs Player' : \n      `Player vs AI (${this.gameState.aiDifficulty})`;\n    \n    screenContainer.innerHTML = `\n      <div class=\"game-screen\">\n        <div class=\"game-controls\">\n          <button class=\"back-button\" id=\"back-btn\">← Back to Menu</button>\n        </div>\n        <div class=\"game-info\">\n          <div>Mode: ${modeText}</div>\n          <div id=\"turn-indicator\">Current Turn: <span style=\"color: #ffd700;\">Black</span></div>\n          <div id=\"ai-status\"></div>\n        </div>\n        <div class=\"game-board\" id=\"game-board\"></div>\n        <div id=\"game-over-modal\" style=\"display: none;\"></div>\n      </div>\n    `;\n    \n    // Create board cells\n    this.createBoardCells();\n    \n    // Add back button handler\n    document.getElementById('back-btn')?.addEventListener('click', () => {\n      if (confirm('Are you sure you want to quit the current game?')) {\n        this.showMenu();\n      }\n    });\n  }\n  \n  private createBoardCells(): void {\n    const board = document.getElementById('game-board');\n    if (!board || !this.gameState) return;\n    \n    board.innerHTML = '';\n    \n    for (let i = 0; i < 64; i++) {\n      const cell = document.createElement('div');\n      cell.className = 'board-cell';\n      cell.dataset.position = i.toString();\n      \n      // Add click handler\n      cell.addEventListener('click', () => {\n        if (!this.isProcessingMove && !this.aiThinking) {\n          this.handleCellClick(i);\n        }\n      });\n      \n      board.appendChild(cell);\n    }\n    \n    // Render initial pieces\n    this.renderBoard();\n  }\n  \n  private renderBoard(): void {\n    if (!this.gameState) return;\n    \n    const settings = this.getSettings();\n    \n    for (let i = 0; i < 64; i++) {\n      const cell = document.querySelector(`[data-position=\"${i}\"]`) as HTMLElement;\n      if (!cell) continue;\n      \n      // Clear cell classes\n      cell.className = 'board-cell';\n      \n      // Show valid moves\n      if (settings.showValid && this.gameState.validMoves.has(i)) {\n        cell.classList.add('valid-move');\n      }\n      \n      // Show last move\n      if (settings.showLast && this.gameState.moveHistory.length > 0) {\n        const lastMove = this.gameState.moveHistory[this.gameState.moveHistory.length - 1];\n        if (lastMove && lastMove.position === i) {\n          cell.classList.add('last-move');\n        }\n      }\n      \n      // Clear and add pieces\n      cell.innerHTML = '';\n      if (this.gameState.board[i] !== EMPTY) {\n        const piece = document.createElement('div');\n        piece.className = `piece ${this.gameState.board[i] === BLACK ? 'piece-black' : 'piece-white'}`;\n        cell.appendChild(piece);\n      }\n    }\n  }\n  \n  private getSettings(): any {\n    const stored = localStorage.getItem('reversi-settings');\n    if (stored) {\n      return JSON.parse(stored);\n    }\n    return {\n      showValid: true,\n      showLast: true,\n      animations: true,\n      autoPass: true,\n      confirmMoves: false\n    };\n  }\n  \n  private handleCellClick(position: number): void {\n    if (!this.gameState || this.gameState.isGameOver) return;\n    \n    // Check if it's a valid move\n    if (!this.gameState.validMoves.has(position)) {\n      console.log('Invalid move');\n      return;\n    }\n    \n    // For PvC mode with confirmMoves setting\n    const settings = this.getSettings();\n    if (this.gameState.gameMode === 'pvc' && \n        this.gameState.currentPlayer === BLACK && \n        settings.confirmMoves) {\n      if (!confirm('Confirm this move?')) {\n        return;\n      }\n    }\n    \n    // Make the move\n    this.makeMove(position);\n  }\n  \n  private makeMove(position: number): void {\n    if (!this.gameState) return;\n    \n    this.isProcessingMove = true;\n    \n    // Get pieces to flip\n    const toFlip = this.getFlippedPieces(position, this.gameState.currentPlayer);\n    \n    // Analyze game situation for special effects\n    const specialEffects: SpecialEffect = {\n      corner: position === 0 || position === 7 || position === 56 || position === 63,\n      edge: this.isEdgePosition(position),\n      massive: toFlip.length >= 10,\n      chain: this.isChainMove(toFlip),\n      comeback: this.isComebackMove(),\n      domination: this.isDominationMove()\n    };\n    \n    // Calculate move grade with special effects\n    const grade = this.particleSystem.calculateGrade(toFlip.length, position, specialEffects);\n    \n    // Get cell position for particle effects\n    const cell = document.querySelector(`[data-position=\"${position}\"]`) as HTMLElement;\n    if (cell) {\n      const rect = cell.getBoundingClientRect();\n      const containerRect = this.container!.getBoundingClientRect();\n      const x = rect.left + rect.width / 2 - containerRect.left;\n      const y = rect.top + rect.height / 2 - containerRect.top;\n      \n      // Trigger particle effect based on grade with special effects\n      this.particleSystem.triggerMoveEffect(x, y, grade, toFlip.length, specialEffects);\n      \n      // Additional special effects\n      if (specialEffects.chain) {\n        this.particleSystem.createChainEffect(x, y);\n      }\n      \n      // Show grade indicator\n      this.showGradeIndicator(grade, x, y);\n    }\n    \n    // Record move in history\n    this.gameState.moveHistory.push({\n      position: position,\n      player: this.gameState.currentPlayer,\n      flipped: toFlip\n    });\n    \n    // Add screen shake for higher grades\n    this.triggerScreenShake(grade);\n    \n    // Place the piece with animation\n    this.gameState.board[position] = this.gameState.currentPlayer;\n    if (cell) {\n      const piece = document.createElement('div');\n      piece.className = `piece ${this.gameState.currentPlayer === BLACK ? 'piece-black' : 'piece-white'} placing`;\n      cell.innerHTML = '';\n      cell.appendChild(piece);\n    }\n    \n    // Flip pieces with animation and particles\n    const settings = this.getSettings();\n    if (settings.animations) {\n      setTimeout(() => {\n        this.flipPiecesWithEffects(toFlip, grade);\n        // Adjust timeout based on number of pieces being flipped\n        const flipDuration = toFlip.length * 80 + 300;\n        setTimeout(() => {\n          this.afterMove();\n        }, flipDuration);\n      }, 200);\n    } else {\n      this.flipPiecesWithEffects(toFlip, grade);\n      this.afterMove();\n    }\n  }\n  \n  private showGradeIndicator(grade: Grade, x: number, y: number): void {\n    // Create a temporary grade indicator\n    const indicator = document.createElement('div');\n    indicator.style.position = 'absolute';\n    indicator.style.left = `${x}px`;\n    indicator.style.top = `${y - 50}px`;\n    indicator.style.transform = 'translateX(-50%)';\n    indicator.style.fontSize = '48px';\n    indicator.style.fontWeight = 'bold';\n    indicator.style.zIndex = '200';\n    indicator.style.pointerEvents = 'none';\n    indicator.style.animation = 'gradePopup 1s ease-out forwards';\n    \n    // Set grade text and color\n    switch (grade) {\n      case 'SSS':\n        indicator.textContent = 'SSS';\n        indicator.style.color = '#ff0080';\n        indicator.style.textShadow = '0 0 30px #ff0080, 0 0 60px #ff69b4';\n        indicator.style.fontSize = '56px';\n        indicator.style.animation = 'gradePopup 2s ease-out forwards, rainbow 2s infinite';\n        break;\n      case 'SS':\n        indicator.textContent = 'SS';\n        indicator.style.color = '#9932cc';\n        indicator.style.textShadow = '0 0 25px #9932cc, 0 0 50px #8b00ff';\n        indicator.style.fontSize = '52px';\n        indicator.style.animation = 'gradePopup 1.5s ease-out forwards, glow 1.5s infinite';\n        break;\n      case 'S':\n        indicator.textContent = 'S';\n        indicator.style.color = '#ff69b4';\n        indicator.style.textShadow = '0 0 20px #ff69b4';\n        indicator.style.fontSize = '48px';\n        break;\n      case 'A':\n        indicator.textContent = 'A';\n        indicator.style.color = '#ffd700';\n        indicator.style.textShadow = '0 0 20px #ffd700';\n        break;\n      case 'B':\n        indicator.textContent = 'B';\n        indicator.style.color = '#00ff7f';\n        indicator.style.textShadow = '0 0 15px #00ff7f';\n        break;\n      case 'C':\n        indicator.textContent = 'C';\n        indicator.style.color = '#888888';\n        indicator.style.textShadow = '0 0 10px #888888';\n        break;\n    }\n    \n    // Add animation style if not exists\n    if (!document.getElementById('grade-animation-style')) {\n      const style = document.createElement('style');\n      style.id = 'grade-animation-style';\n      style.textContent = `\n        @keyframes gradePopup {\n          0% {\n            opacity: 0;\n            transform: translateX(-50%) translateY(0) scale(0.5);\n          }\n          50% {\n            opacity: 1;\n            transform: translateX(-50%) translateY(-20px) scale(1.2);\n          }\n          100% {\n            opacity: 0;\n            transform: translateX(-50%) translateY(-40px) scale(1);\n          }\n        }\n        \n        @keyframes rainbow {\n          0% { color: #ff0000; }\n          16% { color: #ff8000; }\n          32% { color: #ffff00; }\n          48% { color: #00ff00; }\n          64% { color: #0080ff; }\n          80% { color: #8000ff; }\n          100% { color: #ff0080; }\n        }\n        \n        @keyframes glow {\n          0%, 100% { \n            text-shadow: 0 0 25px #9932cc, 0 0 50px #8b00ff;\n          }\n          50% { \n            text-shadow: 0 0 40px #9932cc, 0 0 80px #8b00ff, 0 0 120px #ff00ff;\n          }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    this.container?.appendChild(indicator);\n    \n    // Remove after animation\n    setTimeout(() => {\n      indicator.remove();\n    }, 1000);\n  }\n  \n  private flipPiecesWithEffects(positions: number[], grade?: Grade): void {\n    if (!this.gameState) return;\n    \n    const settings = this.getSettings();\n    \n    // Sequential flipping with delays for dynamic effect\n    positions.forEach((pos, index) => {\n      setTimeout(() => {\n        this.gameState!.board[pos] = this.gameState!.currentPlayer;\n        \n        const cell = document.querySelector(`[data-position=\"${pos}\"]`) as HTMLElement;\n        if (cell) {\n          // Create flip particle effect with grade-based colors\n          const rect = cell.getBoundingClientRect();\n          const containerRect = this.container!.getBoundingClientRect();\n          const x = rect.left + rect.width / 2 - containerRect.left;\n          const y = rect.top + rect.height / 2 - containerRect.top;\n          \n          const color = this.gameState!.currentPlayer === BLACK ? '#000000' : '#ffffff';\n          this.particleSystem.createFlipEffect(x, y, color, grade);\n          \n          const piece = cell.querySelector('.piece');\n          if (piece && settings.animations) {\n            piece.classList.add('flipping');\n            setTimeout(() => {\n              piece.className = `piece ${this.gameState!.currentPlayer === BLACK ? 'piece-black' : 'piece-white'}`;\n            }, 250);\n          } else if (piece) {\n            piece.className = `piece ${this.gameState!.currentPlayer === BLACK ? 'piece-black' : 'piece-white'}`;\n          }\n        }\n      }, index * 80); // 80ms delay between each flip for dynamic effect\n    });\n  }\n  \n  private flipPieces(positions: number[]): void {\n    if (!this.gameState) return;\n    \n    const settings = this.getSettings();\n    \n    positions.forEach(pos => {\n      this.gameState!.board[pos] = this.gameState!.currentPlayer;\n      \n      const cell = document.querySelector(`[data-position=\"${pos}\"]`) as HTMLElement;\n      if (cell) {\n        const piece = cell.querySelector('.piece');\n        if (piece && settings.animations) {\n          piece.classList.add('flipping');\n          setTimeout(() => {\n            piece.className = `piece ${this.gameState!.currentPlayer === BLACK ? 'piece-black' : 'piece-white'}`;\n          }, 250);\n        } else if (piece) {\n          piece.className = `piece ${this.gameState!.currentPlayer === BLACK ? 'piece-black' : 'piece-white'}`;\n        }\n      }\n    });\n  }\n  \n  private afterMove(): void {\n    if (!this.gameState) return;\n    \n    // Update scores\n    this.updateScores();\n    \n    // Switch player\n    this.gameState.currentPlayer = this.gameState.currentPlayer === BLACK ? WHITE : BLACK;\n    \n    // Update valid moves for new player\n    this.updateValidMoves();\n    \n    // Check for game over or pass\n    if (!this.checkGameStatus()) {\n      // Update display\n      this.updateDisplay();\n      \n      // If it's AI's turn, make AI move\n      if (this.gameState.gameMode === 'pvc' && this.gameState.currentPlayer === WHITE) {\n        this.makeAIMove();\n      }\n    }\n    \n    this.isProcessingMove = false;\n  }\n  \n  private updateValidMoves(): void {\n    if (!this.gameState) return;\n    \n    this.gameState.validMoves.clear();\n    \n    for (let i = 0; i < 64; i++) {\n      if (this.gameState.board[i] === EMPTY) {\n        if (this.isValidMove(i, this.gameState.currentPlayer)) {\n          this.gameState.validMoves.add(i);\n        }\n      }\n    }\n  }\n  \n  private isValidMove(position: number, player: number): boolean {\n    if (!this.gameState || this.gameState.board[position] !== EMPTY) {\n      return false;\n    }\n    \n    // Check all directions\n    for (const [dx, dy] of DIRECTIONS) {\n      if (this.checkDirection(position, player, dx || 0, dy || 0).length > 0) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n  private checkDirection(position: number, player: number, dx: number, dy: number): number[] {\n    if (!this.gameState) return [];\n    \n    const flipped: number[] = [];\n    const row = Math.floor(position / 8);\n    const col = position % 8;\n    const opponent = player === BLACK ? WHITE : BLACK;\n    \n    let r = row + dy;\n    let c = col + dx;\n    \n    // Find opponent pieces\n    while (r >= 0 && r < 8 && c >= 0 && c < 8) {\n      const pos = r * 8 + c;\n      \n      if (this.gameState.board[pos] === EMPTY) {\n        return []; // Empty cell, no valid line\n      } else if (this.gameState.board[pos] === opponent) {\n        flipped.push(pos);\n      } else {\n        // Found our piece\n        return flipped.length > 0 ? flipped : [];\n      }\n      \n      r += dy;\n      c += dx;\n    }\n    \n    return []; // Hit edge without finding our piece\n  }\n  \n  private getFlippedPieces(position: number, player: number): number[] {\n    const allFlipped: number[] = [];\n    \n    for (const [dx, dy] of DIRECTIONS) {\n      const flipped = this.checkDirection(position, player, dx, dy);\n      allFlipped.push(...flipped);\n    }\n    \n    return allFlipped;\n  }\n  \n  private updateScores(): void {\n    if (!this.gameState) return;\n    \n    let black = 0;\n    let white = 0;\n    \n    for (const piece of this.gameState.board) {\n      if (piece === BLACK) black++;\n      else if (piece === WHITE) white++;\n    }\n    \n    this.gameState.blackScore = black;\n    this.gameState.whiteScore = white;\n  }\n  \n  private checkGameStatus(): boolean {\n    if (!this.gameState) return false;\n    \n    // No valid moves for current player\n    if (this.gameState.validMoves.size === 0) {\n      // Switch to other player\n      this.gameState.currentPlayer = this.gameState.currentPlayer === BLACK ? WHITE : BLACK;\n      this.updateValidMoves();\n      \n      // Other player also has no moves - game over\n      if (this.gameState.validMoves.size === 0) {\n        this.gameOver();\n        return true;\n      } else {\n        // Pass turn\n        const settings = this.getSettings();\n        if (settings.autoPass) {\n          const color = this.gameState.currentPlayer === BLACK ? 'Black' : 'White';\n          this.showMessage(`No valid moves - passing to ${color}`);\n        }\n      }\n    }\n    \n    return false;\n  }\n  \n  private gameOver(): void {\n    if (!this.gameState) return;\n    \n    this.gameState.isGameOver = true;\n    \n    let winner: string;\n    let winnerColor: string;\n    \n    if (this.gameState.blackScore > this.gameState.whiteScore) {\n      winner = 'Black Wins!';\n      winnerColor = '#000';\n    } else if (this.gameState.whiteScore > this.gameState.blackScore) {\n      winner = 'White Wins!';\n      winnerColor = '#fff';\n    } else {\n      winner = \"It's a Tie!\";\n      winnerColor = '#ffd700';\n    }\n    \n    const modal = document.getElementById('game-over-modal');\n    if (modal) {\n      modal.style.display = 'block';\n      modal.className = 'game-over-modal';\n      modal.innerHTML = `\n        <h2 class=\"game-over-title\">🏆 Game Over!</h2>\n        <div class=\"final-scores\">\n          <p style=\"font-size: 36px; color: ${winnerColor}; margin: 20px 0;\">\n            ${winner}\n          </p>\n          <p>⚫ Black: ${this.gameState.blackScore}</p>\n          <p>⚪ White: ${this.gameState.whiteScore}</p>\n          <p style=\"margin-top: 20px; font-size: 18px;\">\n            Total moves: ${this.gameState.moveHistory.length}\n          </p>\n        </div>\n        <div class=\"modal-buttons\">\n          <button class=\"menu-button\" id=\"play-again\">Play Again</button>\n          <button class=\"menu-button\" id=\"main-menu\">Main Menu</button>\n        </div>\n      `;\n      \n      document.getElementById('play-again')?.addEventListener('click', () => {\n        modal.style.display = 'none';\n        this.startNewGame(this.gameState!.gameMode, this.gameState!.aiDifficulty);\n      });\n      \n      document.getElementById('main-menu')?.addEventListener('click', () => {\n        modal.style.display = 'none';\n        this.showMenu();\n      });\n    }\n  }\n  \n  private updateDisplay(): void {\n    if (!this.gameState) return;\n    \n    // Update scores\n    document.getElementById('black-score')!.textContent = `⚫ Black: ${this.gameState.blackScore}`;\n    document.getElementById('white-score')!.textContent = `⚪ White: ${this.gameState.whiteScore}`;\n    \n    // Update current turn\n    const currentColor = this.gameState.currentPlayer === BLACK ? 'Black' : 'White';\n    document.getElementById('current-turn')!.innerHTML = `Current: <span style=\"color: ${this.gameState.currentPlayer === BLACK ? '#000' : '#fff'};\">${currentColor}</span>`;\n    \n    const turnIndicator = document.getElementById('turn-indicator');\n    if (turnIndicator) {\n      const color = this.gameState.currentPlayer === BLACK ? '#000' : '#fff';\n      turnIndicator.innerHTML = `Current Turn: <span style=\"color: ${color}; font-weight: bold;\">${currentColor}</span>`;\n    }\n    \n    // Render board\n    this.renderBoard();\n  }\n  \n  private showMessage(message: string): void {\n    const aiStatus = document.getElementById('ai-status');\n    if (aiStatus) {\n      aiStatus.textContent = message;\n      setTimeout(() => {\n        aiStatus.textContent = '';\n      }, 2000);\n    }\n  }\n  \n  private triggerScreenShake(grade: Grade): void {\n    if (!this.container) return;\n    \n    const settings = this.getSettings();\n    if (!settings.animations) return; // Skip if animations disabled\n    \n    let intensity = 0;\n    let duration = 0;\n    \n    switch (grade) {\n      case 'SSS':\n        intensity = 20;\n        duration = 1200;\n        console.log('🌍 REALITY SHAKE - LEGENDARY!!!');\n        break;\n      case 'SS':\n        intensity = 16;\n        duration = 1000;\n        console.log('🌪️ WORLD SHAKE - MYTHICAL!!');\n        break;\n      case 'S':\n        intensity = 12;\n        duration = 800;\n        console.log('💥 SCREEN SHAKE - EPIC!');\n        break;\n      case 'A':\n        intensity = 6;\n        duration = 500;\n        console.log('📳 Screen shake - Great!');\n        break;\n      case 'B':\n        intensity = 3;\n        duration = 300;\n        console.log('📱 Screen shake - Good!');\n        break;\n      case 'C':\n        // No shake for C grade\n        return;\n    }\n    \n    // Apply shake animation\n    const app = this.container.querySelector('.super-reversi-app') as HTMLElement;\n    if (app) {\n      app.style.animation = `shake ${duration}ms ease-in-out`;\n      \n      // Add shake keyframes if not exists\n      if (!document.getElementById('shake-animation')) {\n        const style = document.createElement('style');\n        style.id = 'shake-animation';\n        style.textContent = `\n          @keyframes shake {\n            0%, 100% { transform: translate(0, 0) rotate(0deg); }\n            10% { transform: translate(-${intensity}px, -${intensity/2}px) rotate(-1deg); }\n            20% { transform: translate(${intensity}px, -${intensity}px) rotate(1deg); }\n            30% { transform: translate(-${intensity}px, ${intensity/2}px) rotate(0deg); }\n            40% { transform: translate(${intensity}px, ${intensity}px) rotate(1deg); }\n            50% { transform: translate(-${intensity/2}px, -${intensity}px) rotate(-1deg); }\n            60% { transform: translate(${intensity/2}px, ${intensity}px) rotate(0deg); }\n            70% { transform: translate(-${intensity/2}px, ${intensity/2}px) rotate(-1deg); }\n            80% { transform: translate(${intensity/2}px, -${intensity/2}px) rotate(1deg); }\n            90% { transform: translate(-${intensity/4}px, ${intensity/4}px) rotate(0deg); }\n          }\n        `;\n        document.head.appendChild(style);\n      }\n      \n      // Remove animation after completion\n      setTimeout(() => {\n        app.style.animation = '';\n      }, duration);\n    }\n  }\n  \n  // ===== AI LOGIC =====\n  \n  private makeAIMove(): void {\n    if (!this.gameState || this.gameState.validMoves.size === 0) return;\n    \n    this.aiThinking = true;\n    const aiStatus = document.getElementById('ai-status');\n    if (aiStatus) {\n      aiStatus.innerHTML = '<span class=\"ai-thinking\">AI is thinking...</span>';\n    }\n    \n    // Simulate thinking time\n    setTimeout(() => {\n      const move = this.selectAIMove();\n      if (move !== -1) {\n        this.makeMove(move);\n      }\n      \n      if (aiStatus) {\n        aiStatus.textContent = '';\n      }\n      this.aiThinking = false;\n    }, 800);\n  }\n  \n  private selectAIMove(): number {\n    if (!this.gameState) return -1;\n    \n    const moves = Array.from(this.gameState.validMoves);\n    if (moves.length === 0) return -1;\n    \n    switch (this.gameState.aiDifficulty) {\n      case 'easy':\n        return this.selectRandomMove(moves);\n      \n      case 'medium':\n        return this.selectGreedyMove(moves);\n      \n      case 'hard':\n        return this.selectStrategicMove(moves);\n      \n      default:\n        return moves[0] ?? 0;\n    }\n  }\n  \n  private selectRandomMove(moves: number[]): number {\n    return moves[Math.floor(Math.random() * moves.length)] ?? 0;\n  }\n  \n  private selectGreedyMove(moves: number[]): number {\n    if (!this.gameState) return moves[0] ?? 0;\n    \n    let bestMove = moves[0] ?? 0;\n    let maxFlips = 0;\n    \n    for (const move of moves) {\n      const flips = this.getFlippedPieces(move, WHITE).length;\n      if (flips > maxFlips) {\n        maxFlips = flips;\n        bestMove = move;\n      }\n    }\n    \n    return bestMove;\n  }\n  \n  private selectStrategicMove(moves: number[]): number {\n    if (!this.gameState) return moves[0] ?? 0;\n    \n    // Position weights for strategic play\n    const weights = [\n      120, -20,  20,   5,   5,  20, -20, 120,\n      -20, -40,  -5,  -5,  -5,  -5, -40, -20,\n       20,  -5,  15,   3,   3,  15,  -5,  20,\n        5,  -5,   3,   3,   3,   3,  -5,   5,\n        5,  -5,   3,   3,   3,   3,  -5,   5,\n       20,  -5,  15,   3,   3,  15,  -5,  20,\n      -20, -40,  -5,  -5,  -5,  -5, -40, -20,\n      120, -20,  20,   5,   5,  20, -20, 120\n    ];\n    \n    let bestMove = moves[0] ?? 0;\n    let bestScore = -1000;\n    \n    for (const move of moves) {\n      const flips = this.getFlippedPieces(move, WHITE).length;\n      const positionScore = weights[move] ?? 0;\n      const totalScore = positionScore + flips * 10;\n      \n      if (totalScore > bestScore) {\n        bestScore = totalScore;\n        bestMove = move;\n      }\n    }\n    \n    return bestMove;\n  }\n  \n  // Helper functions for special effects detection\n  private isEdgePosition(position: number): boolean {\n    const row = Math.floor(position / 8);\n    const col = position % 8;\n    return (row === 0 || row === 7 || col === 0 || col === 7) && \n           !(position === 0 || position === 7 || position === 56 || position === 63);\n  }\n  \n  private isChainMove(flippedPositions: number[]): boolean {\n    if (!this.gameState || this.gameState.moveHistory.length === 0) return false;\n    \n    // Check if this move flips pieces that were recently placed/flipped\n    const lastMove = this.gameState.moveHistory[this.gameState.moveHistory.length - 1];\n    \n    // If last move flipped a lot and this move also flips a lot, it's likely a chain\n    return (lastMove as any)?.flipped?.length >= 3 && flippedPositions.length >= 3;\n  }\n  \n  private isComebackMove(): boolean {\n    if (!this.gameState) return false;\n    \n    const scoreDiff = this.gameState.currentPlayer === BLACK ? \n      this.gameState.blackScore - this.gameState.whiteScore :\n      this.gameState.whiteScore - this.gameState.blackScore;\n    \n    // Comeback if currently losing by 5+ pieces\n    return scoreDiff <= -5;\n  }\n  \n  private isDominationMove(): boolean {\n    if (!this.gameState) return false;\n    \n    const scoreDiff = this.gameState.currentPlayer === BLACK ? \n      this.gameState.blackScore - this.gameState.whiteScore :\n      this.gameState.whiteScore - this.gameState.blackScore;\n    \n    // Domination if currently winning by 10+ pieces\n    return scoreDiff >= 10;\n  }\n}\n\n// Initialize application\ndocument.addEventListener('DOMContentLoaded', async () => {\n  console.log('DOM loaded - initializing Super Reversi');\n  const container = document.getElementById('game-container');\n  \n  if (container) {\n    try {\n      const game = new SuperReversiGame();\n      await game.initialize(container);\n      \n      // Store globally for debugging\n      (window as any).superReversiGame = game;\n      \n      console.log('🎮 Game ready to play!');\n    } catch (error) {\n      console.error('Failed to initialize:', error);\n      container.innerHTML = `\n        <div style=\"padding: 20px; color: red;\">\n          <h2>Error Loading Game</h2>\n          <p>${error}</p>\n        </div>\n      `;\n    }\n  } else {\n    console.error('Container not found!');\n  }\n});\n\nexport default SuperReversiGame;"],"names":["ParticleSystem","ctx","container","rect","animate","time","deltaTime","i","p","outerRadius","innerRadius","radius","angle","x","y","flippedCount","position","specialEffects","isCorner","row","col","isEdge","score","grade","goldColors","wave","j","speed","wobble","vortex","vortexX","rift","redColors","spiral","purpleColors","blueColors","directions","dx","dy","ring","distance","greenColors","grayColors","color","isBlack","gradeColors","intensity","primaryColor","accentColors","burstCount","ringCount","particlesPerRing","castleColors","wall","brick","phoenixColors","waveColors","particle","royalColors","jewel","lightningColors","bolt","segment","EMPTY","BLACK","WHITE","DIRECTIONS","SuperReversiGame","style","screenContainer","header","selectedDifficulty","diffButtons","diffDesc","descriptions","btn","b","settings","mode","aiDifficulty","board","modeText","cell","lastMove","piece","stored","toFlip","containerRect","flipDuration","indicator","positions","pos","index","player","flipped","opponent","r","c","allFlipped","black","white","winner","winnerColor","modal","currentColor","turnIndicator","message","aiStatus","duration","app","move","moves","bestMove","maxFlips","flips","weights","bestScore","totalScore","flippedPositions","game","error"],"mappings":"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"}