{"version":3,"mappings":"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","names":["PARTICLE_PRESETS","getPresetForGrade","grade","blendPresets","preset1","preset2","ratio","config1","config2","LotusePetal","config","deltaTime","ctx","alpha","gradient","GreenSwordBeam","GreenLotusEffect","x","y","targetPositions","petal","sword","i","angle","target","variation","SimplifiedTourbillon","baseRadius","rotation","radius","outerGradient","midGradient","ring","ringRadius","teethCount","time","outerBalanceGradient","innerBalanceGradient","weightX","weightY","centerGradient","UnlimitedBladeWorksEffect","THUNDER_THEME","ElectricSpark","k","ShockwaveRing","progress","FractalLightningGenerator","start","end","depth","displacement","branchProbability","points","d","a","b","midX","midY","dx","dy","length","perpX","perpY","offset","branches","point","nextPoint","dirX","dirY","branchEnd","bolt","baseWidth","branch","firstPoint","ThunderBlade","targetY","effectiveAlpha","topY","bottomY","gradient1","radialGradient","DivineSwordThunderEffect","anyBladeArrived","blade","spark","wave","count","targetBlade","startX","startY","fadeInTime","fadeOutTime","shakeX","shakeY","NineFinaleEffect","canvas","targetIndex","meteorsPerTarget","m","spawnAngle","spawnDistance","sx","sy","distance","gravity","speed","gravityCompensation","adjustedVy","sparkCount","meteor","targetDx","targetDy","targetDistance","homingVx","homingVy","indicator","age","fadeIn","fadeOut","current","next","width","life","pulse","size","IceSpearEffect","glowGradient","spearsPerTarget","totalDistance","extraSpears","randomTarget","spear","distanceToTarget","shard","scale","FlySword","prev","curr","trailAlpha","ParticleSystem","container","rect","enabled","animate","p","effect","outerRadius","innerRadius","flippedCount","position","specialEffects","isCorner","row","col","isEdge","score","flippedPositions","presetType","preset","flipDirections","intensityMultiplier","particleCount","sourceX","sourceY","_","pos","targets","delay","actualCount","spawnRadius","spawnX","spawnY","index","total","colors","color","directionIndex","direction","baseAngle","spreadAngle","spreadRadius","goldenSwordConfig","swordTargets","swordCount","flameSwordConfig","purpleColors","j","wobble","frostSwordConfig","blueColors","flipDir","spread","finalAngle","directions","greenColors","greenLotus","ubwEffect","thunderEffect","finaleEffect","iceSpearEffect","grayColors","isBlack","gradeColors","intensity","primaryColor","accentColors","burstCount","ringCount","particlesPerRing","castleColors","wall","brick","phoenixColors","waveColors","particle","royalColors","jewel","lightningColors","segment","textElement","currentLanguage","translations","enTranslations","zhHantTranslations","zhHansTranslations","t","key","params","translation","_match","setLanguage","lang","applyTranslations","root","el","COMBO_LEVELS","ComboSystem","player","opponentCanMove","moveScore","event","reason","baseEffect","intensityBonus","combos","e","totalCombos","averageLength","sum","combo","distribution","comboType","handler","text","SPECIAL_MOVE_CONDITIONS","SpecialMoveDetector","playerScore","opponentScore","moveNumber","totalMoves","triggeredMoves","flipCount","scoreDiff","moveType","condition","min","max","type","timing","special","context","directionCount","dr","dc","found","r","c","BOARD_SIZE","TOTAL_SQUARES","PlayerColor","GameStatus","Grade","AIDifficulty","POSITION_VALUES","GRADE_THRESHOLDS","PERFORMANCE_TARGETS","isValidPosition","positionToCoords","coords","isXSquare","AIStrategyBase","gameState","timeLimit","startTime","targetTime","result","actualThinkingTime","actualTime","movesPlayed","totalThinkingTime","totalNodes","nodes","totalDepth","timeRatio","baseAccuracy","AIUtils","baseScore","jitterAmount","jitter","candidates","temperature","scaledCandidates","candidate","totalWeight","randomValue","cumulativeWeight","stability","friendlyNeighbors","neighbors","newRow","newCol","_player","RandomAI","_timeLimit","validMoves","thinkingDelay","resolve","randomIndex","selectedPosition","evaluation","SmartRandomAI","cornerMoves","safeEdgeMoves","xSquareMoves","normalMoves","candidateMoves","confidence","createRandomAI","validateMove","board","calculateFlips","allFlips","opponent","startCoords","flipsInDirection","calculateFlipsInDirection","flips","currentRow","currentCol","currentPosition","currentPiece","getValidMoves","applyMove","newBoard","flipPosition","isCornerMove","isEdgeMove","isXSquareMove","isCSquareMove","calculateMobility","validation","playerMoves","opponentMoves","calculateStability","protectedDirections","dir","neighborPos","evaluateMove","breakdown","calculateScoreBreakdown","calculateGrade","positionValue","calculatePositionValue","stabilityBonus","calculateStabilityBonus","mobilityFactor","calculateMobilityFactor","placedStability","flippedPos","flippedStability","mobility","evaluateAllMoves","evaluatedMoves","getBestMove","bestMove","move","GreedyAI","remainingTime","sortedMoves","scoreGap","EnhancedGreedyAI","enhancedMoves","threshold","topCandidates","selectedMove","gamePhase","AdaptiveGreedyAI","strategy","strategicMoves","selectionTemperature","topMoves","myScore","scoreDifference","_gameState","moveCount","baseTime","createGreedyAI","EVALUATION_WEIGHTS","ADVANCED_POSITION_VALUES","STABILITY_VALUES","AdvancedEvaluator","cornerControl","edgeControl","potentialMobility","parity","material","piece","playerMobility","opponentMobility","playerStability","opponentStability","stabilityValue","stableDirections","pos1","pos2","corners","playerCorners","opponentCorners","corner","playerEdges","opponentEdges","playerPotential","opponentPotential","adjacentToPlayer","adjacentToOpponent","adjacent","emptySquares","playerPieces","opponentPieces","endgameWeight","quickEvaluate","GameSimulator","gameOver","state","nextPlayer","newScores","nextValidMoves","newConsecutivePasses","afterPassPlayer","afterPassMoves","black","white","moves","newState","occupiedSquares","state1","state2","empty","calculatedScores","MinimaxAI","effectiveTimeLimit","searchResult","bestResult","lastScore","aspirationAlpha","aspirationBeta","widerResult","beta","isMaximizing","originalPlayer","ttEntry","simState","evalState","bestScore","newGameState","bonus","historyKey","historyScore","item","killers","entry","flag","cutoff","createMinimaxAI","OpeningBook","maxDepth","entries","validEntries","best","bestValue","name","seq","boardString","cell","pieceCount","totalPositions","totalWinRate","entryCount","errors","positions","sequence","defaultOpeningBook","EndgameSolver","timeElapsed","ttResult","nextState","currentPlayerAdvantage","scoredMoves","nodesPerSecond","defaultEndgameSolver","AdvancedAI","minimaxConfig","phase","adaptiveTimeLimit","openingMove","thinkingTime","endgameResult","deepMinimaxConfig","totalPieces","baseTimeLimit","complexity","timeMultiplier","adaptiveTime","availableCorners","opening","midgame","endgame","totalTime","createAdvancedAI","userAgent","isMobileUA","keyword","isSmallScreen","hasTouchSupport","AIStrategyManager","options","strategies","s","difficulty","strategyName","defaultStrategy","request","error","customSettings","reject","timeoutId","hasResolved","cleanup","safeResolve","safeReject","requestId","maxTimeout","payload","id","fallbackDifficulty","maxProcessingTime","fn","lastYield","originalSetTimeout","callback","now","metrics","history","h","totalTimeouts","totalAccuracy","defaultAIManager","EMPTY","BLACK","WHITE","DIRECTIONS","SuperReversiGame","comboEvent","settings","headerBackBtn","confirmed","centerX","centerY","aiStatus","countElement","multiplierElement","currentScore","specialMoves","title","titleElement","subtitleElement","subtitle","style","screenContainer","header","sharedHealthBarContainer","blackScore","whiteScore","currentTurn","__vitePreload","AI_OPTIONS_DATABASE","getDefaultAIForLevel","aiDatabase","currentLevel","levelTabs","tab","defaultAI","level","optionsGrid","aiOptions","option","feature","optionCards","card","aiId","aiOption","opt","nameEl","strengthEl","descEl","thinkingTimeEl","searchDepthEl","featuresEl","strength","show","customPanel","thinkingTimeSlider","thinkingTimeValue","searchDepthSlider","searchDepthValue","input","searchDepth","useOpeningBook","useEndgameSolver","personality","mode","aiDifficulty","modeText","mobilityMap","mobilityIndicator","difference","lastMove","stored","toFlip","containerRect","flippedPixelPositions","flippedCell","flippedRect","flipDuration","previousPlayer","flipped","allFlipped","tempBoard","flippedPieces","oldBlackScore","oldWhiteScore","winner","winnerColor","modal","oldValue","newValue","change","sharedHealthBar","damageContainer","playerSection","damageElement","playerRect","blackFill","whiteFill","blackCount","whiteCount","turnIndicator","blackPercentage","whitePercentage","currentPlayerName","blackFillElement","whiteFillElement","vsDivider","currentColor","message","duration","app","isMobile","isHighDifficulty","thinkingText","additionalInfo","warningTimer","emergencyTimer","coreGameState","aiStartTime","warningTimeThreshold","maxTimeThreshold","randomMove","nodesEvaluated","wasSlowOnMobile","wasSlowOnDesktop","performanceWarning","errorMsg","errorMessage","suggestion","mobileConfig","modalTitle","modalMessage","confirmBtn","cancelBtn","handleConfirm","handleCancel","game"],"ignoreList":[],"sources":["../../src/effects/particle-presets.ts","../../src/effects/green-lotus-effect.ts","../../src/effects/unlimited-blade-works.ts","../../src/effects/divine-sword-thunder.ts","../../src/effects/nine-finale-effect.ts","../../src/effects/ice-spear-effect.ts","../../src/particle-system.ts","../../src/i18n/index.ts","../../src/effects/combo-system.ts","../../src/effects/special-moves.ts","../../src/types/game-types.ts","../../src/core/ai/ai-strategy-base.ts","../../src/core/ai/strategies/random-ai.ts","../../src/core/utils/board-utils.ts","../../src/core/utils/move-validator.ts","../../src/core/utils/move-evaluator.ts","../../src/core/ai/strategies/greedy-ai.ts","../../src/core/ai/strategies/evaluation.ts","../../src/core/ai/game-simulator.ts","../../src/core/ai/strategies/minimax-ai.ts","../../src/core/ai/strategies/opening-book.ts","../../src/core/ai/strategies/endgame-solver.ts","../../src/core/ai/strategies/advanced-ai.ts","../../src/core/ai/ai-strategy-manager.ts","../../src/main-complete.ts"],"sourcesContent":["/**\r\n * 粒子效果預設庫\r\n * 提供多種視覺特效預設配置：雪花、火焰、閃電、黑洞等\r\n */\r\n\r\nexport type ParticlePresetType = 'snowflake' | 'fire' | 'lightning' | 'blackhole' | 'explosion' | 'magic' | 'storm' | 'supernova' | 'cosmic_burst' | 'green_lotus' | 'unlimited_blade_works' | 'divine_thunder' | 'nine_finale';\r\n\r\nexport interface ParticlePresetConfig {\r\n  type: ParticlePresetType;\r\n  colors: string[];\r\n  behavior: ParticleBehavior;\r\n  physics: ParticlePhysics;\r\n  visual: ParticleVisual;\r\n  animation: ParticleAnimation;\r\n  spawning: ParticleSpawning;\r\n}\r\n\r\nexport interface ParticleBehavior {\r\n  movement: 'float' | 'rise' | 'fall' | 'spiral' | 'chain' | 'implode' | 'explode';\r\n  gravity: number;\r\n  drag: number;\r\n  turbulence: number;\r\n}\r\n\r\nexport interface ParticlePhysics {\r\n  velocity: { min: number; max: number };\r\n  acceleration: { x: number; y: number };\r\n  mass: number;\r\n  elasticity: number;\r\n}\r\n\r\nexport interface ParticleVisual {\r\n  size: { min: number; max: number };\r\n  opacity: { start: number; end: number };\r\n  scale: { start: number; end: number };\r\n  rotation: { enabled: boolean; speed: number };\r\n  glow: { enabled: boolean; intensity: number };\r\n}\r\n\r\nexport interface ParticleAnimation {\r\n  lifespan: { min: number; max: number };\r\n  fadeIn: number;\r\n  fadeOut: number;\r\n  pulsing: { enabled: boolean; frequency: number };\r\n}\r\n\r\nexport interface ParticleSpawning {\r\n  count: { min: number; max: number };\r\n  delay: { min: number; max: number };\r\n  spread: { angle: number; radius: number };\r\n  burst: boolean;\r\n}\r\n\r\n/**\r\n * 預設效果配置\r\n */\r\nexport const PARTICLE_PRESETS: Record<ParticlePresetType, ParticlePresetConfig> = {\r\n  /**\r\n   * ❄️ 雪花效果 - 優雅飄落 (C級基礎效果)\r\n   */\r\n  snowflake: {\r\n    type: 'snowflake',\r\n    colors: ['#ffffff', '#e6f3ff', '#cce7ff', '#b3d9ff', '#f0f8ff'],\r\n    behavior: {\r\n      movement: 'float',\r\n      gravity: 30,\r\n      drag: 0.95,\r\n      turbulence: 0.3,\r\n    },\r\n    physics: {\r\n      velocity: { min: 20, max: 60 },\r\n      acceleration: { x: 0, y: 30 },\r\n      mass: 0.5,\r\n      elasticity: 0.1,\r\n    },\r\n    visual: {\r\n      size: { min: 1, max: 3 },  // C級基礎尺寸\r\n      opacity: { start: 0.6, end: 0.1 },\r\n      scale: { start: 0.8, end: 0.2 },\r\n      rotation: { enabled: true, speed: 0.02 },\r\n      glow: { enabled: false, intensity: 0 },\r\n    },\r\n    animation: {\r\n      lifespan: { min: 800, max: 1200 },  // 縮短生命週期\r\n      fadeIn: 100,\r\n      fadeOut: 400,\r\n      pulsing: { enabled: false, frequency: 0 },\r\n    },\r\n    spawning: {\r\n      count: { min: 30, max: 60 },  // C級: 30-60\r\n      delay: { min: 0, max: 50 },\r\n      spread: { angle: Math.PI * 0.2, radius: 40 },\r\n      burst: false,\r\n    },\r\n  },\r\n\r\n  /**\r\n   * 🔥 火焰效果 - 熾熱燃燒 (S級效果)\r\n   */\r\n  fire: {\r\n    type: 'fire',\r\n    colors: ['#dda0dd', '#e6b8ea', '#d8bfd8', '#9932cc', '#ba55d3'],\r\n    behavior: {\r\n      movement: 'rise',\r\n      gravity: -100,\r\n      drag: 0.92,\r\n      turbulence: 0.8,\r\n    },\r\n    physics: {\r\n      velocity: { min: 80, max: 200 },\r\n      acceleration: { x: 0, y: -150 },\r\n      mass: 0.3,\r\n      elasticity: 0,\r\n    },\r\n    visual: {\r\n      size: { min: 5, max: 12 },  // S級特大型尺寸\r\n      opacity: { start: 0.9, end: 0.0 },\r\n      scale: { start: 0.5, end: 1.6 },\r\n      rotation: { enabled: false, speed: 0 },\r\n      glow: { enabled: true, intensity: 1.2 },\r\n    },\r\n    animation: {\r\n      lifespan: { min: 800, max: 1500 },\r\n      fadeIn: 50,\r\n      fadeOut: 600,\r\n      pulsing: { enabled: true, frequency: 0.1 },\r\n    },\r\n    spawning: {\r\n      count: { min: 140, max: 170 },  // S級: 140-170\r\n      delay: { min: 0, max: 150 },\r\n      spread: { angle: Math.PI * 0.4, radius: 40 },\r\n      burst: true,\r\n    },\r\n  },\r\n\r\n  /**\r\n   * ⚡ 閃電效果 - 電光鏈鎖 (SS級效果)\r\n   */\r\n  lightning: {\r\n    type: 'lightning',\r\n    colors: ['#ffff00', '#ffffff', '#00ffff', '#87ceeb', '#e0ffff'],\r\n    behavior: {\r\n      movement: 'chain',\r\n      gravity: 0,\r\n      drag: 0.99,\r\n      turbulence: 1.5,\r\n    },\r\n    physics: {\r\n      velocity: { min: 300, max: 600 },\r\n      acceleration: { x: 0, y: 0 },\r\n      mass: 0.1,\r\n      elasticity: 0,\r\n    },\r\n    visual: {\r\n      size: { min: 8, max: 16 },  // SS級超大型尺寸\r\n      opacity: { start: 1.0, end: 0.0 },\r\n      scale: { start: 1.0, end: 1.0 },\r\n      rotation: { enabled: false, speed: 0 },\r\n      glow: { enabled: true, intensity: 2.0 },\r\n    },\r\n    animation: {\r\n      lifespan: { min: 100, max: 300 },\r\n      fadeIn: 0,\r\n      fadeOut: 150,\r\n      pulsing: { enabled: true, frequency: 0.5 },\r\n    },\r\n    spawning: {\r\n      count: { min: 180, max: 210 },  // SS級: 180-210\r\n      delay: { min: 0, max: 50 },\r\n      spread: { angle: Math.PI * 2, radius: 0 },\r\n      burst: true,\r\n    },\r\n  },\r\n\r\n  /**\r\n   * 🌀 黑洞效果 - 螺旋吞噬 (SSS級傳說效果)\r\n   */\r\n  blackhole: {\r\n    type: 'blackhole',\r\n    colors: ['#000000', '#4b0082', '#9400d3', '#8b00ff', '#1a1a1a'],\r\n    behavior: {\r\n      movement: 'implode',\r\n      gravity: 800,\r\n      drag: 1.02, // 反向阻力，加速內吸\r\n      turbulence: 0.1,\r\n    },\r\n    physics: {\r\n      velocity: { min: 100, max: 300 },\r\n      acceleration: { x: 0, y: 0 },\r\n      mass: 1.0,\r\n      elasticity: 0,\r\n    },\r\n    visual: {\r\n      size: { min: 12, max: 20 },  // SSS級傳說尺寸\r\n      opacity: { start: 0.8, end: 1.0 },\r\n      scale: { start: 1.5, end: 0.1 },\r\n      rotation: { enabled: true, speed: 0.15 },\r\n      glow: { enabled: true, intensity: 2.5 },\r\n    },\r\n    animation: {\r\n      lifespan: { min: 1500, max: 2500 },\r\n      fadeIn: 100,\r\n      fadeOut: 500,\r\n      pulsing: { enabled: false, frequency: 0 },\r\n    },\r\n    spawning: {\r\n      count: { min: 220, max: 300 },  // SSS級: 220-300\r\n      delay: { min: 0, max: 300 },\r\n      spread: { angle: Math.PI * 2, radius: 120 },\r\n      burst: false,\r\n    },\r\n  },\r\n\r\n  /**\r\n   * 💥 爆炸效果 - 劇烈衝擊 (A級效果)\r\n   */\r\n  explosion: {\r\n    type: 'explosion',\r\n    colors: ['#87ceeb', '#add8e6', '#b0e0e6', '#87cefa', '#00bfff'],\r\n    behavior: {\r\n      movement: 'explode',\r\n      gravity: 50,\r\n      drag: 0.88,\r\n      turbulence: 0.6,\r\n    },\r\n    physics: {\r\n      velocity: { min: 150, max: 300 },  // 降低速度\r\n      acceleration: { x: 0, y: 100 },\r\n      mass: 0.8,\r\n      elasticity: 0.3,\r\n    },\r\n    visual: {\r\n      size: { min: 3, max: 8 },  // A級大型尺寸\r\n      opacity: { start: 0.9, end: 0.0 },\r\n      scale: { start: 0.3, end: 1.2 },\r\n      rotation: { enabled: true, speed: 0.1 },\r\n      glow: { enabled: true, intensity: 1.0 },\r\n    },\r\n    animation: {\r\n      lifespan: { min: 500, max: 1000 },  // 縮短生命週期\r\n      fadeIn: 20,\r\n      fadeOut: 300,\r\n      pulsing: { enabled: false, frequency: 0 },\r\n    },\r\n    spawning: {\r\n      count: { min: 110, max: 130 },  // A級: 110-130\r\n      delay: { min: 0, max: 30 },\r\n      spread: { angle: Math.PI * 2, radius: 0 },\r\n      burst: true,\r\n    },\r\n  },\r\n\r\n  /**\r\n   * ✨ 魔法效果 - 神秘光芒 (B級效果)\r\n   */\r\n  magic: {\r\n    type: 'magic',\r\n    colors: ['#90ee90', '#98fb98', '#b4ffb4', '#7fff00', '#adff2f'],\r\n    behavior: {\r\n      movement: 'float',\r\n      gravity: -20,\r\n      drag: 0.98,\r\n      turbulence: 0.4,\r\n    },\r\n    physics: {\r\n      velocity: { min: 30, max: 120 },\r\n      acceleration: { x: 0, y: -50 },\r\n      mass: 0.2,\r\n      elasticity: 0.8,\r\n    },\r\n    visual: {\r\n      size: { min: 2, max: 5 },  // B級中型尺寸\r\n      opacity: { start: 0.7, end: 0.1 },\r\n      scale: { start: 0.6, end: 1.0 },\r\n      rotation: { enabled: true, speed: 0.05 },\r\n      glow: { enabled: true, intensity: 0.6 },\r\n    },\r\n    animation: {\r\n      lifespan: { min: 1000, max: 1500 },  // 縮短生命週期\r\n      fadeIn: 200,\r\n      fadeOut: 400,\r\n      pulsing: { enabled: true, frequency: 0.08 },\r\n    },\r\n    spawning: {\r\n      count: { min: 70, max: 100 },  // B級: 70-100\r\n      delay: { min: 0, max: 100 },\r\n      spread: { angle: Math.PI * 0.4, radius: 50 },\r\n      burst: false,\r\n    },\r\n  },\r\n\r\n  /**\r\n   * 🌪️ 風暴效果 - 狂亂旋渦\r\n   */\r\n  storm: {\r\n    type: 'storm',\r\n    colors: ['#708090', '#778899', '#b0c4de', '#87ceeb', '#4682b4'],\r\n    behavior: {\r\n      movement: 'spiral',\r\n      gravity: 20,\r\n      drag: 0.96,\r\n      turbulence: 1.2,\r\n    },\r\n    physics: {\r\n      velocity: { min: 150, max: 350 },\r\n      acceleration: { x: 0, y: 50 },\r\n      mass: 0.6,\r\n      elasticity: 0.2,\r\n    },\r\n    visual: {\r\n      size: { min: 2, max: 8 },\r\n      opacity: { start: 0.7, end: 0.2 },\r\n      scale: { start: 1.0, end: 0.5 },\r\n      rotation: { enabled: true, speed: 0.12 },\r\n      glow: { enabled: false, intensity: 0 },\r\n    },\r\n    animation: {\r\n      lifespan: { min: 1200, max: 2000 },\r\n      fadeIn: 150,\r\n      fadeOut: 500,\r\n      pulsing: { enabled: false, frequency: 0 },\r\n    },\r\n    spawning: {\r\n      count: { min: 60, max: 120 },\r\n      delay: { min: 0, max: 100 },\r\n      spread: { angle: Math.PI * 2, radius: 100 },\r\n      burst: false,\r\n    },\r\n  },\r\n\r\n  /**\r\n   * 🌟 超新星效果 - 橘色爆發 (SS級效果)\r\n   */\r\n  supernova: {\r\n    type: 'supernova',\r\n    colors: ['#ff8c00', '#ffa500', '#ff7f00', '#ff6347', '#ff4500'],\r\n    behavior: {\r\n      movement: 'explode',\r\n      gravity: -50,\r\n      drag: 0.85,\r\n      turbulence: 1.8,\r\n    },\r\n    physics: {\r\n      velocity: { min: 200, max: 400 },\r\n      acceleration: { x: 0, y: -100 },\r\n      mass: 0.4,\r\n      elasticity: 0.1,\r\n    },\r\n    visual: {\r\n      size: { min: 4, max: 9 },  // 減少至接近A級大小\r\n      opacity: { start: 1.0, end: 0.0 },\r\n      scale: { start: 0.4, end: 1.3 },  // 減少結束縮放\r\n      rotation: { enabled: true, speed: 0.2 },\r\n      glow: { enabled: true, intensity: 2.2 },\r\n    },\r\n    animation: {\r\n      lifespan: { min: 1000, max: 1800 },\r\n      fadeIn: 50,\r\n      fadeOut: 800,\r\n      pulsing: { enabled: true, frequency: 0.15 },\r\n    },\r\n    spawning: {\r\n      count: { min: 120, max: 150 },  // 減少至接近A級數量\r\n      delay: { min: 0, max: 80 },\r\n      spread: { angle: Math.PI * 2, radius: 0 },\r\n      burst: true,\r\n    },\r\n  },\r\n\r\n  /**\r\n   * 🌌 宇宙爆發效果 - 金色光輝 (SSS級傳說效果)\r\n   */\r\n  cosmic_burst: {\r\n    type: 'cosmic_burst',\r\n    colors: ['#ffd700', '#ffef94', '#fff68f', '#ffffe0', '#fffacd'],\r\n    behavior: {\r\n      movement: 'explode',\r\n      gravity: -80,\r\n      drag: 0.88,\r\n      turbulence: 2.5,\r\n    },\r\n    physics: {\r\n      velocity: { min: 300, max: 600 },\r\n      acceleration: { x: 0, y: -200 },\r\n      mass: 0.2,\r\n      elasticity: 0,\r\n    },\r\n    visual: {\r\n      size: { min: 5, max: 10 },  // 減少至略大於A級\r\n      opacity: { start: 1.0, end: 0.0 },\r\n      scale: { start: 0.2, end: 1.4 },  // 大幅減少結束縮放\r\n      rotation: { enabled: true, speed: 0.25 },\r\n      glow: { enabled: true, intensity: 3.0 },\r\n    },\r\n    animation: {\r\n      lifespan: { min: 1500, max: 2800 },\r\n      fadeIn: 100,\r\n      fadeOut: 1000,\r\n      pulsing: { enabled: true, frequency: 0.2 },\r\n    },\r\n    spawning: {\r\n      count: { min: 130, max: 160 },  // 大幅減少至接近A級\r\n      delay: { min: 0, max: 200 },\r\n      spread: { angle: Math.PI * 2, radius: 30 },  // 大幅減少擴散範圍\r\n      burst: true,\r\n    },\r\n  },\r\n\r\n  /**\r\n   * 🌸 青蓮劍歌效果 - 劍氣指向 (B級效果)\r\n   */\r\n  green_lotus: {\r\n    type: 'green_lotus',\r\n    colors: ['#b4ffb4', '#90ee90', '#98fb98', '#adff2f', '#c8ffc8'],\r\n    behavior: {\r\n      movement: 'float',\r\n      gravity: -10,\r\n      drag: 0.96,\r\n      turbulence: 0.2,\r\n    },\r\n    physics: {\r\n      velocity: { min: 40, max: 80 },\r\n      acceleration: { x: 0, y: -30 },\r\n      mass: 0.3,\r\n      elasticity: 0.5,\r\n    },\r\n    visual: {\r\n      size: { min: 2, max: 4 },  // B級中小型尺寸\r\n      opacity: { start: 0.8, end: 0.1 },\r\n      scale: { start: 0.6, end: 1.2 },\r\n      rotation: { enabled: true, speed: 0.03 },\r\n      glow: { enabled: true, intensity: 0.8 },\r\n    },\r\n    animation: {\r\n      lifespan: { min: 1000, max: 1500 },\r\n      fadeIn: 200,\r\n      fadeOut: 500,\r\n      pulsing: { enabled: true, frequency: 0.05 },\r\n    },\r\n    spawning: {\r\n      count: { min: 60, max: 90 },  // B級: 60-90\r\n      delay: { min: 0, max: 80 },\r\n      spread: { angle: Math.PI * 0.3, radius: 40 },\r\n      burst: false,\r\n    },\r\n  },\r\n\r\n  /**\r\n   * ⚔️ 無限劍制效果 - 劍雨落下 (C級效果)\r\n   */\r\n  unlimited_blade_works: {\r\n    type: 'unlimited_blade_works',\r\n    colors: ['#c0c0c0', '#d3d3d3', '#dcdcdc', '#e0e0e0', '#f0f0f0'],\r\n    behavior: {\r\n      movement: 'fall',\r\n      gravity: 800,\r\n      drag: 0.99,\r\n      turbulence: 0.1,\r\n    },\r\n    physics: {\r\n      velocity: { min: 300, max: 500 },\r\n      acceleration: { x: 0, y: 800 },\r\n      mass: 0.8,\r\n      elasticity: 0,\r\n    },\r\n    visual: {\r\n      size: { min: 1, max: 2 },  // C級小型尺寸\r\n      opacity: { start: 0.7, end: 0.2 },\r\n      scale: { start: 0.5, end: 0.7 },\r\n      rotation: { enabled: false, speed: 0 },\r\n      glow: { enabled: true, intensity: 0.4 },\r\n    },\r\n    animation: {\r\n      lifespan: { min: 800, max: 1200 },\r\n      fadeIn: 150,\r\n      fadeOut: 200,\r\n      pulsing: { enabled: false, frequency: 0 },\r\n    },\r\n    spawning: {\r\n      count: { min: 20, max: 40 },  // C級: 20-40\r\n      delay: { min: 0, max: 60 },\r\n      spread: { angle: Math.PI * 0.2, radius: 30 },\r\n      burst: false,\r\n    },\r\n  },\r\n\r\n  /**\r\n   * ⚡ 神劍御雷效果 - 分形閃電 (S級效果)\r\n   */\r\n  divine_thunder: {\r\n    type: 'divine_thunder',\r\n    colors: ['#c8a0ff', '#b480ff', '#dda0dd', '#9932cc', '#ba55d3'],\r\n    behavior: {\r\n      movement: 'chain',\r\n      gravity: 0,\r\n      drag: 0.98,\r\n      turbulence: 2.0,\r\n    },\r\n    physics: {\r\n      velocity: { min: 400, max: 800 },\r\n      acceleration: { x: 0, y: 0 },\r\n      mass: 0.1,\r\n      elasticity: 0,\r\n    },\r\n    visual: {\r\n      size: { min: 6, max: 12 },  // S級大型尺寸\r\n      opacity: { start: 1.0, end: 0.0 },\r\n      scale: { start: 1.0, end: 1.2 },\r\n      rotation: { enabled: false, speed: 0 },\r\n      glow: { enabled: true, intensity: 2.5 },\r\n    },\r\n    animation: {\r\n      lifespan: { min: 1500, max: 2000 },\r\n      fadeIn: 120,\r\n      fadeOut: 250,\r\n      pulsing: { enabled: true, frequency: 0.3 },\r\n    },\r\n    spawning: {\r\n      count: { min: 120, max: 160 },  // S級: 120-160\r\n      delay: { min: 0, max: 100 },\r\n      spread: { angle: Math.PI * 2, radius: 80 },\r\n      burst: true,\r\n    },\r\n  },\r\n\r\n  /**\r\n   * 🔥 九俱焚滅效果 - 流星雨集結 (SS級效果)\r\n   */\r\n  nine_finale: {\r\n    type: 'nine_finale',\r\n    colors: ['#ff8c40', '#ff5028', '#ffb870', '#ff6030', '#ffa060'],\r\n    behavior: {\r\n      movement: 'explode',\r\n      gravity: 0.8,\r\n      drag: 0.95,\r\n      turbulence: 1.5,\r\n    },\r\n    physics: {\r\n      velocity: { min: 600, max: 1000 },\r\n      acceleration: { x: 0, y: 500 },\r\n      mass: 0.3,\r\n      elasticity: 0.1,\r\n    },\r\n    visual: {\r\n      size: { min: 8, max: 16 },  // SS級超大型尺寸\r\n      opacity: { start: 1.0, end: 0.0 },\r\n      scale: { start: 0.8, end: 1.4 },\r\n      rotation: { enabled: true, speed: 2.0 },\r\n      glow: { enabled: true, intensity: 3.0 },\r\n    },\r\n    animation: {\r\n      lifespan: { min: 1600, max: 2200 },\r\n      fadeIn: 100,\r\n      fadeOut: 300,\r\n      pulsing: { enabled: true, frequency: 0.5 },\r\n    },\r\n    spawning: {\r\n      count: { min: 180, max: 210 },  // SS級: 180-210\r\n      delay: { min: 0, max: 120 },\r\n      spread: { angle: Math.PI * 2, radius: 100 },\r\n      burst: true,\r\n    },\r\n  },\r\n};\r\n\r\n/**\r\n * 根據遊戲等級獲取建議的粒子效果\r\n */\r\nexport function getPresetForGrade(grade: string): ParticlePresetType {\r\n  switch (grade) {\r\n    case 'SSS':\r\n      return 'cosmic_burst';\r\n    case 'SS':\r\n      return 'nine_finale';\r\n    case 'S':\r\n      return 'divine_thunder';\r\n    case 'A':\r\n      return 'explosion';\r\n    case 'B':\r\n      return 'green_lotus';\r\n    case 'C':\r\n      return 'unlimited_blade_works';\r\n    default:\r\n      return 'snowflake';\r\n  }\r\n}\r\n\r\n/**\r\n * 根據特殊情況獲取粒子效果\r\n */\r\nexport function getPresetForSpecialMove(type: 'corner' | 'massive' | 'comeback' | 'domination' | 'combo'): ParticlePresetType {\r\n  switch (type) {\r\n    case 'corner':\r\n      return 'explosion';\r\n    case 'massive':\r\n      return 'storm';\r\n    case 'comeback':\r\n      return 'fire';\r\n    case 'domination':\r\n      return 'blackhole';\r\n    case 'combo':\r\n      return 'lightning';\r\n    default:\r\n      return 'magic';\r\n  }\r\n}\r\n\r\n/**\r\n * 混合兩種預設效果\r\n */\r\nexport function blendPresets(preset1: ParticlePresetType, preset2: ParticlePresetType, ratio: number = 0.5): ParticlePresetConfig {\r\n  const config1 = PARTICLE_PRESETS[preset1];\r\n  const config2 = PARTICLE_PRESETS[preset2];\r\n\r\n  return {\r\n    type: preset1,\r\n    colors: [...config1.colors, ...config2.colors],\r\n    behavior: {\r\n      movement: ratio > 0.5 ? config1.behavior.movement : config2.behavior.movement,\r\n      gravity: config1.behavior.gravity * ratio + config2.behavior.gravity * (1 - ratio),\r\n      drag: config1.behavior.drag * ratio + config2.behavior.drag * (1 - ratio),\r\n      turbulence: config1.behavior.turbulence * ratio + config2.behavior.turbulence * (1 - ratio),\r\n    },\r\n    physics: {\r\n      velocity: {\r\n        min: Math.min(config1.physics.velocity.min, config2.physics.velocity.min),\r\n        max: Math.max(config1.physics.velocity.max, config2.physics.velocity.max),\r\n      },\r\n      acceleration: {\r\n        x: config1.physics.acceleration.x * ratio + config2.physics.acceleration.x * (1 - ratio),\r\n        y: config1.physics.acceleration.y * ratio + config2.physics.acceleration.y * (1 - ratio),\r\n      },\r\n      mass: config1.physics.mass * ratio + config2.physics.mass * (1 - ratio),\r\n      elasticity: config1.physics.elasticity * ratio + config2.physics.elasticity * (1 - ratio),\r\n    },\r\n    visual: {\r\n      size: {\r\n        min: Math.min(config1.visual.size.min, config2.visual.size.min),\r\n        max: Math.max(config1.visual.size.max, config2.visual.size.max),\r\n      },\r\n      opacity: {\r\n        start: Math.max(config1.visual.opacity.start, config2.visual.opacity.start),\r\n        end: Math.min(config1.visual.opacity.end, config2.visual.opacity.end),\r\n      },\r\n      scale: {\r\n        start: config1.visual.scale.start * ratio + config2.visual.scale.start * (1 - ratio),\r\n        end: config1.visual.scale.end * ratio + config2.visual.scale.end * (1 - ratio),\r\n      },\r\n      rotation: {\r\n        enabled: config1.visual.rotation.enabled || config2.visual.rotation.enabled,\r\n        speed: config1.visual.rotation.speed * ratio + config2.visual.rotation.speed * (1 - ratio),\r\n      },\r\n      glow: {\r\n        enabled: config1.visual.glow.enabled || config2.visual.glow.enabled,\r\n        intensity: Math.max(config1.visual.glow.intensity, config2.visual.glow.intensity),\r\n      },\r\n    },\r\n    animation: {\r\n      lifespan: {\r\n        min: Math.min(config1.animation.lifespan.min, config2.animation.lifespan.min),\r\n        max: Math.max(config1.animation.lifespan.max, config2.animation.lifespan.max),\r\n      },\r\n      fadeIn: Math.max(config1.animation.fadeIn, config2.animation.fadeIn),\r\n      fadeOut: Math.max(config1.animation.fadeOut, config2.animation.fadeOut),\r\n      pulsing: {\r\n        enabled: config1.animation.pulsing.enabled || config2.animation.pulsing.enabled,\r\n        frequency: config1.animation.pulsing.frequency * ratio + config2.animation.pulsing.frequency * (1 - ratio),\r\n      },\r\n    },\r\n    spawning: {\r\n      count: {\r\n        min: Math.max(config1.spawning.count.min, config2.spawning.count.min),\r\n        max: Math.max(config1.spawning.count.max, config2.spawning.count.max),\r\n      },\r\n      delay: {\r\n        min: Math.min(config1.spawning.delay.min, config2.spawning.delay.min),\r\n        max: Math.max(config1.spawning.delay.max, config2.spawning.delay.max),\r\n      },\r\n      spread: {\r\n        angle: Math.max(config1.spawning.spread.angle, config2.spawning.spread.angle),\r\n        radius: Math.max(config1.spawning.spread.radius, config2.spawning.spread.radius),\r\n      },\r\n      burst: config1.spawning.burst || config2.spawning.burst,\r\n    },\r\n  };\r\n}","/**\n * 青蓮劍歌特效系統\n * B級特殊效果，劍氣具有指向性，朝向被翻轉的棋子方向發射\n */\n\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nexport interface PetalConfig {\n  x: number;\n  y: number;\n  angle: number;\n  scale: number;\n  life: number;\n  velocity: number;\n  rotation: number;\n  acceleration: number;\n}\n\nexport interface SwordBeamConfig {\n  x: number;\n  y: number;\n  angle: number;\n  targetPosition?: Position;\n}\n\n/**\n * 青蓮花瓣粒子\n */\nexport class LotusePetal {\n  public x: number;\n  public y: number;\n  public angle: number;\n  public scale: number;\n  public life: number;\n  public maxLife: number;\n  public velocity: number;\n  public rotation: number;\n  public acceleration: number;\n  public dead = false;\n  private time = 0;\n\n  constructor(config: PetalConfig) {\n    this.x = config.x;\n    this.y = config.y;\n    this.angle = config.angle;\n    this.scale = config.scale;\n    this.life = config.life;\n    this.maxLife = config.life;\n    this.velocity = config.velocity;\n    this.rotation = config.rotation;\n    this.acceleration = config.acceleration;\n  }\n\n  update(deltaTime: number): void {\n    this.time += deltaTime;\n\n    if (this.time > this.life) {\n      this.dead = true;\n      return;\n    }\n\n    // 更新位置\n    this.x += Math.cos(this.angle) * this.velocity * deltaTime;\n    this.y += Math.sin(this.angle) * this.velocity * deltaTime;\n\n    // 更新旋轉\n    this.acceleration += this.rotation * deltaTime;\n  }\n\n  draw(ctx: CanvasRenderingContext2D): void {\n    const alpha = 1 - this.time / this.life;\n\n    ctx.save();\n    ctx.globalAlpha = alpha * 0.9;\n    ctx.translate(this.x, this.y);\n    ctx.rotate(this.acceleration);\n    ctx.scale(this.scale, this.scale);\n\n    // 繪製花瓣形狀\n    this.drawPetal(ctx);\n\n    ctx.restore();\n  }\n\n  private drawPetal(ctx: CanvasRenderingContext2D): void {\n    const gradient = ctx.createLinearGradient(0, 0, 80, 55);\n    gradient.addColorStop(0, 'rgba(180,255,220,0.9)');\n    gradient.addColorStop(1, 'rgba(120,220,180,0.1)');\n\n    ctx.fillStyle = gradient;\n    ctx.beginPath();\n    ctx.moveTo(12, 25);\n    ctx.bezierCurveTo(32, 8, 58, 12, 65, 25);\n    ctx.bezierCurveTo(58, 38, 32, 42, 12, 25);\n    ctx.closePath();\n    ctx.fill();\n  }\n}\n\n/**\n * 劍氣束\n */\nexport class GreenSwordBeam {\n  public x: number;\n  public y: number;\n  public angle: number;\n  public dead = false;\n  private time = 0;\n  private maxTime = 0.5;\n  private speed = 600;\n\n  constructor(config: SwordBeamConfig) {\n    this.x = config.x;\n    this.y = config.y;\n    this.angle = config.angle;\n  }\n\n  update(deltaTime: number): void {\n    this.time += deltaTime;\n\n    if (this.time > this.maxTime) {\n      this.dead = true;\n      return;\n    }\n\n    // 沿著角度方向移動\n    this.x += Math.cos(this.angle) * this.speed * deltaTime;\n    this.y += Math.sin(this.angle) * this.speed * deltaTime;\n  }\n\n  draw(ctx: CanvasRenderingContext2D): void {\n    ctx.save();\n    ctx.translate(this.x, this.y);\n    ctx.rotate(this.angle);\n\n    // 繪製劍氣束\n    this.drawBeam(ctx);\n\n    ctx.restore();\n  }\n\n  private drawBeam(ctx: CanvasRenderingContext2D): void {\n    const gradient = ctx.createLinearGradient(0, 0, 160, 0);\n    gradient.addColorStop(0, 'rgba(200,255,230,0)');\n    gradient.addColorStop(0.3, 'rgba(200,255,230,0.8)');\n    gradient.addColorStop(0.8, 'rgba(200,255,230,0.8)');\n    gradient.addColorStop(1, 'rgba(200,255,230,0)');\n\n    ctx.fillStyle = gradient;\n    ctx.fillRect(-80, -6, 160, 12);\n  }\n}\n\n/**\n * 青蓮劍歌主效果\n */\nexport class GreenLotusEffect {\n  public x: number;\n  public y: number;\n  public dead = false;\n  private time = 0;\n  private phase = 0;\n  private petals: LotusePetal[] = [];\n  private swords: GreenSwordBeam[] = [];\n  private targetPositions: Position[];\n\n  constructor(x: number, y: number, targetPositions: Position[] = []) {\n    this.x = x;\n    this.y = y;\n    this.targetPositions = targetPositions;\n  }\n\n  update(deltaTime: number): void {\n    this.time += deltaTime;\n\n    switch (this.phase) {\n      case 0: // 蓮花綻放階段\n        if (this.time > 0.5) {\n          this.createPetals();\n          this.phase = 1;\n          this.time = 0;\n        }\n        break;\n\n      case 1: // 劍束發射階段\n        if (this.time > 0.4) {\n          this.createSwordBeams();\n          this.phase = 2;\n          this.time = 0;\n        }\n        break;\n\n      case 2: // 效果結束階段\n        if (this.time > 1.5) {\n          this.dead = true;\n        }\n        break;\n    }\n\n    // 更新花瓣\n    this.petals.forEach(petal => petal.update(deltaTime));\n    this.petals = this.petals.filter(petal => !petal.dead);\n\n    // 更新劍束\n    this.swords.forEach(sword => sword.update(deltaTime));\n    this.swords = this.swords.filter(sword => !sword.dead);\n  }\n\n  draw(ctx: CanvasRenderingContext2D): void {\n    // 繪製光暈效果\n    this.drawAura(ctx);\n\n    // 繪製青蓮花瓣 (phase 0 主要顯示)\n    if (this.phase === 0) {\n      this.drawLotusFlower(ctx);\n    }\n\n    // 繪製花瓣粒子\n    this.petals.forEach(petal => petal.draw(ctx));\n\n    // 繪製劍束\n    this.swords.forEach(sword => sword.draw(ctx));\n  }\n\n  private drawAura(ctx: CanvasRenderingContext2D): void {\n    let alpha = 1;\n\n    if (this.phase === 0) {\n      alpha = Math.min(1, this.time / 0.5); // 淡入\n    } else if (this.phase === 2) {\n      alpha = Math.max(0, 1 - this.time / 1.5); // 淡出\n    }\n\n    ctx.save();\n    ctx.globalAlpha = alpha;\n\n    const gradient = ctx.createRadialGradient(this.x, this.y, 0, this.x, this.y, 130);\n    gradient.addColorStop(0, 'rgba(180,255,220,0.8)');\n    gradient.addColorStop(1, 'rgba(180,255,220,0)');\n\n    ctx.fillStyle = gradient;\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, 130, 0, Math.PI * 2);\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  private drawLotusFlower(ctx: CanvasRenderingContext2D): void {\n    const petalCount = 8;\n\n    for (let i = 0; i < petalCount; i++) {\n      const angle = (i * Math.PI * 2) / petalCount + this.time * 1.5;\n\n      ctx.save();\n      ctx.translate(this.x, this.y);\n      ctx.rotate(angle);\n\n      // 直接繪製花瓣形狀\n      const gradient = ctx.createLinearGradient(0, 0, 80, 55);\n      gradient.addColorStop(0, 'rgba(180,255,220,0.9)');\n      gradient.addColorStop(1, 'rgba(120,220,180,0.1)');\n\n      ctx.fillStyle = gradient;\n      ctx.beginPath();\n      ctx.moveTo(12, 25);\n      ctx.bezierCurveTo(32, 8, 58, 12, 65, 25);\n      ctx.bezierCurveTo(58, 38, 32, 42, 12, 25);\n      ctx.closePath();\n      ctx.fill();\n\n      ctx.restore();\n    }\n  }\n\n  private createPetals(): void {\n    for (let i = 0; i < 12; i++) {\n      const angle = (i * Math.PI * 2) / 12;\n\n      this.petals.push(new LotusePetal({\n        x: this.x,\n        y: this.y,\n        angle: angle,\n        scale: 0.8 + Math.random() * 0.5,\n        life: 1 + Math.random() * 0.5,\n        velocity: 40 + Math.random() * 40,\n        rotation: -2 + Math.random() * 4,\n        acceleration: -0.5 + Math.random(),\n      }));\n    }\n  }\n\n  private createSwordBeams(): void {\n    if (this.targetPositions.length > 0) {\n      // 為每個目標位置創建定向劍束\n      this.targetPositions.forEach(target => {\n        const angle = Math.atan2(target.y - this.y, target.x - this.x);\n        const variation = -0.1 + Math.random() * 0.2; // 添加輕微隨機偏移\n\n        this.swords.push(new GreenSwordBeam({\n          x: this.x,\n          y: this.y,\n          angle: angle + variation,\n          targetPosition: target,\n        }));\n      });\n    } else {\n      // 如果沒有目標位置，創建環形劍束\n      for (let i = 0; i < 12; i++) {\n        const angle = (i * Math.PI * 2) / 12 + (-0.1 + Math.random() * 0.2);\n\n        this.swords.push(new GreenSwordBeam({\n          x: this.x,\n          y: this.y,\n          angle: angle,\n        }));\n      }\n    }\n  }\n}","/**\n * 無限劍制特效系統 (簡化版)\n * C級特殊效果，劍雨具有指向性，落向被翻轉的棋子\n */\n\nexport interface Position {\n  x: number;\n  y: number;\n}\n\n\n\n/**\n * 簡化版陀飛輪（C級適用）\n */\nexport class SimplifiedTourbillon {\n  public x: number;\n  public y: number;\n  private time = 0;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  update(deltaTime: number): void {\n    this.time += deltaTime;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, alpha: number): void {\n    const minDimension = Math.min(window.innerWidth, window.innerHeight);\n    const baseRadius = minDimension * 0.14; // 進一步增大齒輪尺寸\n    const rotation = this.time * 0.3; // 較慢的旋轉速度\n\n    ctx.save();\n    ctx.translate(this.x, this.y - window.innerHeight * 0.02);\n    ctx.globalAlpha = alpha * 0.5; // C級較低透明度\n\n    // 外環（簡化版）\n    this.drawSimplifiedRing(ctx, baseRadius, rotation);\n\n    // 中心擺輪（簡化版）\n    this.drawSimplifiedBalance(ctx, baseRadius, this.time);\n\n    ctx.restore();\n  }\n\n  private drawSimplifiedRing(ctx: CanvasRenderingContext2D, radius: number, rotation: number): void {\n    ctx.save();\n    ctx.rotate(-rotation * 0.5);\n\n    // 外層厚重環 - 增加厚度和重量感\n    const outerGradient = ctx.createRadialGradient(0, 0, radius * 0.65, 0, 0, radius);\n    outerGradient.addColorStop(0, 'rgba(240,240,240,0.8)');\n    outerGradient.addColorStop(0.3, 'rgba(200,200,200,0.9)');\n    outerGradient.addColorStop(0.7, 'rgba(160,160,160,0.8)');\n    outerGradient.addColorStop(1, 'rgba(100,100,100,0.6)');\n\n    ctx.fillStyle = outerGradient;\n    ctx.beginPath();\n    ctx.arc(0, 0, radius, 0, Math.PI * 2);\n    ctx.arc(0, 0, radius * 0.65, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.fill();\n\n    // 中層環 - 增加層次感\n    const midGradient = ctx.createRadialGradient(0, 0, radius * 0.55, 0, 0, radius * 0.75);\n    midGradient.addColorStop(0, 'rgba(220,220,220,0.7)');\n    midGradient.addColorStop(1, 'rgba(140,140,140,0.5)');\n\n    ctx.fillStyle = midGradient;\n    ctx.beginPath();\n    ctx.arc(0, 0, radius * 0.75, 0, Math.PI * 2);\n    ctx.arc(0, 0, radius * 0.55, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.fill();\n\n    // 外層大齒 - 厚重的齒輪結構\n    ctx.strokeStyle = 'rgba(255,255,255,0.8)';\n    ctx.lineWidth = 4;\n    for (let i = 0; i < 24; i++) {\n      const angle = (i * Math.PI * 2) / 24;\n      ctx.beginPath();\n      ctx.moveTo(Math.cos(angle) * radius * 0.65, Math.sin(angle) * radius * 0.65);\n      ctx.lineTo(Math.cos(angle) * radius * 0.98, Math.sin(angle) * radius * 0.98);\n      ctx.stroke();\n\n      // 齒輪頂端加厚\n      ctx.lineWidth = 6;\n      ctx.strokeStyle = 'rgba(255,255,255,0.9)';\n      ctx.beginPath();\n      ctx.moveTo(Math.cos(angle) * radius * 0.92, Math.sin(angle) * radius * 0.92);\n      ctx.lineTo(Math.cos(angle) * radius * 0.98, Math.sin(angle) * radius * 0.98);\n      ctx.stroke();\n      ctx.lineWidth = 4;\n      ctx.strokeStyle = 'rgba(255,255,255,0.8)';\n    }\n\n    // 中層精密齒輪 - 更細緻的紋理\n    ctx.strokeStyle = 'rgba(220,220,220,0.7)';\n    ctx.lineWidth = 2;\n    for (let i = 0; i < 48; i++) {\n      const angle = (i * Math.PI * 2) / 48;\n      ctx.beginPath();\n      ctx.moveTo(Math.cos(angle) * radius * 0.55, Math.sin(angle) * radius * 0.55);\n      ctx.lineTo(Math.cos(angle) * radius * 0.72, Math.sin(angle) * radius * 0.72);\n      ctx.stroke();\n\n      // 每8個齒輪添加強化線\n      if (i % 8 === 0) {\n        ctx.lineWidth = 3;\n        ctx.strokeStyle = 'rgba(240,240,240,0.8)';\n        ctx.beginPath();\n        ctx.moveTo(Math.cos(angle) * radius * 0.52, Math.sin(angle) * radius * 0.52);\n        ctx.lineTo(Math.cos(angle) * radius * 0.75, Math.sin(angle) * radius * 0.75);\n        ctx.stroke();\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = 'rgba(220,220,220,0.7)';\n      }\n    }\n\n    // 內層複雜機械結構\n    for (let ring = 0; ring < 3; ring++) {\n      const ringRadius = radius * (0.45 - ring * 0.08);\n      const teethCount = 36 - ring * 8;\n\n      ctx.strokeStyle = `rgba(200,200,200,${0.6 - ring * 0.1})`;\n      ctx.lineWidth = 2 - ring * 0.3;\n\n      for (let i = 0; i < teethCount; i++) {\n        const angle = (i * Math.PI * 2) / teethCount;\n        ctx.beginPath();\n        ctx.moveTo(Math.cos(angle) * ringRadius * 0.85, Math.sin(angle) * ringRadius * 0.85);\n        ctx.lineTo(Math.cos(angle) * ringRadius * 1.1, Math.sin(angle) * ringRadius * 1.1);\n        ctx.stroke();\n      }\n    }\n\n    ctx.restore();\n  }\n\n  private drawSimplifiedBalance(ctx: CanvasRenderingContext2D, radius: number, time: number): void {\n    ctx.save();\n    ctx.rotate(Math.sin(time * 4) * 0.2); // 擺輪搖擺\n\n    // 外層擺輪環 - 更精緻的漸層\n    const outerBalanceGradient = ctx.createRadialGradient(0, 0, radius * 0.12, 0, 0, radius * 0.32);\n    outerBalanceGradient.addColorStop(0, 'rgba(255,255,255,0.9)');\n    outerBalanceGradient.addColorStop(0.3, 'rgba(240,240,240,0.8)');\n    outerBalanceGradient.addColorStop(0.7, 'rgba(180,180,180,0.7)');\n    outerBalanceGradient.addColorStop(1, 'rgba(120,120,120,0.5)');\n\n    ctx.fillStyle = outerBalanceGradient;\n    ctx.beginPath();\n    ctx.arc(0, 0, radius * 0.32, 0, Math.PI * 2);\n    ctx.arc(0, 0, radius * 0.12, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.fill();\n\n    // 內層擺輪環 - 金屬質感\n    const innerBalanceGradient = ctx.createRadialGradient(0, 0, radius * 0.08, 0, 0, radius * 0.18);\n    innerBalanceGradient.addColorStop(0, 'rgba(255,255,255,1.0)');\n    innerBalanceGradient.addColorStop(0.5, 'rgba(200,200,200,0.9)');\n    innerBalanceGradient.addColorStop(1, 'rgba(150,150,150,0.7)');\n\n    ctx.fillStyle = innerBalanceGradient;\n    ctx.beginPath();\n    ctx.arc(0, 0, radius * 0.18, 0, Math.PI * 2);\n    ctx.arc(0, 0, radius * 0.08, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.fill();\n\n    // 擺輪輻條 - 精細的機械結構\n    ctx.strokeStyle = 'rgba(255,255,255,0.8)';\n    ctx.lineWidth = 2;\n    for (let i = 0; i < 12; i++) {\n      const angle = (i * Math.PI * 2) / 12;\n      ctx.beginPath();\n      ctx.moveTo(Math.cos(angle) * radius * 0.08, Math.sin(angle) * radius * 0.08);\n      ctx.lineTo(Math.cos(angle) * radius * 0.30, Math.sin(angle) * radius * 0.30);\n      ctx.stroke();\n\n      // 主輻條加強\n      if (i % 3 === 0) {\n        ctx.lineWidth = 3;\n        ctx.strokeStyle = 'rgba(255,255,255,0.95)';\n        ctx.beginPath();\n        ctx.moveTo(Math.cos(angle) * radius * 0.08, Math.sin(angle) * radius * 0.08);\n        ctx.lineTo(Math.cos(angle) * radius * 0.32, Math.sin(angle) * radius * 0.32);\n        ctx.stroke();\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = 'rgba(255,255,255,0.8)';\n      }\n    }\n\n    // 擺輪配重塊\n    for (let i = 0; i < 4; i++) {\n      const angle = (i * Math.PI * 2) / 4;\n      const weightX = Math.cos(angle) * radius * 0.28;\n      const weightY = Math.sin(angle) * radius * 0.28;\n\n      ctx.fillStyle = 'rgba(255,255,255,0.9)';\n      ctx.beginPath();\n      ctx.arc(weightX, weightY, radius * 0.03, 0, Math.PI * 2);\n      ctx.fill();\n\n      ctx.strokeStyle = 'rgba(200,200,200,0.8)';\n      ctx.lineWidth = 1;\n      ctx.stroke();\n    }\n\n    // 中心軸 - 更精緻的中心點\n    const centerGradient = ctx.createRadialGradient(0, 0, 0, 0, 0, radius * 0.05);\n    centerGradient.addColorStop(0, 'rgba(255,255,255,1.0)');\n    centerGradient.addColorStop(0.7, 'rgba(220,220,220,0.9)');\n    centerGradient.addColorStop(1, 'rgba(180,180,180,0.7)');\n\n    ctx.fillStyle = centerGradient;\n    ctx.beginPath();\n    ctx.arc(0, 0, radius * 0.05, 0, Math.PI * 2);\n    ctx.fill();\n\n    // 中心點反光\n    ctx.fillStyle = 'rgba(255,255,255,0.8)';\n    ctx.beginPath();\n    ctx.arc(-radius * 0.01, -radius * 0.01, radius * 0.02, 0, Math.PI * 2);\n    ctx.fill();\n\n    ctx.restore();\n  }\n}\n\n/**\n * 無限劍制主效果（C級版本）- 純齒輪特效\n */\nexport class UnlimitedBladeWorksEffect {\n  public x: number;\n  public y: number;\n  public dead = false;\n  private time = 0;\n  private duration = 2.0; // 延長齒輪顯示時間\n  private tourbillon: SimplifiedTourbillon;\n\n  constructor(x: number, y: number, targetPositions: Position[] = []) {\n    this.x = x;\n    this.y = y;\n    this.tourbillon = new SimplifiedTourbillon(x, y);\n  }\n\n  update(deltaTime: number): void {\n    this.time += deltaTime;\n\n    if (this.time > this.duration) {\n      this.dead = true;\n      return;\n    }\n\n    // 更新陀飛輪\n    this.tourbillon.update(deltaTime);\n  }\n\n  draw(ctx: CanvasRenderingContext2D): void {\n    if (this.dead) {return;}\n\n    // 計算淡入淡出\n    let alpha = 1;\n    if (this.time < 0.3) {\n      alpha = this.time / 0.3; // 較慢淡入\n    } else if (this.time > this.duration - 0.4) {\n      alpha = (this.duration - this.time) / 0.4; // 較慢淡出\n    }\n\n    // 只繪製陀飛輪\n    this.tourbillon.draw(ctx, alpha);\n  }\n\n}","/**\n * 神劍御雷真訣特效系統\n * S級特殊效果，紫色雷電劍柱具有指向性，落向被翻轉的棋子\n */\n\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nexport interface LightningPoint {\n  x: number;\n  y: number;\n}\n\nexport interface FractalBolt {\n  points: LightningPoint[];\n  branches: FractalBolt[];\n}\n\nexport interface ElectricSparkConfig {\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  life: number;\n}\n\nexport interface ThunderTarget {\n  start: Position;\n  end: Position;\n  delay: number;\n}\n\n/**\n * 神劍御雷主題顏色配置\n */\nexport const THUNDER_THEME = {\n  core: 'rgba(200,160,255,1.0)',      // 核心紫色\n  bolt: 'rgba(180,140,255,0.95)',     // 閃電主體\n  haze: 'rgba(160,120,255,0.25)',     // 光暈\n  spark: 'rgba(220,200,255,0.9)',     // 電火花\n  ring: 'rgba(210,190,255,0.65)',     // 衝擊環\n  blade: 'rgba(190,160,255,0.9)',     // 劍柱\n};\n\n/**\n * 電火花粒子\n */\nexport class ElectricSpark {\n  public x: number;\n  public y: number;\n  public vx: number;\n  public vy: number;\n  public time = 0;\n  public life: number;\n  public dead = false;\n\n  constructor(config: ElectricSparkConfig) {\n    this.x = config.x;\n    this.y = config.y;\n    this.vx = config.vx;\n    this.vy = config.vy;\n    this.life = config.life;\n  }\n\n  update(deltaTime: number): void {\n    this.time += deltaTime;\n\n    if (this.time > this.life) {\n      this.dead = true;\n      return;\n    }\n\n    // 重力影響\n    this.vy += 900 * deltaTime;\n\n    // 更新位置\n    this.x += this.vx * deltaTime;\n    this.y += this.vy * deltaTime;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, alpha: number): void {\n    if (this.dead) {return;}\n\n    const k = 1 - this.time / this.life;\n\n    ctx.save();\n    ctx.globalCompositeOperation = 'lighter';\n    ctx.globalAlpha = alpha * k;\n    ctx.strokeStyle = THUNDER_THEME.spark;\n    ctx.lineWidth = 2;\n\n    // 繪製十字型電火花\n    ctx.beginPath();\n    ctx.moveTo(this.x - 2, this.y);\n    ctx.lineTo(this.x + 2, this.y);\n    ctx.moveTo(this.x, this.y - 2);\n    ctx.lineTo(this.x, this.y + 2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n}\n\n/**\n * 衝擊波環\n */\nexport class ShockwaveRing {\n  public x: number;\n  public y: number;\n  public time = 0;\n  public duration = 1.0;\n  public dead = false;\n  public maxRadius = 180;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  update(deltaTime: number): void {\n    this.time += deltaTime * 2.2;\n\n    if (this.time >= this.duration * 1.1) {\n      this.dead = true;\n    }\n  }\n\n  draw(ctx: CanvasRenderingContext2D, alpha: number): void {\n    if (this.dead || this.time <= 0) {return;}\n\n    const progress = Math.min(1, this.time / this.duration);\n    const radius = 20 + progress * this.maxRadius;\n\n    ctx.save();\n    ctx.globalCompositeOperation = 'lighter';\n    ctx.globalAlpha = alpha * (1 - progress);\n    ctx.strokeStyle = THUNDER_THEME.ring;\n    ctx.lineWidth = 3 + 6 * (1 - progress);\n\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, radius, 0, Math.PI * 2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n}\n\n/**\n * 分形閃電生成器\n */\nexport class FractalLightningGenerator {\n  /**\n   * 生成分形閃電路徑\n   */\n  static generateBolt(\n    start: Position,\n    end: Position,\n    depth = 5,\n    displacement = 48,\n    branchProbability = 0.35,\n  ): FractalBolt {\n    const points: LightningPoint[] = [\n      { x: start.x, y: start.y },\n      { x: end.x, y: end.y },\n    ];\n\n    // 中點位移算法\n    for (let d = 0; d < depth; d++) {\n      for (let i = points.length - 1; i > 0; i--) {\n        const a = points[i - 1];\n        const b = points[i];\n\n        if (!a || !b) {continue;}\n\n        const midX = (a.x + b.x) / 2;\n        const midY = (a.y + b.y) / 2;\n\n        // 計算垂直方向\n        const dx = b.x - a.x;\n        const dy = b.y - a.y;\n        const length = Math.hypot(dx, dy) || 1;\n\n        // 垂直向量（旋轉90度）\n        const perpX = -dy / length;\n        const perpY = dx / length;\n\n        // 隨機位移\n        const offset = (Math.random() * 2 - 1) * displacement;\n\n        points.splice(i, 0, {\n          x: midX + perpX * offset,\n          y: midY + perpY * offset,\n        });\n      }\n      displacement *= 0.55; // 遞減位移量\n    }\n\n    // 生成分支\n    const branches: FractalBolt[] = [];\n    for (let i = 2; i < points.length - 2; i++) {\n      if (Math.random() < branchProbability) {\n        const point = points[i];\n        const nextPoint = points[i + 1];\n\n        if (!point || !nextPoint) {continue;}\n\n        const dirX = nextPoint.x - point.x;\n        const dirY = nextPoint.y - point.y;\n        const length = Math.hypot(dirX, dirY) || 1;\n        const scale = 0.35 + Math.random() * 0.25;\n\n        const branchEnd = {\n          x: point.x + (dirX / length) * (40 + Math.random() * 50),\n          y: point.y + (dirY / length) * (40 + Math.random() * 50),\n        };\n\n        branches.push(this.generateBolt(\n          point,\n          branchEnd,\n          3,\n          displacement * 0.6,\n          0.15,\n        ));\n      }\n    }\n\n    return { points, branches };\n  }\n\n  /**\n   * 繪製分形閃電\n   */\n  static drawBolt(ctx: CanvasRenderingContext2D, bolt: FractalBolt, baseWidth = 3): void {\n    ctx.save();\n    ctx.globalCompositeOperation = 'lighter';\n    ctx.lineJoin = 'round';\n    ctx.lineCap = 'round';\n\n    // 外暈（淡紫）\n    ctx.strokeStyle = THUNDER_THEME.haze;\n    ctx.lineWidth = baseWidth * 4;\n    this.pathBolt(ctx, bolt);\n    ctx.stroke();\n\n    // 主體（亮紫）\n    ctx.strokeStyle = THUNDER_THEME.bolt;\n    ctx.lineWidth = baseWidth;\n    this.pathBolt(ctx, bolt);\n    ctx.stroke();\n\n    // 中芯高光（白亮線）\n    ctx.strokeStyle = 'rgba(255,255,255,0.9)';\n    ctx.lineWidth = Math.max(1, baseWidth * 0.5);\n    this.pathBolt(ctx, bolt);\n    ctx.stroke();\n\n    // 繪製分支\n    for (const branch of bolt.branches) {\n      this.drawBolt(ctx, branch, baseWidth * 0.7);\n    }\n\n    ctx.restore();\n  }\n\n  /**\n   * 創建閃電路徑\n   */\n  private static pathBolt(ctx: CanvasRenderingContext2D, bolt: FractalBolt): void {\n    const points = bolt.points;\n    if (points.length < 2) {return;}\n\n    ctx.beginPath();\n    const firstPoint = points[0];\n    if (firstPoint) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n    }\n\n    for (let i = 1; i < points.length; i++) {\n      const point = points[i];\n      if (point) {\n        ctx.lineTo(point.x, point.y);\n      }\n    }\n  }\n}\n\n/**\n * 雷電劍柱\n */\nexport class ThunderBlade {\n  public x: number;\n  public y: number;\n  public targetY: number;\n  public currentY: number;\n  public width = 14;\n  public arrived = false;\n  public alpha = 1;\n\n  constructor(x: number, targetY: number) {\n    this.x = x;\n    this.targetY = targetY;\n    this.y = targetY;\n    this.currentY = -160; // 從上方開始\n  }\n\n  update(deltaTime: number): void {\n    // 快速下降到目標位置\n    const speed = 16;\n    this.currentY += (this.targetY - this.currentY) * Math.min(1, deltaTime * speed);\n\n    if (Math.abs(this.currentY - this.targetY) < 6) {\n      this.arrived = true;\n    }\n  }\n\n  draw(ctx: CanvasRenderingContext2D, alpha: number): void {\n    const effectiveAlpha = alpha * this.alpha;\n    const topY = Math.min(this.currentY, this.targetY - window.innerHeight * 0.35);\n    const bottomY = this.targetY + 10;\n\n    ctx.save();\n    ctx.globalCompositeOperation = 'lighter';\n\n    // 外暈\n    ctx.globalAlpha = effectiveAlpha * 0.6;\n    const gradient1 = ctx.createLinearGradient(this.x, topY, this.x, bottomY);\n    gradient1.addColorStop(0, 'rgba(170,120,255,0)');\n    gradient1.addColorStop(0.1, 'rgba(170,120,255,0.25)');\n    gradient1.addColorStop(0.9, 'rgba(170,120,255,0.25)');\n    gradient1.addColorStop(1, 'rgba(170,120,255,0)');\n    ctx.fillStyle = gradient1;\n    ctx.fillRect(this.x - 28, topY, 56, bottomY - topY);\n\n    // 劍身\n    ctx.globalAlpha = effectiveAlpha;\n    ctx.fillStyle = THUNDER_THEME.blade;\n    ctx.fillRect(this.x - this.width / 2, topY, this.width, bottomY - topY);\n\n    // 中芯白光\n    ctx.globalAlpha = effectiveAlpha;\n    ctx.fillStyle = 'rgba(255,255,255,0.95)';\n    ctx.fillRect(this.x - 1, topY + 6, 2, (bottomY - topY) - 12);\n\n    // 劍尖圓光\n    if (this.arrived) {\n      ctx.globalAlpha = effectiveAlpha;\n      const radialGradient = ctx.createRadialGradient(\n        this.x, bottomY - 6, 0,\n        this.x, bottomY - 6, 22,\n      );\n      radialGradient.addColorStop(0, 'rgba(255,255,255,1)');\n      radialGradient.addColorStop(1, 'rgba(255,255,255,0)');\n      ctx.fillStyle = radialGradient;\n      ctx.beginPath();\n      ctx.arc(this.x, bottomY - 6, 22, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n    ctx.restore();\n  }\n}\n\n/**\n * 神劍御雷主效果\n */\nexport class DivineSwordThunderEffect {\n  public x: number;\n  public y: number;\n  public dead = false;\n  private time = 0;\n  private duration = 2.0; // S級持續時間\n  private targetPositions: Position[];\n  private thunderBlades: ThunderBlade[] = [];\n  private lightningBolts: FractalBolt[] = [];\n  private sparks: ElectricSpark[] = [];\n  private shockwaves: ShockwaveRing[] = [];\n  private screenShake = 0;\n  private thunderStarted = false;\n\n  constructor(x: number, y: number, targetPositions: Position[] = []) {\n    this.x = x;\n    this.y = y;\n    this.targetPositions = targetPositions;\n    this.initializeBlades();\n  }\n\n  private initializeBlades(): void {\n    if (this.targetPositions.length > 0) {\n      // 為每個翻轉位置創建劍柱\n      this.targetPositions.forEach(target => {\n        this.thunderBlades.push(new ThunderBlade(target.x, target.y));\n      });\n    } else {\n      // 沒有目標時在中心創建一把劍\n      this.thunderBlades.push(new ThunderBlade(this.x, this.y));\n    }\n  }\n\n  update(deltaTime: number): void {\n    this.time += deltaTime;\n\n    if (this.time > this.duration) {\n      this.dead = true;\n      return;\n    }\n\n    // 更新劍柱\n    let anyBladeArrived = false;\n    this.thunderBlades.forEach(blade => {\n      blade.update(deltaTime);\n      if (blade.arrived) {\n        anyBladeArrived = true;\n      }\n    });\n\n    // 劍柱到達後開始雷電效果\n    if (anyBladeArrived && !this.thunderStarted) {\n      this.startThunderEffect();\n      this.thunderStarted = true;\n    }\n\n    // 持續生成閃電（如果已開始）\n    if (this.thunderStarted) {\n      this.generateLightning();\n    }\n\n    // 更新震動衰減\n    if (this.screenShake > 0) {\n      this.screenShake = Math.max(0, this.screenShake - deltaTime * 24);\n    }\n\n    // 更新火花\n    this.sparks.forEach(spark => spark.update(deltaTime));\n    this.sparks = this.sparks.filter(spark => !spark.dead);\n\n    // 更新衝擊波\n    this.shockwaves.forEach(wave => wave.update(deltaTime));\n    this.shockwaves = this.shockwaves.filter(wave => !wave.dead);\n\n    // 控制閃電數量避免過多\n    if (this.lightningBolts.length > 12) {\n      this.lightningBolts.splice(0, this.lightningBolts.length - 12);\n    }\n  }\n\n  private startThunderEffect(): void {\n    // 強烈震動\n    this.screenShake = 6;\n\n    // 在每個劍柱位置生成火花和衝擊波\n    this.thunderBlades.forEach(blade => {\n      this.spawnSparks(blade.x, blade.y, 20);\n      this.shockwaves.push(new ShockwaveRing(blade.x, blade.y));\n    });\n  }\n\n  private generateLightning(): void {\n    // 每幀生成2-4道閃電\n    const count = 2 + (Math.random() < 0.5 ? 1 : 2);\n\n    for (let i = 0; i < count; i++) {\n      // 隨機選擇一個劍柱作為目標\n      const targetBlade = this.thunderBlades[Math.floor(Math.random() * this.thunderBlades.length)];\n      if (!targetBlade) {continue;}\n\n      // 閃電起點在上方隨機位置\n      const startX = targetBlade.x + (Math.random() - 0.5) * window.innerWidth * 0.5;\n      const startY = -80 + Math.random() * window.innerHeight * 0.1;\n\n      const bolt = FractalLightningGenerator.generateBolt(\n        { x: startX, y: startY },\n        { x: targetBlade.x, y: targetBlade.y },\n        5,\n        32 + Math.random() * 32,\n        0.35,\n      );\n\n      this.lightningBolts.push(bolt);\n    }\n  }\n\n  private spawnSparks(x: number, y: number, count: number): void {\n    for (let i = 0; i < count; i++) {\n      this.sparks.push(new ElectricSpark({\n        x,\n        y,\n        vx: -220 + Math.random() * 440,\n        vy: -180 + Math.random() * 160,\n        life: 0.15 + Math.random() * 0.2,\n      }));\n    }\n  }\n\n  draw(ctx: CanvasRenderingContext2D): void {\n    if (this.dead) {return;}\n\n    // 計算淡入淡出\n    let alpha = 1;\n    const fadeInTime = 0.12;\n    const fadeOutTime = 0.25;\n\n    if (this.time < fadeInTime) {\n      alpha = this.time / fadeInTime;\n    } else if (this.time > this.duration - fadeOutTime) {\n      alpha = (this.duration - this.time) / fadeOutTime;\n    }\n\n    // 應用震動\n    ctx.save();\n    if (this.screenShake > 0) {\n      const shakeX = (Math.random() - 0.5) * this.screenShake;\n      const shakeY = (Math.random() - 0.5) * this.screenShake;\n      ctx.translate(shakeX, shakeY);\n    }\n\n    // 繪製劍柱\n    this.thunderBlades.forEach(blade => blade.draw(ctx, alpha));\n\n    // 繪製閃電\n    this.lightningBolts.forEach(bolt => {\n      FractalLightningGenerator.drawBolt(ctx, bolt, 2.6);\n    });\n\n    // 繪製衝擊波\n    this.shockwaves.forEach(wave => wave.draw(ctx, alpha));\n\n    // 繪製火花\n    this.sparks.forEach(spark => spark.draw(ctx, alpha));\n\n    ctx.restore();\n  }\n}","/**\n * Nine Finale Destruction Effect (九俱焚滅)\n * SS-tier special effect with meteor swarm convergence\n */\n\nexport interface Position {\n  x: number;\n  y: number;\n}\n\ninterface MeteorTrailPoint {\n  x: number;\n  y: number;\n}\n\ninterface Meteor {\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  rotation: number;\n  gravity: number;\n  life: number;\n  currentLife: number;\n  trail: MeteorTrailPoint[];\n  scale: number;\n  targetX: number;\n  targetY: number;\n  assignedTarget: Position;\n}\n\ninterface ExplosionSpark {\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  life: number;\n  currentLife: number;\n}\n\ninterface ShockwaveRing {\n  x: number;\n  y: number;\n  radius: number;\n  maxRadius: number;\n  life: number;\n  currentLife: number;\n}\n\nexport class NineFinaleEffect {\n  private x: number;\n  private y: number;\n  private targetPositions: Position[];\n  private meteors: Meteor[] = [];\n  private sparks: ExplosionSpark[] = [];\n  private rings: ShockwaveRing[] = [];\n  private targetIndicators: Array<{x: number, y: number, life: number, maxLife: number}> = [];\n  private duration: number = 1.8;\n  private currentTime: number = 0;\n  private isComplete: boolean = false;\n  private screenShake: number = 0;\n  private meteorHead: HTMLCanvasElement;\n\n  constructor(x: number, y: number, targetPositions: Position[] = []) {\n    this.x = x;\n    this.y = y;\n    this.targetPositions = targetPositions.length > 0 ? targetPositions : [{ x, y }];\n    this.meteorHead = this.createMeteorSprite();\n    this.initializeTargetIndicators();\n    this.initializeMeteors();\n  }\n\n  private initializeTargetIndicators(): void {\n    // Create anticipation indicators at target positions\n    for (const target of this.targetPositions) {\n      this.targetIndicators.push({\n        x: target.x,\n        y: target.y,\n        life: 0.6, // Short indicator duration\n        maxLife: 0.6,\n      });\n    }\n  }\n\n  private createMeteorSprite(): HTMLCanvasElement {\n    const canvas = document.createElement('canvas');\n    canvas.width = 96;\n    canvas.height = 96;\n    const ctx = canvas.getContext('2d')!;\n\n    const gradient = ctx.createRadialGradient(48, 48, 0, 48, 48, 42);\n    gradient.addColorStop(0, 'rgba(255,240,210,1)');\n    gradient.addColorStop(0.35, 'rgba(255,180,140,1)');\n    gradient.addColorStop(1, 'rgba(255,80,40,0.55)');\n\n    ctx.fillStyle = gradient;\n    ctx.beginPath();\n    ctx.arc(48, 48, 42, 0, Math.PI * 2);\n    ctx.fill();\n\n    return canvas;\n  }\n\n  private initializeMeteors(): void {\n    // Create 1-2 meteors per target position for precise strikes\n    for (let targetIndex = 0; targetIndex < this.targetPositions.length; targetIndex++) {\n      const target = this.targetPositions[targetIndex];\n      if (!target) {continue;}\n\n      const meteorsPerTarget = Math.random() < 0.3 ? 2 : Math.random() < 0.7 ? 3 : 4; // 30% for 2, 40% for 3, 30% for 4\n\n      for (let m = 0; m < meteorsPerTarget; m++) {\n        // Varied spawn positions for dramatic effect\n        const spawnAngle = Math.random() * Math.PI * 2;\n        const spawnDistance = 400 + Math.random() * 300;\n\n        const sx = target.x + Math.cos(spawnAngle) * spawnDistance;\n        const sy = target.y + Math.sin(spawnAngle) * spawnDistance - 200; // Bias upward\n\n        const dx = target.x - sx;\n        const dy = target.y - sy;\n        const distance = Math.sqrt(dx * dx + dy * dy) || 1;\n\n        // Calculate speed accounting for heavier gravity for more impact\n        const gravity = 250 + Math.random() * 150; // Increased for more weight\n        const speed = 800 + Math.random() * 200;\n\n        // Slight upward bias to account for gravity\n        const gravityCompensation = gravity * 0.3;\n        const adjustedVy = (dy / distance) * speed - gravityCompensation;\n\n        this.meteors.push({\n          x: sx,\n          y: sy,\n          vx: (dx / distance) * speed,\n          vy: adjustedVy,\n          rotation: Math.atan2(dy, dx),\n          gravity,\n          life: 1.8,\n          currentLife: 0,\n          trail: [],\n          scale: 1.2 + Math.random() * 0.6, // Increased scale for larger meteors\n          targetX: target.x,\n          targetY: target.y,\n          assignedTarget: target,\n        });\n      }\n    }\n  }\n\n  private spawnExplosion(x: number, y: number): void {\n    const sparkCount = 40 + Math.random() * 20; // More sparks for bigger impact\n    for (let i = 0; i < sparkCount; i++) {\n      this.sparks.push({\n        x,\n        y,\n        vx: (Math.random() - 0.5) * 2200, // Faster sparks\n        vy: (Math.random() - 0.5) * 1800 - 200,\n        life: 0.18 + Math.random() * 0.17,\n        currentLife: 0,\n      });\n    }\n\n    this.rings.push({\n      x,\n      y,\n      radius: 0,\n      maxRadius: 280, // Larger shockwave\n      life: 0.45,\n      currentLife: 0,\n    });\n\n    this.screenShake = Math.min(15, this.screenShake + 6.5); // More screen shake\n  }\n\n  public update(deltaTime: number): void {\n    this.currentTime += deltaTime;\n\n    if (this.currentTime >= this.duration) {\n      this.isComplete = true;\n      return;\n    }\n\n    this.screenShake = Math.max(0, this.screenShake - deltaTime * 18);\n\n    this.updateMeteors(deltaTime);\n    this.updateSparks(deltaTime);\n    this.updateRings(deltaTime);\n    this.updateTargetIndicators(deltaTime);\n  }\n\n  private updateMeteors(deltaTime: number): void {\n    for (let i = this.meteors.length - 1; i >= 0; i--) {\n      const meteor = this.meteors[i];\n      if (!meteor) {continue;}\n\n      meteor.currentLife += deltaTime;\n\n      // Apply gravity\n      meteor.vy += meteor.gravity * deltaTime;\n\n      // Add slight homing behavior (course correction)\n      const distanceToTarget = Math.sqrt(\n        (meteor.targetX - meteor.x) ** 2 + (meteor.targetY - meteor.y) ** 2,\n      );\n\n      if (distanceToTarget > 20 && meteor.currentLife < meteor.life * 0.8) {\n        // Apply gentle course correction for first 80% of flight\n        const homingStrength = 0.1; // 10% course correction\n        const targetDx = meteor.targetX - meteor.x;\n        const targetDy = meteor.targetY - meteor.y;\n        const targetDistance = Math.sqrt(targetDx * targetDx + targetDy * targetDy) || 1;\n\n        const homingVx = (targetDx / targetDistance) * 600;\n        const homingVy = (targetDy / targetDistance) * 600;\n\n        meteor.vx = meteor.vx * (1 - homingStrength) + homingVx * homingStrength;\n        meteor.vy = meteor.vy * (1 - homingStrength) + homingVy * homingStrength;\n\n        // Update rotation to match new direction\n        meteor.rotation = Math.atan2(meteor.vy, meteor.vx);\n      }\n\n      // Update position\n      meteor.x += meteor.vx * deltaTime;\n      meteor.y += meteor.vy * deltaTime;\n\n      meteor.trail.push({ x: meteor.x, y: meteor.y });\n      if (meteor.trail.length > 10) {\n        meteor.trail.shift();\n      }\n\n      // Check hit with assigned target (tighter detection)\n      const distanceToAssignedTarget = Math.sqrt(\n        (meteor.x - meteor.assignedTarget.x) ** 2 +\n        (meteor.y - meteor.assignedTarget.y) ** 2,\n      );\n\n      if (distanceToAssignedTarget < 20 || meteor.currentLife > meteor.life) {\n        this.spawnExplosion(meteor.x, meteor.y);\n        this.meteors.splice(i, 1);\n      }\n    }\n  }\n\n  private updateSparks(deltaTime: number): void {\n    for (let i = this.sparks.length - 1; i >= 0; i--) {\n      const spark = this.sparks[i];\n      if (!spark) {continue;}\n\n      spark.currentLife += deltaTime;\n\n      if (spark.currentLife > spark.life) {\n        this.sparks.splice(i, 1);\n        continue;\n      }\n\n      spark.vy += 1400 * deltaTime;\n      spark.x += spark.vx * deltaTime;\n      spark.y += spark.vy * deltaTime;\n    }\n  }\n\n  private updateRings(deltaTime: number): void {\n    for (let i = this.rings.length - 1; i >= 0; i--) {\n      const ring = this.rings[i];\n      if (!ring) {continue;}\n\n      ring.currentLife += deltaTime * 2.2;\n\n      if (ring.currentLife >= ring.life) {\n        this.rings.splice(i, 1);\n        continue;\n      }\n\n      ring.radius = 24 + (ring.currentLife / ring.life) * ring.maxRadius;\n    }\n  }\n\n  private updateTargetIndicators(deltaTime: number): void {\n    for (let i = this.targetIndicators.length - 1; i >= 0; i--) {\n      const indicator = this.targetIndicators[i];\n      if (!indicator) {continue;}\n\n      indicator.life -= deltaTime;\n\n      if (indicator.life <= 0) {\n        this.targetIndicators.splice(i, 1);\n      }\n    }\n  }\n\n  public render(ctx: CanvasRenderingContext2D): void {\n    if (this.isComplete) {return;}\n\n    const age = this.currentTime / this.duration;\n    const fadeIn = Math.min(1, age / 0.12);\n    const fadeOut = Math.min(1, (this.duration - this.currentTime) / 0.25);\n    const alpha = Math.min(fadeIn, fadeOut);\n\n    ctx.save();\n\n    if (this.screenShake > 0) {\n      const shakeX = (Math.random() - 0.5) * this.screenShake * 2;\n      const shakeY = (Math.random() - 0.5) * this.screenShake * 2;\n      ctx.translate(shakeX, shakeY);\n    }\n\n    this.renderTargetIndicators(ctx, alpha);\n    this.renderMeteors(ctx, alpha);\n    this.renderRings(ctx, alpha);\n    this.renderSparks(ctx, alpha);\n\n    ctx.restore();\n  }\n\n  private renderMeteors(ctx: CanvasRenderingContext2D, alpha: number): void {\n    ctx.save();\n    ctx.globalCompositeOperation = 'lighter';\n\n    for (const meteor of this.meteors) {\n      this.renderMeteorTrail(ctx, meteor, alpha);\n      this.renderMeteorHead(ctx, meteor, alpha);\n    }\n\n    ctx.restore();\n  }\n\n  private renderMeteorTrail(ctx: CanvasRenderingContext2D, meteor: Meteor, alpha: number): void {\n    if (meteor.trail.length < 2) {return;}\n\n    for (let i = 0; i < meteor.trail.length - 1; i++) {\n      const current = meteor.trail[i];\n      const next = meteor.trail[i + 1];\n      if (!current || !next) {continue;}\n\n      const progress = i / (meteor.trail.length - 1);\n      const width = 35 * (1 - progress); // Thicker trails for more impact\n\n      ctx.globalAlpha = alpha * 0.35 * (1 - progress);\n      ctx.strokeStyle = 'rgba(255,90,50,0.35)';\n      ctx.lineWidth = width;\n      ctx.lineCap = 'round';\n\n      ctx.beginPath();\n      ctx.moveTo(current.x, current.y);\n      ctx.lineTo(next.x, next.y);\n      ctx.stroke();\n    }\n  }\n\n  private renderMeteorHead(ctx: CanvasRenderingContext2D, meteor: Meteor, alpha: number): void {\n    ctx.save();\n    ctx.globalAlpha = alpha;\n    ctx.translate(meteor.x, meteor.y);\n    ctx.rotate(meteor.rotation);\n    ctx.scale(meteor.scale, meteor.scale);\n    ctx.drawImage(this.meteorHead, -48, -48, 96, 96); // Larger meteor sprite rendering\n    ctx.restore();\n  }\n\n  private renderSparks(ctx: CanvasRenderingContext2D, alpha: number): void {\n    ctx.save();\n    ctx.globalCompositeOperation = 'lighter';\n\n    for (const spark of this.sparks) {\n      const life = 1 - (spark.currentLife / spark.life);\n      ctx.globalAlpha = alpha * life;\n      ctx.strokeStyle = 'rgba(255,210,160,0.95)';\n      ctx.lineWidth = 2;\n\n      ctx.beginPath();\n      ctx.moveTo(spark.x - 2, spark.y);\n      ctx.lineTo(spark.x + 2, spark.y);\n      ctx.moveTo(spark.x, spark.y - 2);\n      ctx.lineTo(spark.x, spark.y + 2);\n      ctx.stroke();\n    }\n\n    ctx.restore();\n  }\n\n  private renderRings(ctx: CanvasRenderingContext2D, alpha: number): void {\n    ctx.save();\n    ctx.globalCompositeOperation = 'lighter';\n\n    for (const ring of this.rings) {\n      const life = 1 - (ring.currentLife / ring.life);\n      ctx.globalAlpha = alpha * life;\n      ctx.strokeStyle = 'rgba(255,140,90,0.7)';\n      ctx.lineWidth = 3 + 7 * life;\n\n      ctx.beginPath();\n      ctx.arc(ring.x, ring.y, ring.radius, 0, Math.PI * 2);\n      ctx.stroke();\n    }\n\n    ctx.restore();\n  }\n\n  public getScreenShake(): number {\n    return this.screenShake;\n  }\n\n  private renderTargetIndicators(ctx: CanvasRenderingContext2D, alpha: number): void {\n    ctx.save();\n    ctx.globalCompositeOperation = 'lighter';\n\n    for (const indicator of this.targetIndicators) {\n      const life = indicator.life / indicator.maxLife;\n      const pulse = 0.5 + 0.5 * Math.sin(this.currentTime * 15); // Fast pulse\n\n      ctx.globalAlpha = alpha * life * pulse;\n\n      // Draw crosshair target indicator\n      ctx.strokeStyle = 'rgba(255,100,50,0.8)';\n      ctx.lineWidth = 2;\n\n      const size = 15 + (1 - life) * 10; // Expand as it fades\n\n      ctx.beginPath();\n      ctx.moveTo(indicator.x - size, indicator.y);\n      ctx.lineTo(indicator.x + size, indicator.y);\n      ctx.moveTo(indicator.x, indicator.y - size);\n      ctx.lineTo(indicator.x, indicator.y + size);\n      ctx.stroke();\n\n      // Draw outer ring\n      ctx.beginPath();\n      ctx.arc(indicator.x, indicator.y, size * 0.7, 0, Math.PI * 2);\n      ctx.stroke();\n    }\n\n    ctx.restore();\n  }\n\n  public isFinished(): boolean {\n    return this.isComplete;\n  }\n}","/**\n * Ice Spear Abyss Effect (滅劍羅淵)\n * A-tier special effect with directional ice spears\n */\n\nexport interface Position {\n  x: number;\n  y: number;\n}\n\ninterface IceSpear {\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  rotation: number;\n  life: number;\n  currentLife: number;\n  trail: Array<{x: number, y: number}>;\n  scale: number;\n  targetX: number;\n  targetY: number;\n}\n\ninterface IceShard {\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  rotation: number;\n  rotationSpeed: number;\n  life: number;\n  currentLife: number;\n}\n\ninterface ShockRing {\n  x: number;\n  y: number;\n  radius: number;\n  maxRadius: number;\n  life: number;\n  currentLife: number;\n}\n\nexport class IceSpearEffect {\n  private x: number;\n  private y: number;\n  private targetPositions: Position[];\n  private iceSpears: IceSpear[] = [];\n  private iceShards: IceShard[] = [];\n  private shockRings: ShockRing[] = [];\n  private duration: number = 1.5;\n  private currentTime: number = 0;\n  private isComplete: boolean = false;\n  private screenShake: number = 0;\n  private frostCoreTime: number = 0;\n  private iceSpearSprite: HTMLCanvasElement;\n  public dead: boolean = false;\n\n  constructor(x: number, y: number, targetPositions: Position[] = []) {\n    this.x = x;\n    this.y = y;\n    this.targetPositions = targetPositions.length > 0 ? targetPositions : [{ x, y }];\n    this.iceSpearSprite = this.createIceSpearSprite();\n    this.initializeIceSpears();\n  }\n\n  private createIceSpearSprite(): HTMLCanvasElement {\n    const canvas = document.createElement('canvas');\n    canvas.width = 26;\n    canvas.height = 140;\n    const ctx = canvas.getContext('2d')!;\n\n    // Outer frost glow\n    const glowGradient = ctx.createLinearGradient(0, 0, 0, 140);\n    glowGradient.addColorStop(0, 'rgba(190,230,255,0.00)');\n    glowGradient.addColorStop(0.1, 'rgba(190,230,255,0.20)');\n    glowGradient.addColorStop(0.9, 'rgba(190,230,255,0.20)');\n    glowGradient.addColorStop(1, 'rgba(190,230,255,0.00)');\n    ctx.fillStyle = glowGradient;\n    ctx.fillRect(0, 0, 26, 140);\n\n    // Ice blade main body\n    ctx.fillStyle = 'rgba(190,230,255,0.95)';\n    ctx.beginPath();\n    ctx.moveTo(13, 0);\n    ctx.lineTo(20, 100);\n    ctx.lineTo(13, 140);\n    ctx.lineTo(6, 100);\n    ctx.closePath();\n    ctx.fill();\n\n    // Core highlight\n    ctx.fillStyle = 'rgba(255,255,255,0.95)';\n    ctx.fillRect(12, 12, 2, 112);\n\n    return canvas;\n  }\n\n  private initializeIceSpears(): void {\n    // Create 2-3 ice spears per target for precise strikes\n    for (const target of this.targetPositions) {\n      const spearsPerTarget = Math.random() < 0.4 ? 2 : 3; // 60% chance for 3 spears, 40% for 2\n\n      for (let i = 0; i < spearsPerTarget; i++) {\n        // Spawn positions around the target with some spread\n        const angle = Math.random() * Math.PI * 2;\n        const distance = 350 + Math.random() * 200;\n\n        const sx = target.x + Math.cos(angle) * distance;\n        const sy = target.y + Math.sin(angle) * distance - 150; // Bias upward\n\n        const dx = target.x - sx;\n        const dy = target.y - sy;\n        const totalDistance = Math.sqrt(dx * dx + dy * dy) || 1;\n\n        const speed = 900 + Math.random() * 400; // Fast ice spears\n\n        this.iceSpears.push({\n          x: sx,\n          y: sy,\n          vx: (dx / totalDistance) * speed,\n          vy: (dy / totalDistance) * speed,\n          rotation: Math.atan2(dy, dx) + Math.PI / 2, // Add 90° for sprite orientation\n          life: 0.45 + Math.random() * 0.45,\n          currentLife: 0,\n          trail: [],\n          scale: 0.8 + Math.random() * 0.4,\n          targetX: target.x,\n          targetY: target.y,\n        });\n      }\n    }\n  }\n\n  private spawnIceShards(x: number, y: number, count: number = 22): void {\n    for (let i = 0; i < count; i++) {\n      const angle = Math.random() * Math.PI * 2;\n      const speed = 300 + Math.random() * 600;\n\n      this.iceShards.push({\n        x,\n        y,\n        vx: Math.cos(angle) * speed,\n        vy: Math.sin(angle) * speed,\n        rotation: Math.random() * Math.PI * 2,\n        rotationSpeed: (Math.random() - 0.5) * 16,\n        life: 0.18 + Math.random() * 0.2,\n        currentLife: 0,\n      });\n    }\n  }\n\n  private addShockRing(x: number, y: number): void {\n    this.shockRings.push({\n      x,\n      y,\n      radius: 0,\n      maxRadius: 200,\n      life: 0.45,\n      currentLife: 0,\n    });\n  }\n\n  public update(deltaTime: number): void {\n    this.currentTime += deltaTime;\n\n    if (this.currentTime >= this.duration) {\n      this.isComplete = true;\n      this.dead = true;\n      return;\n    }\n\n    this.screenShake = Math.max(0, this.screenShake - deltaTime * 16);\n    this.frostCoreTime += deltaTime * 3;\n\n    // Spawn new ice spears during first 60% of effect\n    const progress = this.currentTime / this.duration;\n    if (progress < 0.6 && Math.random() < 18 * deltaTime) {\n      // Randomly add a few more spears for intensity\n      if (Math.random() < 0.5) {\n        const extraSpears = Math.random() < 0.5 ? 2 : 3;\n        const randomTarget = this.targetPositions[Math.floor(Math.random() * this.targetPositions.length)];\n        if (randomTarget) {\n          for (let i = 0; i < extraSpears; i++) {\n            const angle = Math.random() * Math.PI * 2;\n            const distance = 300 + Math.random() * 250;\n\n            const sx = randomTarget.x + Math.cos(angle) * distance;\n            const sy = randomTarget.y + Math.sin(angle) * distance - 100;\n\n            const dx = randomTarget.x - sx;\n            const dy = randomTarget.y - sy;\n            const totalDistance = Math.sqrt(dx * dx + dy * dy) || 1;\n\n            const speed = 900 + Math.random() * 400;\n\n            this.iceSpears.push({\n              x: sx,\n              y: sy,\n              vx: (dx / totalDistance) * speed,\n              vy: (dy / totalDistance) * speed,\n              rotation: Math.atan2(dy, dx) + Math.PI / 2,\n              life: 0.45 + Math.random() * 0.45,\n              currentLife: 0,\n              trail: [],\n              scale: 0.8 + Math.random() * 0.4,\n              targetX: randomTarget.x,\n              targetY: randomTarget.y,\n            });\n          }\n        }\n      }\n    }\n\n    this.updateIceSpears(deltaTime);\n    this.updateIceShards(deltaTime);\n    this.updateShockRings(deltaTime);\n  }\n\n  private updateIceSpears(deltaTime: number): void {\n    for (let i = this.iceSpears.length - 1; i >= 0; i--) {\n      const spear = this.iceSpears[i];\n      if (!spear) {continue;}\n\n      spear.currentLife += deltaTime;\n\n      spear.x += spear.vx * deltaTime;\n      spear.y += spear.vy * deltaTime;\n\n      // Add to trail\n      spear.trail.push({ x: spear.x, y: spear.y });\n      if (spear.trail.length > 12) {\n        spear.trail.shift();\n      }\n\n      // Check if spear should explode (lifespan or near target)\n      const distanceToTarget = Math.sqrt(\n        (spear.x - spear.targetX) ** 2 + (spear.y - spear.targetY) ** 2,\n      );\n\n      if (spear.currentLife > spear.life || distanceToTarget < 25) {\n        this.spawnIceShards(spear.x, spear.y, 28);\n        this.addShockRing(spear.x, spear.y);\n        this.screenShake = Math.min(8, this.screenShake + 2.5);\n        this.iceSpears.splice(i, 1);\n      }\n    }\n  }\n\n  private updateIceShards(deltaTime: number): void {\n    for (let i = this.iceShards.length - 1; i >= 0; i--) {\n      const shard = this.iceShards[i];\n      if (!shard) {continue;}\n\n      shard.currentLife += deltaTime;\n\n      if (shard.currentLife > shard.life) {\n        this.iceShards.splice(i, 1);\n        continue;\n      }\n\n      shard.vy += 900 * deltaTime; // Gravity\n      shard.x += shard.vx * deltaTime;\n      shard.y += shard.vy * deltaTime;\n      shard.rotation += shard.rotationSpeed * deltaTime;\n    }\n  }\n\n  private updateShockRings(deltaTime: number): void {\n    for (let i = this.shockRings.length - 1; i >= 0; i--) {\n      const ring = this.shockRings[i];\n      if (!ring) {continue;}\n\n      ring.currentLife += deltaTime * 2.2;\n\n      if (ring.currentLife >= ring.life) {\n        this.shockRings.splice(i, 1);\n        continue;\n      }\n\n      ring.radius = 18 + (ring.currentLife / ring.life) * ring.maxRadius;\n    }\n  }\n\n  public draw(ctx: CanvasRenderingContext2D): void {\n    if (this.isComplete) {return;}\n\n    const age = this.currentTime / this.duration;\n    const fadeIn = Math.min(1, age / 0.12);\n    const fadeOut = Math.min(1, (this.duration - this.currentTime) / 0.25);\n    const alpha = Math.min(fadeIn, fadeOut);\n\n    ctx.save();\n\n    // Apply screen shake\n    if (this.screenShake > 0) {\n      const shakeX = (Math.random() - 0.5) * this.screenShake * 2;\n      const shakeY = (Math.random() - 0.5) * this.screenShake * 2;\n      ctx.translate(shakeX, shakeY);\n    }\n\n    this.drawFrostCore(ctx, alpha);\n    this.drawIceSpears(ctx, alpha);\n    this.drawShockRings(ctx, alpha);\n    this.drawIceShards(ctx, alpha);\n\n    ctx.restore();\n  }\n\n  private drawFrostCore(ctx: CanvasRenderingContext2D, alpha: number): void {\n    ctx.save();\n    ctx.globalCompositeOperation = 'lighter';\n\n    const radius = 140 + 40 * Math.sin(this.frostCoreTime * 6);\n    const gradient = ctx.createRadialGradient(this.x, this.y, 0, this.x, this.y, radius);\n    gradient.addColorStop(0, `rgba(220,240,255,${0.5 * alpha})`);\n    gradient.addColorStop(1, 'rgba(220,240,255,0)');\n\n    ctx.fillStyle = gradient;\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, radius, 0, Math.PI * 2);\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  private drawIceSpears(ctx: CanvasRenderingContext2D, alpha: number): void {\n    for (const spear of this.iceSpears) {\n      // Draw frost trail\n      ctx.save();\n      ctx.globalCompositeOperation = 'lighter';\n\n      for (let k = 0; k < spear.trail.length - 1; k++) {\n        const current = spear.trail[k];\n        const next = spear.trail[k + 1];\n        if (!current || !next) {continue;}\n\n        const progress = k / (spear.trail.length - 1);\n        const width = 18 * (1 - progress);\n\n        ctx.globalAlpha = alpha * 0.35 * (1 - progress);\n        ctx.strokeStyle = 'rgba(150,210,255,0.40)';\n        ctx.lineCap = 'round';\n        ctx.lineWidth = width;\n\n        ctx.beginPath();\n        ctx.moveTo(current.x, current.y);\n        ctx.lineTo(next.x, next.y);\n        ctx.stroke();\n      }\n\n      // Draw ice spear sprite\n      ctx.globalAlpha = alpha;\n      ctx.translate(spear.x, spear.y);\n      ctx.rotate(spear.rotation);\n      const scale = spear.scale * (0.8 + Math.min(0.7, spear.currentLife * 1.1));\n      ctx.scale(scale, scale);\n      ctx.drawImage(this.iceSpearSprite, -13, -20);\n\n      ctx.restore();\n    }\n  }\n\n  private drawIceShards(ctx: CanvasRenderingContext2D, alpha: number): void {\n    ctx.save();\n    ctx.globalCompositeOperation = 'lighter';\n\n    for (const shard of this.iceShards) {\n      const life = 1 - (shard.currentLife / shard.life);\n      ctx.globalAlpha = alpha * life;\n\n      ctx.save();\n      ctx.translate(shard.x, shard.y);\n      ctx.rotate(shard.rotation);\n\n      ctx.strokeStyle = 'rgba(210,240,255,0.95)';\n      ctx.lineWidth = 2;\n\n      ctx.beginPath();\n      ctx.moveTo(-3, 0);\n      ctx.lineTo(3, 0);\n      ctx.moveTo(0, -3);\n      ctx.lineTo(0, 3);\n      ctx.stroke();\n\n      ctx.restore();\n    }\n\n    ctx.restore();\n  }\n\n  private drawShockRings(ctx: CanvasRenderingContext2D, alpha: number): void {\n    ctx.save();\n    ctx.globalCompositeOperation = 'lighter';\n\n    for (const ring of this.shockRings) {\n      const life = 1 - (ring.currentLife / ring.life);\n      ctx.globalAlpha = alpha * life;\n      ctx.strokeStyle = 'rgba(180,220,255,0.70)';\n      ctx.lineWidth = 2 + 6 * life;\n\n      ctx.beginPath();\n      ctx.arc(ring.x, ring.y, ring.radius, 0, Math.PI * 2);\n      ctx.stroke();\n    }\n\n    ctx.restore();\n  }\n}","/**\r\n * Particle Effects System for Super Reversi\r\n *\r\n * Creates visual effects based on move quality grades\r\n */\r\n\r\nimport { PARTICLE_PRESETS, getPresetForGrade, type ParticlePresetConfig } from './effects/particle-presets';\r\nimport { GreenLotusEffect, type Position } from './effects/green-lotus-effect';\r\nimport { UnlimitedBladeWorksEffect } from './effects/unlimited-blade-works';\r\nimport { DivineSwordThunderEffect } from './effects/divine-sword-thunder';\r\nimport { NineFinaleEffect } from './effects/nine-finale-effect';\r\nimport { IceSpearEffect } from './effects/ice-spear-effect';\r\n\r\nexport type Grade = 'C' | 'B' | 'A' | 'S' | 'SS' | 'SSS';\r\n\r\nexport interface SpecialEffect {\r\n  corner?: boolean;\r\n  edge?: boolean;\r\n  massive?: boolean;  // 10+ flips\r\n  chain?: boolean;    // Triggered by previous move\r\n  firstMove?: boolean;\r\n  comeback?: boolean; // When losing player makes good move\r\n  domination?: boolean; // When winning player extends lead\r\n}\r\n\r\nexport interface Particle {\r\n  x: number;\r\n  y: number;\r\n  vx: number;\r\n  vy: number;\r\n  life: number;\r\n  maxLife: number;\r\n  size: number;\r\n  color: string;\r\n  alpha: number;\r\n  type: 'circle' | 'star' | 'spark' | 'text';\r\n  text?: string; // 用於文字粒子\r\n  fontSize?: number; // 文字大小\r\n}\r\n\r\nexport interface FlySwordConfig {\r\n  color: string;\r\n  trailColor: string;\r\n  size: number;\r\n  speed: number;\r\n  glowIntensity: number;\r\n}\r\n\r\nexport class FlySword {\r\n  public pos: { x: number; y: number };\r\n  public vel: { x: number; y: number };\r\n  public target: { x: number; y: number } | null;\r\n  public tail: Array<{ x: number; y: number }>;\r\n  public alive: boolean;\r\n  public life: number;\r\n  public maxLife: number;\r\n  private tailLength: number;\r\n  private config: FlySwordConfig;\r\n\r\n  constructor(x: number, y: number, target: { x: number; y: number } | null, config: FlySwordConfig) {\r\n    this.pos = { x, y };\r\n    this.vel = { x: 0, y: -6 };\r\n    this.target = target;\r\n    this.tail = [];\r\n    this.tailLength = 20; // Shorter trail for cleaner effect\r\n    this.alive = true;\r\n    this.life = 2.0;      // Reduced visibility duration\r\n    this.maxLife = 2.0;\r\n    this.config = config;\r\n\r\n    console.log(`🗡️ FlySword created at (${x}, ${y}) targeting (${target?.x}, ${target?.y})`);\r\n  }\r\n\r\n  update(): void {\r\n    if (!this.alive) {return;}\r\n\r\n    // Update life\r\n    this.life -= 0.016; // ~60fps\r\n    if (this.life <= 0) {\r\n      this.alive = false;\r\n      return;\r\n    }\r\n\r\n    // Simple guidance towards target\r\n    if (this.target) {\r\n      const dx = this.target.x - this.pos.x;\r\n      const dy = this.target.y - this.pos.y;\r\n      const distance = Math.hypot(dx, dy);\r\n\r\n      if (distance > 5) {\r\n        // Gradually steer towards target\r\n        this.vel.x += (dx / distance) * 0.4;\r\n        this.vel.y += (dy / distance) * 0.4;\r\n\r\n        // Limit speed\r\n        const speed = Math.hypot(this.vel.x, this.vel.y);\r\n        if (speed > this.config.speed) {\r\n          this.vel.x *= this.config.speed / speed;\r\n          this.vel.y *= this.config.speed / speed;\r\n        }\r\n      } else {\r\n        // Close to target, mark for death\r\n        this.life = Math.min(this.life, 0.3);\r\n      }\r\n    }\r\n\r\n    // Update position\r\n    this.pos.x += this.vel.x;\r\n    this.pos.y += this.vel.y;\r\n\r\n    // Update tail\r\n    this.tail.push({ x: this.pos.x, y: this.pos.y });\r\n    if (this.tail.length > this.tailLength) {\r\n      this.tail.shift();\r\n    }\r\n  }\r\n\r\n  draw(ctx: CanvasRenderingContext2D): void {\r\n    if (!this.alive || this.tail.length < 2) {return;}\r\n\r\n    const alpha = this.life / this.maxLife;\r\n\r\n    // Draw glowing trail\r\n    ctx.save();\r\n    ctx.globalCompositeOperation = 'lighter';\r\n\r\n    for (let i = 1; i < this.tail.length; i++) {\r\n      const prev = this.tail[i - 1];\r\n      const curr = this.tail[i];\r\n      if (!prev || !curr) {continue;}\r\n\r\n      const trailAlpha = (i / this.tail.length) * alpha * 0.6;\r\n      ctx.strokeStyle = this.config.trailColor.replace('1)', `${trailAlpha})`);\r\n      ctx.lineWidth = 2 + i / 3;\r\n      ctx.beginPath();\r\n      ctx.moveTo(prev.x, prev.y);\r\n      ctx.lineTo(curr.x, curr.y);\r\n      ctx.stroke();\r\n    }\r\n\r\n    ctx.restore();\r\n\r\n    // Draw sword body\r\n    const angle = Math.atan2(this.vel.y, this.vel.x);\r\n    ctx.save();\r\n    ctx.translate(this.pos.x, this.pos.y);\r\n    ctx.rotate(angle);\r\n\r\n    // Apply glow effect\r\n    ctx.shadowColor = this.config.color;\r\n    ctx.shadowBlur = this.config.glowIntensity * alpha;\r\n    ctx.globalAlpha = alpha;\r\n\r\n    // Sword body (rectangle)\r\n    ctx.fillStyle = this.config.color;\r\n    ctx.fillRect(-this.config.size, -2, this.config.size, 4);\r\n\r\n    // Sword tip (triangle)\r\n    ctx.fillStyle = this.config.color;\r\n    ctx.beginPath();\r\n    ctx.moveTo(0, 0);\r\n    ctx.lineTo(this.config.size * 0.3, -3);\r\n    ctx.lineTo(this.config.size * 0.3, 3);\r\n    ctx.closePath();\r\n    ctx.fill();\r\n\r\n    ctx.restore();\r\n  }\r\n}\r\n\r\nexport class ParticleSystem {\r\n  private canvas: HTMLCanvasElement;\r\n  private ctx: CanvasRenderingContext2D;\r\n  private particles: Particle[] = [];\r\n  private swords: FlySword[] = [];\r\n  private greenLotusEffects: GreenLotusEffect[] = [];\r\n  private ubwEffects: UnlimitedBladeWorksEffect[] = [];\r\n  private divineThunderEffects: DivineSwordThunderEffect[] = [];\r\n  private nineFinaleEffects: NineFinaleEffect[] = [];\r\n  private iceSpearEffects: IceSpearEffect[] = [];\r\n  private animationId: number | null = null;\r\n  private lastTime = 0;\r\n  private enabled = true;\r\n\r\n  constructor() {\r\n    // Create canvas for particles\r\n    this.canvas = document.createElement('canvas');\r\n    this.canvas.id = 'particle-canvas';\r\n    this.canvas.style.position = 'absolute';\r\n    this.canvas.style.top = '0';\r\n    this.canvas.style.left = '0';\r\n    this.canvas.style.pointerEvents = 'none';\r\n    this.canvas.style.zIndex = '100';\r\n\r\n    const ctx = this.canvas.getContext('2d');\r\n    if (!ctx) {throw new Error('Could not get canvas context');}\r\n    this.ctx = ctx;\r\n  }\r\n\r\n  initialize(container: HTMLElement): void {\r\n    // Set canvas size\r\n    const rect = container.getBoundingClientRect();\r\n    this.canvas.width = rect.width;\r\n    this.canvas.height = rect.height;\r\n\r\n    // Add to container\r\n    container.style.position = 'relative';\r\n    container.appendChild(this.canvas);\r\n\r\n    // Start animation loop only if enabled\r\n    if (this.enabled) {\r\n      this.startAnimation();\r\n    }\r\n  }\r\n\r\n  setEnabled(enabled: boolean): void {\r\n    this.enabled = enabled;\r\n    if (enabled) {\r\n      if (!this.animationId) {\r\n        this.startAnimation();\r\n      }\r\n    } else {\r\n      this.stopAnimation();\r\n      this.clearParticles();\r\n    }\r\n  }\r\n\r\n  private stopAnimation(): void {\r\n    if (this.animationId) {\r\n      cancelAnimationFrame(this.animationId);\r\n      this.animationId = null;\r\n    }\r\n  }\r\n\r\n  private clearParticles(): void {\r\n    this.particles = [];\r\n    this.swords = [];\r\n    this.greenLotusEffects = [];\r\n    this.ubwEffects = [];\r\n    this.divineThunderEffects = [];\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n  }\r\n\r\n  private startAnimation(): void {\r\n    const animate = (time: number) => {\r\n      const deltaTime = time - this.lastTime;\r\n      this.lastTime = time;\r\n\r\n      this.update(deltaTime / 1000); // Convert to seconds\r\n      this.render();\r\n\r\n      this.animationId = requestAnimationFrame(animate);\r\n    };\r\n\r\n    this.animationId = requestAnimationFrame(animate);\r\n  }\r\n\r\n  private update(deltaTime: number): void {\r\n    // Update all particles\r\n    for (let i = this.particles.length - 1; i >= 0; i--) {\r\n      const p = this.particles[i];\r\n      if (!p) {continue;}\r\n\r\n      // Update position\r\n      p.x += p.vx * deltaTime;\r\n      p.y += p.vy * deltaTime;\r\n\r\n      // Update life\r\n      p.life -= deltaTime;\r\n\r\n      // Update alpha based on life\r\n      p.alpha = Math.max(0, p.life / p.maxLife);\r\n\r\n      // Apply gravity for some effects\r\n      if (p.type === 'spark') {\r\n        p.vy += 200 * deltaTime; // Gravity\r\n      }\r\n\r\n      // Remove dead particles\r\n      if (p.life <= 0) {\r\n        this.particles.splice(i, 1);\r\n      }\r\n    }\r\n\r\n    // Update all swords\r\n    for (let i = this.swords.length - 1; i >= 0; i--) {\r\n      const sword = this.swords[i];\r\n      if (!sword) {continue;}\r\n\r\n      sword.update();\r\n\r\n      // Remove dead swords\r\n      if (!sword.alive) {\r\n        this.swords.splice(i, 1);\r\n      }\r\n    }\r\n\r\n    // Update all green lotus effects\r\n    for (let i = this.greenLotusEffects.length - 1; i >= 0; i--) {\r\n      const effect = this.greenLotusEffects[i];\r\n      if (!effect) {continue;}\r\n\r\n      effect.update(deltaTime);\r\n\r\n      // Remove dead effects\r\n      if (effect.dead) {\r\n        this.greenLotusEffects.splice(i, 1);\r\n      }\r\n    }\r\n\r\n    // Update all UBW effects\r\n    for (let i = this.ubwEffects.length - 1; i >= 0; i--) {\r\n      const effect = this.ubwEffects[i];\r\n      if (!effect) {continue;}\r\n\r\n      effect.update(deltaTime);\r\n\r\n      // Remove dead effects\r\n      if (effect.dead) {\r\n        this.ubwEffects.splice(i, 1);\r\n      }\r\n    }\r\n\r\n    // Update all Divine Thunder effects\r\n    for (let i = this.divineThunderEffects.length - 1; i >= 0; i--) {\r\n      const effect = this.divineThunderEffects[i];\r\n      if (!effect) {continue;}\r\n\r\n      effect.update(deltaTime);\r\n\r\n      // Remove dead effects\r\n      if (effect.dead) {\r\n        this.divineThunderEffects.splice(i, 1);\r\n      }\r\n    }\r\n\r\n    // Update all Nine Finale effects\r\n    for (let i = this.nineFinaleEffects.length - 1; i >= 0; i--) {\r\n      const effect = this.nineFinaleEffects[i];\r\n      if (!effect) {continue;}\r\n\r\n      effect.update(deltaTime);\r\n\r\n      // Remove finished effects\r\n      if (effect.isFinished()) {\r\n        this.nineFinaleEffects.splice(i, 1);\r\n      }\r\n    }\r\n\r\n    // Update all Ice Spear effects\r\n    for (let i = this.iceSpearEffects.length - 1; i >= 0; i--) {\r\n      const effect = this.iceSpearEffects[i];\r\n      if (!effect) {continue;}\r\n\r\n      effect.update(deltaTime);\r\n\r\n      // Remove dead effects\r\n      if (effect.dead) {\r\n        this.iceSpearEffects.splice(i, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  private render(): void {\r\n    // Clear canvas\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n    // Draw all particles\r\n    for (const p of this.particles) {\r\n      this.ctx.save();\r\n      this.ctx.globalAlpha = p.alpha;\r\n\r\n      if (p.type === 'circle') {\r\n        this.drawCircle(p);\r\n      } else if (p.type === 'star') {\r\n        this.drawStar(p);\r\n      } else if (p.type === 'spark') {\r\n        this.drawSpark(p);\r\n      } else if (p.type === 'text') {\r\n        this.drawText(p);\r\n      }\r\n\r\n      this.ctx.restore();\r\n    }\r\n\r\n    // Draw all swords\r\n    for (const sword of this.swords) {\r\n      sword.draw(this.ctx);\r\n    }\r\n\r\n    // Draw all green lotus effects\r\n    for (const effect of this.greenLotusEffects) {\r\n      effect.draw(this.ctx);\r\n    }\r\n\r\n    // Draw all UBW effects\r\n    for (const effect of this.ubwEffects) {\r\n      effect.draw(this.ctx);\r\n    }\r\n\r\n    // Draw all Divine Thunder effects\r\n    for (const effect of this.divineThunderEffects) {\r\n      effect.draw(this.ctx);\r\n    }\r\n\r\n    // Draw all Nine Finale effects\r\n    for (const effect of this.nineFinaleEffects) {\r\n      effect.render(this.ctx);\r\n    }\r\n\r\n    // Draw all Ice Spear effects\r\n    for (const effect of this.iceSpearEffects) {\r\n      effect.draw(this.ctx);\r\n    }\r\n  }\r\n\r\n  private drawCircle(p: Particle): void {\r\n    this.ctx.beginPath();\r\n    this.ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);\r\n    this.ctx.fillStyle = p.color;\r\n    this.ctx.fill();\r\n\r\n    // Add glow effect\r\n    this.ctx.shadowBlur = 10;\r\n    this.ctx.shadowColor = p.color;\r\n    this.ctx.fill();\r\n  }\r\n\r\n  private drawStar(p: Particle): void {\r\n    const spikes = 5;\r\n    const outerRadius = p.size;\r\n    const innerRadius = p.size * 0.5;\r\n\r\n    this.ctx.beginPath();\r\n    this.ctx.translate(p.x, p.y);\r\n\r\n    for (let i = 0; i < spikes * 2; i++) {\r\n      const radius = i % 2 === 0 ? outerRadius : innerRadius;\r\n      const angle = (i * Math.PI) / spikes;\r\n      const x = Math.cos(angle) * radius;\r\n      const y = Math.sin(angle) * radius;\r\n\r\n      if (i === 0) {\r\n        this.ctx.moveTo(x, y);\r\n      } else {\r\n        this.ctx.lineTo(x, y);\r\n      }\r\n    }\r\n\r\n    this.ctx.closePath();\r\n    this.ctx.fillStyle = p.color;\r\n    this.ctx.fill();\r\n\r\n    this.ctx.translate(-p.x, -p.y);\r\n  }\r\n\r\n  private drawSpark(p: Particle): void {\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(p.x, p.y);\r\n    this.ctx.lineTo(p.x - p.vx * 0.1, p.y - p.vy * 0.1);\r\n    this.ctx.strokeStyle = p.color;\r\n    this.ctx.lineWidth = p.size;\r\n    this.ctx.lineCap = 'round';\r\n    this.ctx.stroke();\r\n  }\r\n\r\n  private drawText(p: Particle): void {\r\n    if (!p.text || !p.fontSize) {return;}\r\n\r\n    // 設定文字樣式\r\n    this.ctx.font = `bold ${p.fontSize}px Arial, sans-serif`;\r\n    this.ctx.textAlign = 'center';\r\n    this.ctx.textBaseline = 'middle';\r\n    this.ctx.fillStyle = p.color;\r\n\r\n    // 新增發光效果\r\n    this.ctx.shadowBlur = 15;\r\n    this.ctx.shadowColor = p.color;\r\n\r\n    // 新增描邊效果讓文字更突出\r\n    this.ctx.strokeStyle = 'rgba(0, 0, 0, 0.8)';\r\n    this.ctx.lineWidth = 3;\r\n    this.ctx.strokeText(p.text, p.x, p.y);\r\n\r\n    // 填充文字\r\n    this.ctx.fillText(p.text, p.x, p.y);\r\n  }\r\n\r\n  // Enhanced move grade calculation with special effects\r\n  calculateGrade(flippedCount: number, position: number, specialEffects?: SpecialEffect): Grade {\r\n    // Corner positions are special\r\n    const isCorner = position === 0 || position === 7 || position === 56 || position === 63;\r\n\r\n    // Edge positions (not corners)\r\n    const row = Math.floor(position / 8);\r\n    const col = position % 8;\r\n    const isEdge = row === 0 || row === 7 || col === 0 || col === 7;\r\n\r\n    let score = flippedCount * 10;\r\n\r\n    // Bonus for strategic positions\r\n    if (isCorner) {score += 60;}\r\n    else if (isEdge) {score += 20;}\r\n\r\n    // Special bonuses\r\n    if (specialEffects?.massive) {score += 40;}      // 10+ flips\r\n    if (specialEffects?.chain) {score += 30;}       // Chain reaction\r\n    if (specialEffects?.comeback) {score += 25;}    // Comeback move\r\n    if (specialEffects?.domination) {score += 20;}  // Domination move\r\n    if (specialEffects?.firstMove) {score -= 10;}   // First moves are usually basic\r\n\r\n    // Adjusted grading system for balanced effects\r\n    if (score >= 100 || flippedCount >= 15) {return 'SSS';}  // LEGENDARY (rare)\r\n    if (score >= 70 || flippedCount >= 10) {return 'SS';}   // MYTHICAL\r\n    if (score >= 50 || flippedCount >= 7) {return 'S';}     // EPIC\r\n    if (score >= 30 || flippedCount >= 5) {return 'A';}     // GREAT\r\n    if (score >= 15 || flippedCount >= 3) {return 'B';}     // GOOD\r\n    return 'C';                                            // BASIC\r\n  }\r\n\r\n  // Enhanced trigger system with more variations - now supports directional particles\r\n  triggerMoveEffect(x: number, y: number, grade: Grade, flippedCount: number, specialEffects?: SpecialEffect, flippedPositions?: Array<{x: number, y: number}>): void {\r\n    if (!this.enabled) {return;}\r\n\r\n    // 首先創建飄起的等級文字\r\n    this.createFloatingGradeText(x, y, grade);\r\n\r\n    // 🔥⚔️ SWORD MODE: SSS uses ONLY sword effects for maximum impact! ⚔️🔥\r\n    if (grade === 'SSS') {\r\n      console.log(`🗡️ SWORD MODE ACTIVATED: ${grade} grade with ${flippedCount} flips!`);\r\n\r\n      // Use sword effects for SSS grade\r\n      console.log('⚔️ Triggering DIVINE GOLDEN SWORDS! ⚔️');\r\n      setTimeout(() => this.createSSSEffect(x, y, flippedCount, specialEffects, flippedPositions), 0);\r\n\r\n      return; // Skip preset particles for sword modes\r\n    }\r\n\r\n    // Use preset system for other grades (C, B, S)\r\n    this.createPresetEffect(x, y, grade, flippedCount, specialEffects, flippedPositions);\r\n\r\n    // Additional effects for S grade only (A now uses swords)\r\n    if (grade === 'S' && flippedCount >= 7) {\r\n      setTimeout(() => this.createSEffect(x, y, flippedCount, specialEffects, flippedPositions), 100);\r\n    }\r\n  }\r\n\r\n  // 使用預設配置創建特效 - 支持方向性粒子\r\n  private createPresetEffect(x: number, y: number, grade: Grade, flippedCount: number, specialEffects?: SpecialEffect, flippedPositions?: Array<{x: number, y: number}>): void {\r\n    const presetType = getPresetForGrade(grade);\r\n    const preset = PARTICLE_PRESETS[presetType];\r\n\r\n    if (!preset) {\r\n      console.warn(`No preset found for grade ${grade}`);\r\n      return;\r\n    }\r\n\r\n    console.log(`🎨 ${grade} 級移動特效: ${presetType} (${flippedCount} 翻轉)`);\r\n\r\n    // Special handling for B-tier Green Lotus effect\r\n    if (grade === 'B' && presetType === 'green_lotus') {\r\n      this.createGreenLotusEffect(x, y, flippedPositions || []);\r\n      return;\r\n    }\r\n\r\n    // Special handling for C-tier UBW effect\r\n    if (grade === 'C' && presetType === 'unlimited_blade_works') {\r\n      this.createUnlimitedBladeWorksEffect(x, y, flippedPositions || []);\r\n      return;\r\n    }\r\n\r\n    // Special handling for S-tier Divine Thunder effect\r\n    if (grade === 'S' && presetType === 'divine_thunder') {\r\n      this.createDivineThunderEffect(x, y, flippedPositions || []);\r\n      return;\r\n    }\r\n\r\n    // Special handling for SS-tier Nine Finale effect\r\n    if (grade === 'SS' && presetType === 'nine_finale') {\r\n      this.createNineFinaleEffect(x, y, flippedPositions || []);\r\n      return;\r\n    }\r\n\r\n    // Special handling for A-tier Ice Spear effect\r\n    if (grade === 'A') {\r\n      this.createIceSpearEffect(x, y, flippedPositions || []);\r\n      return;\r\n    }\r\n\r\n    // 計算翻轉方向向量\r\n    const flipDirections = this.calculateFlipDirections(x, y, flippedPositions);\r\n\r\n    // 根據翻轉數量調整粒子數量\r\n    const intensityMultiplier = Math.min(1 + (flippedCount - 1) * 0.1, 2.0);\r\n    const particleCount = Math.floor(\r\n      (preset.spawning.count.min + Math.random() * (preset.spawning.count.max - preset.spawning.count.min)) * intensityMultiplier,\r\n    );\r\n\r\n    // 創建預設效果的粒子\r\n    for (let i = 0; i < particleCount; i++) {\r\n      setTimeout(() => {\r\n        this.createPresetParticle(x, y, preset, i, particleCount, flipDirections);\r\n      }, Math.random() * (preset.spawning.delay.max - preset.spawning.delay.min) + preset.spawning.delay.min);\r\n    }\r\n\r\n    // 特殊效果增強\r\n    if (specialEffects?.corner && grade !== 'C') {\r\n      this.addCornerEnhancement(x, y, preset, flipDirections);\r\n    }\r\n    if (specialEffects?.massive && flippedCount >= 8) {\r\n      this.addMassiveEnhancement(x, y, preset, flipDirections);\r\n    }\r\n  }\r\n\r\n  // 計算翻轉方向向量\r\n  private calculateFlipDirections(sourceX: number, sourceY: number, flippedPositions?: Array<{x: number, y: number}>): Array<{angle: number, distance: number}> {\r\n    if (!flippedPositions || flippedPositions.length === 0) {\r\n      // 如果沒有翻轉位置，返回8個均勻分布的方向\r\n      return Array.from({length: 8}, (_, i) => ({\r\n        angle: (i / 8) * Math.PI * 2,\r\n        distance: 100,\r\n      }));\r\n    }\r\n\r\n    // 計算從源點到每個翻轉位置的方向和距離\r\n    return flippedPositions.map(pos => {\r\n      const dx = pos.x - sourceX;\r\n      const dy = pos.y - sourceY;\r\n      const distance = Math.sqrt(dx * dx + dy * dy);\r\n      const angle = Math.atan2(dy, dx);\r\n\r\n      return {\r\n        angle,\r\n        distance: Math.max(distance, 50), // 最小距離50px\r\n      };\r\n    });\r\n  }\r\n\r\n  // 創建飛劍 - 用於 SS 和 SSS 級別特效\r\n  private createSwords(sourceX: number, sourceY: number, targets: Array<{x: number, y: number}>, config: FlySwordConfig, count: number, delay: number = 0): void {\r\n    // Limit maximum swords for performance - dramatically increased for sword prominence\r\n    const maxSwords = 60; // Dramatically increased from 25\r\n    if (this.swords.length >= maxSwords) {\r\n      console.warn(`⚠️ Sword limit reached (${maxSwords}), skipping creation`);\r\n      return;\r\n    }\r\n\r\n    const actualCount = Math.min(count, maxSwords - this.swords.length);\r\n    console.log(`⚔️ createSwords: Creating ${actualCount} swords from (${sourceX}, ${sourceY}) with ${delay}ms delay`);\r\n\r\n    for (let i = 0; i < actualCount; i++) {\r\n      setTimeout(() => {\r\n        // Choose target (either specific target or random position)\r\n        let target: { x: number; y: number } | null = null;\r\n\r\n        if (targets.length > 0) {\r\n          // Cycle through targets\r\n          target = targets[i % targets.length] || targets[0] || null;\r\n        } else {\r\n          // Random target around the source\r\n          const angle = (i / actualCount) * Math.PI * 2;\r\n          const distance = 200 + Math.random() * 300;\r\n          target = {\r\n            x: sourceX + Math.cos(angle) * distance,\r\n            y: sourceY + Math.sin(angle) * distance,\r\n          };\r\n        }\r\n\r\n        // Add some random offset to source position for sword spawn\r\n        const spawnRadius = 30;\r\n        const spawnAngle = Math.random() * Math.PI * 2;\r\n        const spawnX = sourceX + Math.cos(spawnAngle) * spawnRadius;\r\n        const spawnY = sourceY + Math.sin(spawnAngle) * spawnRadius;\r\n\r\n        const sword = new FlySword(spawnX, spawnY, target, config);\r\n        this.swords.push(sword);\r\n      }, delay + i * 30); // Faster stagger for immediate effect\r\n    }\r\n  }\r\n\r\n  // 創建預設粒子 - 支持方向性發射\r\n  private createPresetParticle(x: number, y: number, preset: ParticlePresetConfig, index: number, total: number, flipDirections?: Array<{angle: number, distance: number}>): void {\r\n    const colors = preset.colors;\r\n    const color = colors[Math.floor(Math.random() * colors.length)] || colors[0] || '#ffffff';\r\n\r\n    // 計算角度和速度 - 支持方向性發射\r\n    let angle: number;\r\n    let speed: number;\r\n\r\n    // 如果有翻轉方向，使用方向性發射\r\n    if (flipDirections && flipDirections.length > 0) {\r\n      // 根據粒子索引選擇翻轉方向\r\n      const directionIndex = Math.floor((index / total) * flipDirections.length);\r\n      const direction = flipDirections[directionIndex] || flipDirections[0];\r\n\r\n      if (direction) {\r\n        // 在選定方向的基礎上添加一些隨機偏移\r\n        const baseAngle = direction.angle;\r\n        const spreadAngle = preset.spawning.spread.angle || (Math.PI / 6); // 30度默認擴散角\r\n        angle = baseAngle + (Math.random() - 0.5) * spreadAngle;\r\n      } else {\r\n        // Fallback if no direction found\r\n        angle = Math.random() * Math.PI * 2;\r\n      }\r\n\r\n      speed = preset.physics.velocity.min + Math.random() * (preset.physics.velocity.max - preset.physics.velocity.min);\r\n    } else {\r\n      // 原有的行為模式\r\n      switch (preset.behavior.movement) {\r\n        case 'explode':\r\n          angle = (index / total) * Math.PI * 2;\r\n          speed = preset.physics.velocity.min + Math.random() * (preset.physics.velocity.max - preset.physics.velocity.min);\r\n          break;\r\n        case 'float':\r\n          angle = Math.random() * Math.PI * 2;\r\n          speed = preset.physics.velocity.min + Math.random() * (preset.physics.velocity.max - preset.physics.velocity.min);\r\n          break;\r\n        case 'rise':\r\n          angle = Math.PI * 1.5 + (Math.random() - 0.5) * preset.spawning.spread.angle;\r\n          speed = preset.physics.velocity.min + Math.random() * (preset.physics.velocity.max - preset.physics.velocity.min);\r\n          break;\r\n        case 'chain':\r\n          angle = Math.random() * Math.PI * 2;\r\n          speed = preset.physics.velocity.max;\r\n          break;\r\n        case 'implode':\r\n          angle = Math.random() * Math.PI * 2;\r\n          speed = preset.physics.velocity.min + Math.random() * (preset.physics.velocity.max - preset.physics.velocity.min);\r\n          break;\r\n        default:\r\n          angle = Math.random() * Math.PI * 2;\r\n          speed = 100;\r\n      }\r\n    }\r\n\r\n    // 計算位置偏移\r\n    const spreadRadius = preset.spawning.spread.radius;\r\n    const spreadAngle = Math.random() * preset.spawning.spread.angle - preset.spawning.spread.angle / 2;\r\n    const startX = x + Math.cos(spreadAngle) * Math.random() * spreadRadius;\r\n    const startY = y + Math.sin(spreadAngle) * Math.random() * spreadRadius;\r\n\r\n    // 創建粒子\r\n    const size = preset.visual.size.min + Math.random() * (preset.visual.size.max - preset.visual.size.min);\r\n    const life = (preset.animation.lifespan.min + Math.random() * (preset.animation.lifespan.max - preset.animation.lifespan.min)) / 1000;\r\n\r\n    this.particles.push({\r\n      x: startX,\r\n      y: startY,\r\n      vx: Math.cos(angle) * speed,\r\n      vy: Math.sin(angle) * speed,\r\n      life: life,\r\n      maxLife: life,\r\n      size: size,\r\n      color: color,\r\n      alpha: preset.visual.opacity.start,\r\n      type: preset.type === 'snowflake' ? 'circle' : preset.type === 'lightning' ? 'spark' : 'circle',\r\n    });\r\n  }\r\n\r\n  // 角落增強效果 - 支持方向性\r\n  private addCornerEnhancement(x: number, y: number, preset: ParticlePresetConfig, flipDirections?: Array<{angle: number, distance: number}>): void {\r\n    // 添加金色光環\r\n    for (let i = 0; i < 12; i++) {\r\n      let angle: number;\r\n\r\n      if (flipDirections && flipDirections.length > 0) {\r\n        // 使用翻轉方向，添加偏移\r\n        const directionIndex = Math.floor((i / 12) * flipDirections.length);\r\n        const direction = flipDirections[directionIndex] || flipDirections[0];\r\n        if (direction) {\r\n          angle = direction.angle + (Math.random() - 0.5) * (Math.PI / 4);\r\n        } else {\r\n          angle = (i / 12) * Math.PI * 2;\r\n        }\r\n      } else {\r\n        angle = (i / 12) * Math.PI * 2;\r\n      }\r\n\r\n      this.particles.push({\r\n        x: x,\r\n        y: y,\r\n        vx: Math.cos(angle) * 80,\r\n        vy: Math.sin(angle) * 80,\r\n        life: 1.0,\r\n        maxLife: 1.0,\r\n        size: 3,\r\n        color: '#ffd700',\r\n        alpha: 0.8,\r\n        type: 'circle',\r\n      });\r\n    }\r\n  }\r\n\r\n  // 大規模增強效果 - 支持方向性\r\n  private addMassiveEnhancement(x: number, y: number, preset: ParticlePresetConfig, flipDirections?: Array<{angle: number, distance: number}>): void {\r\n    // 添加衝擊波\r\n    for (let wave = 0; wave < 3; wave++) {\r\n      setTimeout(() => {\r\n        for (let i = 0; i < 20; i++) {\r\n          let angle: number;\r\n\r\n          if (flipDirections && flipDirections.length > 0) {\r\n            // 使用翻轉方向，添加偏移\r\n            const directionIndex = Math.floor((i / 20) * flipDirections.length);\r\n            const direction = flipDirections[directionIndex] || flipDirections[0];\r\n            if (direction) {\r\n              angle = direction.angle + (Math.random() - 0.5) * (Math.PI / 3);\r\n            } else {\r\n              angle = (i / 20) * Math.PI * 2;\r\n            }\r\n          } else {\r\n            angle = (i / 20) * Math.PI * 2;\r\n          }\r\n\r\n          this.particles.push({\r\n            x: x,\r\n            y: y,\r\n            vx: Math.cos(angle) * (150 + wave * 50),\r\n            vy: Math.sin(angle) * (150 + wave * 50),\r\n            life: 0.8,\r\n            maxLife: 0.8,\r\n            size: 2,\r\n            color: '#ffffff',\r\n            alpha: 0.6 - wave * 0.2,\r\n            type: 'circle',\r\n          });\r\n        }\r\n      }, wave * 100);\r\n    }\r\n  }\r\n\r\n  private createSSSEffect(x: number, y: number, flippedCount: number, specialEffects?: SpecialEffect, flippedPositions?: Array<{x: number, y: number}>): void {\r\n    // 🌟 LEGENDARY SSS-GRADE - GOLDEN MAGNIFICENCE! 🌟\r\n    const goldColors = [\r\n      '#ffd700', '#ffdf00', '#ffed4e', '#fff700', '#ffa500', '#daa520',\r\n      '#b8860b', '#ffeaa7', '#fdcb6e', '#f39c12', '#e67e22', '#d4af37',\r\n    ];\r\n\r\n    console.log('🌟✨🎆 LEGENDARY SSS-GRADE MOVE - REALITY SHATTER! 🎆✨🌟');\r\n\r\n    // ⚔️ DIVINE GOLDEN SWORDS - Enhanced heavenly judgment! ⚔️\r\n    const goldenSwordConfig: FlySwordConfig = {\r\n      color: '#ffed4a',    // Brighter golden yellow for maximum contrast\r\n      trailColor: 'rgba(255, 237, 74, 1)',\r\n      size: 90,            // MASSIVE size for supreme visibility\r\n      speed: 5,            // Slowest for maximum drama\r\n      glowIntensity: 100,   // Maximum possible glow for absolute dominance\r\n    };\r\n\r\n    // Create targets from flipped positions\r\n    const swordTargets = flippedPositions || [];\r\n    const swordCount = Math.min(35, Math.max(25, Math.floor(flippedCount * 2.5))); // 25-35 swords - MASSIVE ARMY!\r\n\r\n    console.log(`⚔️ Creating ${swordCount} DIVINE GOLDEN SWORDS targeting ${swordTargets.length} positions!`);\r\n\r\n    // Create divine golden swords in multiple waves for maximum impact\r\n    this.createSwords(x, y, swordTargets, goldenSwordConfig, Math.floor(swordCount * 0.6), 0);\r\n    setTimeout(() => {\r\n      console.log('⚔️ Second wave of GOLDEN SWORDS incoming!');\r\n      this.createSwords(x, y, swordTargets, goldenSwordConfig, Math.floor(swordCount * 0.4), 0);\r\n    }, 100);\r\n\r\n    // ⚔️ MINIMAL GOLDEN SPARKLES - Just accent the divine swords! ⚔️\r\n    console.log('⚔️ Adding minimal golden sparkles to accent the divine swords');\r\n\r\n    // ⚔️ COMPLETELY OBLITERATED - GOLDEN SWORDS RULE ALL! ⚔️\r\n    console.log('⚔️ ALL GOLDEN SPARKLES BANISHED - ONLY DIVINE SWORDS REMAIN!');\r\n    // No sparkles, no stars - the golden swords are the only light needed!\r\n\r\n    // Special effect variations - minimal, sword-focused\r\n    if (specialEffects?.corner) {\r\n      console.log('⚔️ LEGENDARY CORNER SWORD MASTERY!');\r\n      // Add 3 more swords for corner effect instead of heavy particles\r\n      setTimeout(() => {\r\n        this.createSwords(x, y, swordTargets, goldenSwordConfig, 3, 0);\r\n      }, 500);\r\n    }\r\n    if (specialEffects?.comeback) {\r\n      console.log('⚔️ LEGENDARY COMEBACK SWORD STORM!');\r\n      // Add extra sword wave for comeback effect\r\n      setTimeout(() => {\r\n        this.createSwords(x, y, swordTargets, goldenSwordConfig, 2, 0);\r\n      }, 600);\r\n    }\r\n  }\r\n\r\n  private createSSEffect(x: number, y: number, flippedCount: number, specialEffects?: SpecialEffect, flippedPositions?: Array<{x: number, y: number}>): void {\r\n    // 🌪️ MYTHICAL SS-GRADE - RED STORM! 🌪️\r\n    const redColors = ['#ff0000', '#dc143c', '#b22222', '#cd5c5c', '#ff6347', '#ff4500', '#ff1493', '#8b0000', '#a52a2a', '#c41e3a'];\r\n\r\n    console.log('🌪️💎 MYTHICAL SS-GRADE MOVE! 💎🌪️');\r\n\r\n    // 🔥 FLAME SWORDS - Enhanced for maximum visibility! 🔥\r\n    const flameSwordConfig: FlySwordConfig = {\r\n      color: '#ff1100',    // Brighter red for better contrast\r\n      trailColor: 'rgba(255, 17, 0, 1)',\r\n      size: 70,            // Dramatically increased from 40\r\n      speed: 6,            // Even slower for dramatic effect\r\n      glowIntensity: 90,    // Maximum glow for dominance\r\n    };\r\n\r\n    // Create targets from flipped positions\r\n    const swordTargets = flippedPositions || [];\r\n    const swordCount = Math.min(20, Math.max(15, Math.floor(flippedCount * 1.5))); // 15-20 swords - tripled!\r\n\r\n    console.log(`🔥 Creating ${swordCount} FLAME SWORDS targeting ${swordTargets.length} positions!`);\r\n\r\n    // Create flame swords immediately for responsive effect\r\n    this.createSwords(x, y, swordTargets, flameSwordConfig, swordCount, 0);\r\n\r\n    // 🔥 MINIMAL FIRE SPARKS - Just accent the swords, don't overwhelm them! 🔥\r\n    console.log('🔥 Adding minimal fire sparks to accent the flame swords');\r\n\r\n    // 🔥 COMPLETELY REMOVED - FLAME SWORDS REIGN SUPREME! 🔥\r\n    console.log('🔥 ALL FIRE PARTICLES ELIMINATED - PURE SWORD DOMINATION!');\r\n    // No sparks, no flames - only the mighty flame swords!\r\n\r\n    // Special effects - keep minimal for sword focus\r\n    if (specialEffects?.massive) {\r\n      console.log('🔥 MASSIVE FLAME SWORD STORM!');\r\n      // Add 2 more swords for massive effect instead of heavy particles\r\n      setTimeout(() => {\r\n        this.createSwords(x, y, swordTargets, flameSwordConfig, 2, 0);\r\n      }, 400);\r\n    }\r\n  }\r\n\r\n  private createSEffect(x: number, y: number, flippedCount: number, specialEffects?: SpecialEffect, flippedPositions?: Array<{x: number, y: number}>): void {\r\n    // ULTRA SPECTACULAR S-grade effect - PURPLE MAJESTY!\r\n    const purpleColors = ['#dda0dd', '#e6b8ea', '#d8bfd8', '#9932cc', '#ba55d3', '#9370db', '#8a2be2', '#9966cc', '#c8a2c8'];\r\n\r\n    console.log('🎆 LEGENDARY S-GRADE MOVE! 🎆');\r\n\r\n    // MASSIVE RING BURST - 5 waves with directional preference!\r\n    const flipDirections = this.calculateFlipDirections(x, y, flippedPositions);\r\n\r\n    for (let wave = 0; wave < 5; wave++) {\r\n      setTimeout(() => {\r\n        for (let j = 0; j < 40; j++) {\r\n          let angle: number;\r\n\r\n          if (flipDirections.length > 0 && Math.random() < 0.65) {\r\n            // 65% 機率朝向翻轉方向爆發\r\n            const directionIndex = Math.floor((j / 40) * flipDirections.length);\r\n            const direction = flipDirections[directionIndex] || flipDirections[0];\r\n            if (direction) {\r\n              angle = direction.angle + (Math.random() - 0.5) * (Math.PI / 2.5); // 72度擴散\r\n            } else {\r\n              angle = (j / 40) * Math.PI * 2;\r\n            }\r\n          } else {\r\n            // 35% 機率保持環形爆發\r\n            angle = (j / 40) * Math.PI * 2;\r\n          }\r\n\r\n          const speed = 300 + wave * 80;\r\n          const wobble = Math.sin(j * 0.5) * 20; // Add wobble\r\n\r\n          this.particles.push({\r\n            x: x,\r\n            y: y,\r\n            vx: Math.cos(angle) * speed + wobble,\r\n            vy: Math.sin(angle) * speed + wobble,\r\n            life: 1.5,\r\n            maxLife: 1.5,\r\n            size: Math.random() * 5 + 3,\r\n            color: purpleColors[wave % purpleColors.length] ?? '#9932cc',\r\n            alpha: 1,\r\n            type: 'circle',\r\n          });\r\n        }\r\n      }, wave * 80);\r\n    }\r\n\r\n    // GIANT SPIRAL VORTEX\r\n    for (let i = 0; i < 80; i++) {\r\n      const angle = (i / 8) * Math.PI;\r\n      const radius = i * 4;\r\n\r\n      setTimeout(() => {\r\n        this.particles.push({\r\n          x: x + Math.cos(angle) * radius * 0.3,\r\n          y: y + Math.sin(angle) * radius * 0.3,\r\n          vx: Math.cos(angle + Math.PI/2) * 150,\r\n          vy: Math.sin(angle + Math.PI/2) * 150,\r\n          life: 2.0,\r\n          maxLife: 2.0,\r\n          size: Math.random() * 4 + 2,\r\n          color: purpleColors[i % purpleColors.length] ?? '#9932cc',\r\n          alpha: 1,\r\n          type: 'circle',\r\n        });\r\n      }, i * 15);\r\n    }\r\n\r\n    // NUCLEAR FOUNTAIN - Always spectacular regardless of flip count\r\n    for (let i = 0; i < 100 + flippedCount * 15; i++) {\r\n      setTimeout(() => {\r\n        this.particles.push({\r\n          x: x + (Math.random() - 0.5) * 40,\r\n          y: y + Math.random() * 20,\r\n          vx: (Math.random() - 0.5) * 400,\r\n          vy: -Math.random() * 500 - 200,\r\n          life: 2.5,\r\n          maxLife: 2.5,\r\n          size: Math.random() * 4 + 2,\r\n          color: purpleColors[Math.floor(Math.random() * purpleColors.length)] ?? '#8a2be2',\r\n          alpha: 1,\r\n          type: Math.random() > 0.3 ? 'spark' : 'circle',\r\n        });\r\n      }, Math.random() * 300);\r\n    }\r\n\r\n    // SHOCKWAVE EFFECT - Expanding circles\r\n    for (let wave = 0; wave < 3; wave++) {\r\n      setTimeout(() => {\r\n        for (let angle = 0; angle < Math.PI * 2; angle += 0.1) {\r\n          this.particles.push({\r\n            x: x,\r\n            y: y,\r\n            vx: Math.cos(angle) * (400 + wave * 100),\r\n            vy: Math.sin(angle) * (400 + wave * 100),\r\n            life: 0.8,\r\n            maxLife: 0.8,\r\n            size: 1,\r\n            color: '#ffffff',\r\n            alpha: 0.8,\r\n            type: 'circle',\r\n          });\r\n        }\r\n      }, wave * 200);\r\n    }\r\n\r\n    // STARBURST - Directional explosion\r\n    for (let i = 0; i < 50; i++) {\r\n      let angle: number;\r\n\r\n      if (flipDirections.length > 0 && Math.random() < 0.7) {\r\n        // 70% 機率朝向翻轉方向爆炸\r\n        const directionIndex = Math.floor((i / 50) * flipDirections.length);\r\n        const direction = flipDirections[directionIndex] || flipDirections[0];\r\n        if (direction) {\r\n          angle = direction.angle + (Math.random() - 0.5) * (Math.PI / 3); // 60度擴散\r\n        } else {\r\n          angle = (i / 50) * Math.PI * 2;\r\n        }\r\n      } else {\r\n        // 30% 機率保持星形爆炸\r\n        angle = (i / 50) * Math.PI * 2;\r\n      }\r\n\r\n      setTimeout(() => {\r\n        this.particles.push({\r\n          x: x,\r\n          y: y,\r\n          vx: Math.cos(angle) * 500,\r\n          vy: Math.sin(angle) * 500,\r\n          life: 1.2,\r\n          maxLife: 1.2,\r\n          size: Math.random() * 6 + 2,\r\n          color: '#9932cc',\r\n          alpha: 1,\r\n          type: 'circle',\r\n        });\r\n      }, i * 20);\r\n    }\r\n  }\r\n\r\n  private createAEffectWithSwords(x: number, y: number, flippedCount: number, specialEffects?: SpecialEffect, flippedPositions?: Array<{x: number, y: number}>): void {\r\n    // ❄️ FROST BLUE SWORDS - A-grade elegance! ❄️\r\n    console.log('❄️ A-GRADE FROST SWORDS ACTIVATED! ❄️');\r\n\r\n    // ❄️ FROST BLUE SWORDS - Elegant ice blades! ❄️\r\n    const frostSwordConfig: FlySwordConfig = {\r\n      color: '#00bfff',\r\n      trailColor: 'rgba(0, 191, 255, 1)',\r\n      size: 45,        // Dramatically increased from 25\r\n      speed: 8,        // Slower for better visibility\r\n      glowIntensity: 80, // Dramatically enhanced glow\r\n    };\r\n\r\n    // Create targets from flipped positions\r\n    const swordTargets = flippedPositions || [];\r\n    const swordCount = Math.min(12, Math.max(8, Math.floor(flippedCount * 1.2))); // 8-12 swords - doubled!\r\n\r\n    console.log(`❄️ Creating ${swordCount} FROST BLUE SWORDS targeting ${swordTargets.length} positions!`);\r\n\r\n    // Create frost swords immediately for responsive effect\r\n    this.createSwords(x, y, swordTargets, frostSwordConfig, swordCount, 0);\r\n\r\n    // COMPLETELY REMOVED - Let swords dominate!\r\n    console.log('❄️ ALL PARTICLES REMOVED - PURE SWORD FOCUS!');\r\n    // No particles - only swords shall rule the battlefield!\r\n\r\n    // Special effects\r\n    if (specialEffects?.massive) {\r\n      console.log('❄️ MASSIVE FROST STORM!');\r\n    }\r\n    if (specialEffects?.corner) {\r\n      console.log('❄️ CORNER FROST MASTERY!');\r\n    }\r\n  }\r\n\r\n  private createAEffect(x: number, y: number, flippedCount: number, flippedPositions?: Array<{x: number, y: number}>): void {\r\n    // EPIC A-grade effect - AZURE BRILLIANCE!\r\n    const blueColors = ['#87ceeb', '#87cefa', '#00bfff', '#1e90ff', '#6495ed', '#4682b4', '#add8e6', '#b0e0e6', '#afeeee'];\r\n\r\n    console.log('⭐ AMAZING A-GRADE MOVE! ⭐');\r\n\r\n    // EPIC CROSS SWEEP - Directional waves\r\n    const flipDirections = this.calculateFlipDirections(x, y, flippedPositions);\r\n\r\n    if (flipDirections.length > 0) {\r\n      // 使用翻轉方向進行定向掃射\r\n      for (const flipDir of flipDirections) {\r\n        for (let wave = 0; wave < 3; wave++) {\r\n          for (let i = 0; i < 20; i++) {\r\n            setTimeout(() => {\r\n              // 主方向加上一些擴散\r\n              const spread = (Math.random() - 0.5) * (Math.PI / 4); // 45度擴散\r\n              const finalAngle = flipDir.angle + spread;\r\n              const speed = 250 + wave * 50;\r\n\r\n              this.particles.push({\r\n                x: x,\r\n                y: y,\r\n                vx: Math.cos(finalAngle) * speed,\r\n                vy: Math.sin(finalAngle) * speed,\r\n                life: 1.0 + wave * 0.2,\r\n                maxLife: 1.0 + wave * 0.2,\r\n                size: Math.random() * 4 + 2,\r\n                color: blueColors[wave % blueColors.length] ?? '#87ceeb',\r\n                alpha: 1,\r\n                type: 'circle',\r\n              });\r\n            }, i * 20 + wave * 150);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      // 後備方案：使用原有的8方向掃射\r\n      const directions = [\r\n        [1,0], [0,1], [-1,0], [0,-1],   // Cardinals\r\n        [1,1], [-1,1], [1,-1], [-1,-1],  // Diagonals\r\n      ];\r\n\r\n      for (const [dx, dy] of directions as [number, number][]) {\r\n        for (let wave = 0; wave < 3; wave++) {\r\n          for (let i = 0; i < 15; i++) {\r\n            setTimeout(() => {\r\n              this.particles.push({\r\n                x: x,\r\n                y: y,\r\n                vx: dx * (250 + wave * 50),\r\n                vy: dy * (250 + wave * 50),\r\n                life: 1.0 + wave * 0.2,\r\n                maxLife: 1.0 + wave * 0.2,\r\n                size: Math.random() * 4 + 2,\r\n                color: blueColors[wave % blueColors.length] ?? '#87ceeb',\r\n                alpha: 1,\r\n                type: 'circle',\r\n              });\r\n            }, i * 25 + wave * 200);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // GOLDEN RING CASCADES - Directional expanding rings\r\n    for (let ring = 0; ring < 4; ring++) {\r\n      setTimeout(() => {\r\n        for (let i = 0; i < 30; i++) {\r\n          let angle: number;\r\n\r\n          if (flipDirections.length > 0 && Math.random() < 0.4) {\r\n            // 40% 機率朝向翻轉方向\r\n            const directionIndex = Math.floor((i / 30) * flipDirections.length);\r\n            const direction = flipDirections[directionIndex] || flipDirections[0];\r\n            if (direction) {\r\n              angle = direction.angle + (Math.random() - 0.5) * (Math.PI / 3); // 60度擴散\r\n            } else {\r\n              angle = (i / 30) * Math.PI * 2;\r\n            }\r\n          } else {\r\n            // 60% 機率保持環形擴散\r\n            angle = (i / 30) * Math.PI * 2;\r\n          }\r\n\r\n          const speed = 180 + ring * 60;\r\n\r\n          this.particles.push({\r\n            x: x,\r\n            y: y,\r\n            vx: Math.cos(angle) * speed,\r\n            vy: Math.sin(angle) * speed,\r\n            life: 1.2,\r\n            maxLife: 1.2,\r\n            size: Math.random() * 3 + 2,\r\n            color: blueColors[ring % blueColors.length] ?? '#87ceeb',\r\n            alpha: 1,\r\n            type: 'circle',\r\n          });\r\n        }\r\n      }, ring * 150);\r\n    }\r\n\r\n    // GOLDEN FOUNTAIN\r\n    for (let i = 0; i < 60 + flippedCount * 8; i++) {\r\n      setTimeout(() => {\r\n        this.particles.push({\r\n          x: x + (Math.random() - 0.5) * 30,\r\n          y: y + Math.random() * 15,\r\n          vx: (Math.random() - 0.5) * 300,\r\n          vy: -Math.random() * 350 - 150,\r\n          life: 1.8,\r\n          maxLife: 1.8,\r\n          size: Math.random() * 3 + 1,\r\n          color: blueColors[Math.floor(Math.random() * blueColors.length)] ?? '#4169e1',\r\n          alpha: 1,\r\n          type: 'spark',\r\n        });\r\n      }, Math.random() * 400);\r\n    }\r\n\r\n    // SPARKLE BURST\r\n    for (let i = 0; i < 25; i++) {\r\n      const angle = Math.random() * Math.PI * 2;\r\n      const distance = Math.random() * 100 + 50;\r\n\r\n      this.particles.push({\r\n        x: x + Math.cos(angle) * distance,\r\n        y: y + Math.sin(angle) * distance,\r\n        vx: Math.cos(angle) * 100,\r\n        vy: Math.sin(angle) * 100,\r\n        life: 0.8,\r\n        maxLife: 0.8,\r\n        size: Math.random() * 3 + 1,\r\n        color: '#87ceeb',\r\n        alpha: 1,\r\n        type: 'circle',\r\n      });\r\n    }\r\n  }\r\n\r\n  private createBEffect(x: number, y: number, flippedCount: number): void {\r\n    // SOLID B-grade effect - SPRING GREEN POWER!\r\n    const greenColors = ['#90ee90', '#98fb98', '#00ff7f', '#00fa9a', '#7cfc00', '#7fff00', '#adff2f', '#9aff9a', '#b4ffb4'];\r\n\r\n    console.log('💚 GOOD B-GRADE MOVE! 💚');\r\n\r\n    // DOUBLE RING BURST\r\n    for (let ring = 0; ring < 2; ring++) {\r\n      setTimeout(() => {\r\n        for (let i = 0; i < 25; i++) {\r\n          const angle = (i / 25) * Math.PI * 2;\r\n          const speed = 120 + ring * 40;\r\n\r\n          this.particles.push({\r\n            x: x,\r\n            y: y,\r\n            vx: Math.cos(angle) * speed,\r\n            vy: Math.sin(angle) * speed,\r\n            life: 1.0,\r\n            maxLife: 1.0,\r\n            size: Math.random() * 2 + 2,\r\n            color: greenColors[ring % greenColors.length] ?? '#90ee90',\r\n            alpha: 1,\r\n            type: 'circle',\r\n          });\r\n        }\r\n      }, ring * 100);\r\n    }\r\n\r\n    // GREEN SPARKS\r\n    for (let i = 0; i < 20 + flippedCount * 5; i++) {\r\n      const angle = Math.random() * Math.PI * 2;\r\n      const speed = Math.random() * 150 + 80;\r\n\r\n      setTimeout(() => {\r\n        this.particles.push({\r\n          x: x,\r\n          y: y,\r\n          vx: Math.cos(angle) * speed,\r\n          vy: Math.sin(angle) * speed,\r\n          life: 1.2,\r\n          maxLife: 1.2,\r\n          size: Math.random() * 2 + 1,\r\n          color: greenColors[Math.floor(Math.random() * greenColors.length)] ?? '#00ff7f',\r\n          alpha: 1,\r\n          type: 'spark',\r\n        });\r\n      }, Math.random() * 200);\r\n    }\r\n\r\n    // RADIATING LINES\r\n    for (let i = 0; i < 8; i++) {\r\n      const angle = (i / 8) * Math.PI * 2;\r\n\r\n      for (let j = 0; j < 5; j++) {\r\n        setTimeout(() => {\r\n          this.particles.push({\r\n            x: x,\r\n            y: y,\r\n            vx: Math.cos(angle) * (150 + j * 30),\r\n            vy: Math.sin(angle) * (150 + j * 30),\r\n            life: 0.8,\r\n            maxLife: 0.8,\r\n            size: 2,\r\n            color: '#90ee90',\r\n            alpha: 1,\r\n            type: 'circle',\r\n          });\r\n        }, j * 50);\r\n      }\r\n    }\r\n  }\r\n\r\n  private createGreenLotusEffect(x: number, y: number, flippedPositions: Array<{x: number, y: number}>): void {\r\n    console.log('🌸 青蓮劍歌 - Green Lotus Effect! 🌸');\r\n\r\n    // Convert flipped positions to target positions for the effect\r\n    const targetPositions: Position[] = flippedPositions.map(pos => ({ x: pos.x, y: pos.y }));\r\n\r\n    // Create the Green Lotus effect\r\n    const greenLotus = new GreenLotusEffect(x, y, targetPositions);\r\n    this.greenLotusEffects.push(greenLotus);\r\n  }\r\n\r\n  private createUnlimitedBladeWorksEffect(x: number, y: number, flippedPositions: Array<{x: number, y: number}>): void {\r\n    console.log('⚔️ 劍刃迴響 - Blade Echo Effect! ⚔️');\r\n\r\n    // Convert flipped positions to target positions for the effect\r\n    const targetPositions: Position[] = flippedPositions.map(pos => ({ x: pos.x, y: pos.y }));\r\n\r\n    // Create the UBW effect\r\n    const ubwEffect = new UnlimitedBladeWorksEffect(x, y, targetPositions);\r\n    this.ubwEffects.push(ubwEffect);\r\n  }\r\n\r\n  private createDivineThunderEffect(x: number, y: number, flippedPositions: Array<{x: number, y: number}>): void {\r\n    console.log('⚡ 神劍御雷 - Divine Thunder Strike! ⚡');\r\n\r\n    // Convert flipped positions to target positions for the effect\r\n    const targetPositions: Position[] = flippedPositions.map(pos => ({ x: pos.x, y: pos.y }));\r\n\r\n    // Create the Divine Thunder effect\r\n    const thunderEffect = new DivineSwordThunderEffect(x, y, targetPositions);\r\n    this.divineThunderEffects.push(thunderEffect);\r\n  }\r\n\r\n  private createNineFinaleEffect(x: number, y: number, flippedPositions: Array<{x: number, y: number}>): void {\r\n    console.log('🔥 九俱焚滅 - Nine Finale Destruction! 🔥');\r\n\r\n    // Convert flipped positions to target positions for the effect\r\n    const targetPositions: Position[] = flippedPositions.map(pos => ({ x: pos.x, y: pos.y }));\r\n\r\n    // Create the Nine Finale effect\r\n    const finaleEffect = new NineFinaleEffect(x, y, targetPositions);\r\n    this.nineFinaleEffects.push(finaleEffect);\r\n  }\r\n\r\n  private createIceSpearEffect(x: number, y: number, flippedPositions: Array<{x: number, y: number}>): void {\r\n    console.log('❄️ 滅劍羅淵 - Ice Spear Abyss! ❄️');\r\n\r\n    // Convert flipped positions to target positions for the effect\r\n    const targetPositions: Position[] = flippedPositions.map(pos => ({ x: pos.x, y: pos.y }));\r\n\r\n    // Create the Ice Spear effect\r\n    const iceSpearEffect = new IceSpearEffect(x, y, targetPositions);\r\n    this.iceSpearEffects.push(iceSpearEffect);\r\n  }\r\n\r\n  private createCEffect(x: number, y: number): void {\r\n    // BASIC C-grade effect - Light gray elegance\r\n    const grayColors = ['#d3d3d3', '#c0c0c0', '#dcdcdc', '#f5f5f5', '#e0e0e0', '#f8f8f8', '#b8b8b8', '#a9a9a9', '#d8d8d8', '#e6e6e6'];\r\n\r\n    console.log('⚪ Basic C-Grade Move');\r\n\r\n    // SIMPLE RING - Still noticeable\r\n    for (let i = 0; i < 12; i++) {\r\n      const angle = (i / 12) * Math.PI * 2;\r\n\r\n      this.particles.push({\r\n        x: x,\r\n        y: y,\r\n        vx: Math.cos(angle) * 80,\r\n        vy: Math.sin(angle) * 80,\r\n        life: 0.8,\r\n        maxLife: 0.8,\r\n        size: Math.random() * 1.5 + 1,\r\n        color: grayColors[i % grayColors.length] ?? '#d3d3d3',\r\n        alpha: 0.8,\r\n        type: 'circle',\r\n      });\r\n    }\r\n\r\n    // SMALL SPARKLES\r\n    for (let i = 0; i < 6; i++) {\r\n      const angle = Math.random() * Math.PI * 2;\r\n      const speed = Math.random() * 60 + 40;\r\n\r\n      this.particles.push({\r\n        x: x,\r\n        y: y,\r\n        vx: Math.cos(angle) * speed,\r\n        vy: Math.sin(angle) * speed,\r\n        life: 0.6,\r\n        maxLife: 0.6,\r\n        size: 1,\r\n        color: '#d3d3d3',\r\n        alpha: 0.7,\r\n        type: 'spark',\r\n      });\r\n    }\r\n  }\r\n\r\n  // Create flip animation particles - SPECTACULAR ENHANCED!\r\n  createFlipEffect(x: number, y: number, color: string, grade?: Grade): void {\r\n    // Much more spectacular flip effects with grade-based colors!\r\n    const isBlack = color === '#000000';\r\n\r\n    // Get grade-based colors or fallback to basic colors\r\n    let gradeColors: string[];\r\n    let intensity: number;\r\n\r\n    if (grade) {\r\n      switch (grade) {\r\n        case 'SSS':\r\n          // Use cosmic_burst colors - golden theme\r\n          gradeColors = ['#ffd700', '#ffef94', '#fff68f', '#ffffe0', '#fffacd'];\r\n          intensity = 3.0;\r\n          break;\r\n        case 'SS':\r\n          // Use supernova colors - orange theme\r\n          gradeColors = ['#ff8c00', '#ffa500', '#ff7f00', '#ff6347', '#ff4500'];\r\n          intensity = 2.5;\r\n          break;\r\n        case 'S':\r\n          // Use light purple theme - 淺紫色系主題\r\n          gradeColors = ['#dda0dd', '#e6b8ea', '#d8bfd8', '#e0b0ff', '#dbb2ff'];\r\n          intensity = 2.0;\r\n          break;\r\n        case 'A':\r\n          // Use light blue theme - 淺藍色系主題\r\n          gradeColors = ['#87ceeb', '#add8e6', '#b0e0e6', '#afeeee', '#e0ffff'];\r\n          intensity = 1.5;\r\n          break;\r\n        case 'B':\r\n          // Use light green theme - 淺綠色系主題\r\n          gradeColors = ['#90ee90', '#98fb98', '#b4ffb4', '#c8ffc8', '#a8e6a8'];\r\n          intensity = 1.2;\r\n          break;\r\n        case 'C':\r\n          // Use white/gray theme - 白灰色系主題\r\n          gradeColors = ['#d3d3d3', '#c0c0c0', '#e0e0e0', '#f5f5f5', '#b8b8b8'];\r\n          intensity = 1.0;\r\n          break;\r\n        default:\r\n          gradeColors = isBlack ? ['#666666', '#888888', '#555555'] : ['#f0f0f0', '#e8e8e8', '#f5f5f5'];\r\n          intensity = 0.8;\r\n      }\r\n    } else {\r\n      gradeColors = isBlack ? ['#666666', '#888888', '#555555'] : ['#f0f0f0', '#e8e8e8', '#f5f5f5'];\r\n      intensity = 0.8;\r\n    }\r\n\r\n    const primaryColor = gradeColors[0] ?? '#ffffff';\r\n    const accentColors = gradeColors;\r\n\r\n    console.log(`🔄 Flip Effect: ${isBlack ? 'Black' : 'White'} piece flipped! Grade: ${grade || 'Basic'}`);\r\n\r\n    // EXPLOSIVE FLIP BURST - Intensity based on grade!\r\n    const burstCount = Math.floor(15 * intensity);\r\n    for (let i = 0; i < burstCount; i++) {\r\n      const angle = (i / burstCount) * Math.PI * 2;\r\n      const speed = (Math.random() * 60 + 60) * intensity;\r\n\r\n      this.particles.push({\r\n        x: x,\r\n        y: y,\r\n        vx: Math.cos(angle) * speed,\r\n        vy: Math.sin(angle) * speed,\r\n        life: 0.6 * intensity,\r\n        maxLife: 0.6 * intensity,\r\n        size: (Math.random() * 1.5 + 1) * intensity,\r\n        color: i % 3 === 0 ? primaryColor : accentColors[i % accentColors.length] ?? primaryColor,\r\n        alpha: 0.9,\r\n        type: i % 2 === 0 ? 'spark' : 'circle',\r\n      });\r\n    }\r\n\r\n    // RING EXPANSION - Visual flip wave (intensity-based)\r\n    const ringCount = Math.floor(2 + intensity);\r\n    for (let ring = 0; ring < ringCount; ring++) {\r\n      setTimeout(() => {\r\n        const particlesPerRing = Math.floor(12 + intensity * 4);\r\n        for (let i = 0; i < particlesPerRing; i++) {\r\n          const angle = (i / particlesPerRing) * Math.PI * 2;\r\n          const speed = (80 + ring * 30) * intensity;\r\n\r\n          this.particles.push({\r\n            x: x,\r\n            y: y,\r\n            vx: Math.cos(angle) * speed,\r\n            vy: Math.sin(angle) * speed,\r\n            life: 0.6 + ring * 0.2,\r\n            maxLife: 0.6 + ring * 0.2,\r\n            size: ring === 0 ? 2 : 1,\r\n            color: primaryColor,\r\n            alpha: 0.7 - ring * 0.2,\r\n            type: 'circle',\r\n          });\r\n        }\r\n      }, ring * 80);\r\n    }\r\n\r\n    // FLIP SPARKLE TRAIL - Cascading sparkles\r\n    for (let i = 0; i < 15; i++) {\r\n      const angle = Math.random() * Math.PI * 2;\r\n      const speed = Math.random() * 60 + 40;\r\n\r\n      setTimeout(() => {\r\n        this.particles.push({\r\n          x: x + (Math.random() - 0.5) * 20,\r\n          y: y + (Math.random() - 0.5) * 20,\r\n          vx: Math.cos(angle) * speed,\r\n          vy: Math.sin(angle) * speed,\r\n          life: 0.7,\r\n          maxLife: 0.7,\r\n          size: Math.random() * 1.5 + 1,\r\n          color: accentColors[Math.floor(Math.random() * accentColors.length)] ?? '#d3d3d3',\r\n          alpha: 0.8,\r\n          type: 'spark',\r\n        });\r\n      }, Math.random() * 200);\r\n    }\r\n\r\n    // MAGIC DUST - Floating ambient particles\r\n    for (let i = 0; i < 8; i++) {\r\n      setTimeout(() => {\r\n        this.particles.push({\r\n          x: x + (Math.random() - 0.5) * 30,\r\n          y: y + (Math.random() - 0.5) * 30,\r\n          vx: (Math.random() - 0.5) * 30,\r\n          vy: -Math.random() * 40 - 20,\r\n          life: 1.2,\r\n          maxLife: 1.2,\r\n          size: Math.random() * 1 + 0.5,\r\n          color: primaryColor,\r\n          alpha: 0.6,\r\n          type: 'circle',\r\n        });\r\n      }, Math.random() * 300);\r\n    }\r\n\r\n    // FLIP SHOCKWAVE - Single expanding ring\r\n    setTimeout(() => {\r\n      for (let angle = 0; angle < Math.PI * 2; angle += 0.2) {\r\n        this.particles.push({\r\n          x: x,\r\n          y: y,\r\n          vx: Math.cos(angle) * 150,\r\n          vy: Math.sin(angle) * 150,\r\n          life: 0.4,\r\n          maxLife: 0.4,\r\n          size: 1.5,\r\n          color: isBlack ? '#333333' : '#f9f9f9',\r\n          alpha: 0.5,\r\n          type: 'circle',\r\n        });\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  // Clean up\r\n  destroy(): void {\r\n    if (this.animationId) {\r\n      cancelAnimationFrame(this.animationId);\r\n    }\r\n    this.particles = [];\r\n    this.canvas.remove();\r\n  }\r\n\r\n  // Get particle count for performance monitoring\r\n  getParticleCount(): number {\r\n    return this.particles.length;\r\n  }\r\n\r\n  // Special situation effects\r\n  private createCornerExplosion(x: number, y: number): void {\r\n    // Golden castle walls effect for corner captures\r\n    const castleColors = ['#ffd700', '#ffdf00', '#ffa500'];\r\n\r\n    // Castle wall pattern\r\n    for (let wall = 0; wall < 4; wall++) {\r\n      const angle = (wall / 4) * Math.PI * 2;\r\n\r\n      for (let brick = 0; brick < 20; brick++) {\r\n        setTimeout(() => {\r\n          this.particles.push({\r\n            x: x,\r\n            y: y,\r\n            vx: Math.cos(angle) * 300 + (Math.random() - 0.5) * 100,\r\n            vy: Math.sin(angle) * 300 + (Math.random() - 0.5) * 100,\r\n            life: 1.5,\r\n            maxLife: 1.5,\r\n            size: Math.random() * 3 + 2,\r\n            color: castleColors[brick % castleColors.length] ?? '#ffd700',\r\n            alpha: 1,\r\n            type: 'circle',\r\n          });\r\n        }, brick * 30 + wall * 200);\r\n      }\r\n    }\r\n  }\r\n\r\n  private createComebackEffect(x: number, y: number): void {\r\n    // Phoenix rising effect for comeback moves\r\n    const phoenixColors = ['#ff4500', '#ff6347', '#ffa500', '#ff1493'];\r\n\r\n    // Rising phoenix flames\r\n    for (let i = 0; i < 80; i++) {\r\n      setTimeout(() => {\r\n        this.particles.push({\r\n          x: x + (Math.random() - 0.5) * 60,\r\n          y: y + Math.random() * 30,\r\n          vx: (Math.random() - 0.5) * 200,\r\n          vy: -Math.random() * 400 - 200,\r\n          life: 2.0,\r\n          maxLife: 2.0,\r\n          size: Math.random() * 4 + 2,\r\n          color: phoenixColors[Math.floor(Math.random() * phoenixColors.length)] ?? '#ff6347',\r\n          alpha: 0.9,\r\n          type: 'spark',\r\n        });\r\n      }, Math.random() * 600);\r\n    }\r\n  }\r\n\r\n  private createMassiveEffect(x: number, y: number): void {\r\n    // Tsunami wave for massive flips\r\n    const waveColors = ['#0080ff', '#00bfff', '#87ceeb', '#b0e0e6'];\r\n\r\n    // Wave fronts\r\n    for (let wave = 0; wave < 6; wave++) {\r\n      setTimeout(() => {\r\n        for (let particle = 0; particle < 40; particle++) {\r\n          const angle = (particle / 40) * Math.PI * 2;\r\n\r\n          this.particles.push({\r\n            x: x,\r\n            y: y,\r\n            vx: Math.cos(angle) * (200 + wave * 50),\r\n            vy: Math.sin(angle) * (200 + wave * 50),\r\n            life: 1.0 + wave * 0.2,\r\n            maxLife: 1.0 + wave * 0.2,\r\n            size: Math.random() * 3 + 1,\r\n            color: waveColors[wave % waveColors.length] ?? '#0080ff',\r\n            alpha: 0.8,\r\n            type: 'circle',\r\n          });\r\n        }\r\n      }, wave * 150);\r\n    }\r\n  }\r\n\r\n  private createDominationEffect(x: number, y: number): void {\r\n    // Crown and scepter effect for domination\r\n    const royalColors = ['#9932cc', '#8b00ff', '#ffd700', '#daa520'];\r\n\r\n    // Crown jewels\r\n    for (let jewel = 0; jewel < 12; jewel++) {\r\n      const angle = (jewel / 12) * Math.PI * 2;\r\n\r\n      setTimeout(() => {\r\n        this.particles.push({\r\n          x: x + Math.cos(angle) * 50,\r\n          y: y + Math.sin(angle) * 50,\r\n          vx: Math.cos(angle) * 150,\r\n          vy: Math.sin(angle) * 150,\r\n          life: 1.8,\r\n          maxLife: 1.8,\r\n          size: Math.random() * 4 + 3,\r\n          color: royalColors[jewel % royalColors.length] ?? '#9932cc',\r\n          alpha: 1,\r\n          type: 'circle',\r\n        });\r\n      }, jewel * 80);\r\n    }\r\n  }\r\n\r\n  // Chain reaction effect\r\n  createChainEffect(x: number, y: number): void {\r\n    if (!this.enabled) {return;}\r\n\r\n    // Lightning chain for chain reactions\r\n    const lightningColors = ['#ffff00', '#ffffff', '#00ffff'];\r\n\r\n    // Lightning bolts\r\n    for (let bolt = 0; bolt < 8; bolt++) {\r\n      const angle = (bolt / 8) * Math.PI * 2;\r\n\r\n      for (let segment = 0; segment < 10; segment++) {\r\n        setTimeout(() => {\r\n          this.particles.push({\r\n            x: x,\r\n            y: y,\r\n            vx: Math.cos(angle) * (100 + segment * 20) + (Math.random() - 0.5) * 60,\r\n            vy: Math.sin(angle) * (100 + segment * 20) + (Math.random() - 0.5) * 60,\r\n            life: 0.4,\r\n            maxLife: 0.4,\r\n            size: 2,\r\n            color: lightningColors[segment % lightningColors.length] ?? '#ffff00',\r\n            alpha: 1,\r\n            type: 'spark',\r\n          });\r\n        }, segment * 20 + bolt * 50);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 創建飄起的等級文字效果\r\n   */\r\n  createFloatingGradeText(x: number, y: number, grade: Grade): void {\r\n    if (!this.enabled) {return;}\r\n\r\n    // 定義每個等級的顏色和大小\r\n    const gradeConfig = {\r\n      'C': { color: '#d3d3d3', fontSize: 24 },\r\n      'B': { color: '#90ee90', fontSize: 28 },\r\n      'A': { color: '#87ceeb', fontSize: 42 },\r\n      'S': { color: '#9932cc', fontSize: 48 },\r\n      'SS': { color: '#ff8c00', fontSize: 56 },\r\n      'SSS': { color: '#ffd700', fontSize: 64 },\r\n    };\r\n\r\n    const config = gradeConfig[grade];\r\n    if (!config) {return;}\r\n\r\n    console.log(`💫 Creating floating text: ${grade} at (${x}, ${y})`);\r\n\r\n    // 嘗試創建 Canvas 文字粒子\r\n    if (this.ctx && this.canvas) {\r\n      this.particles.push({\r\n        x: x,\r\n        y: y,\r\n        vx: 0, // 不水平移動\r\n        vy: -80, // 向上飄起，速度根據等級調整\r\n        life: 2.0, // 顯示2秒\r\n        maxLife: 2.0,\r\n        size: config.fontSize,\r\n        color: config.color,\r\n        alpha: 1.0,\r\n        type: 'text',\r\n        text: grade,\r\n        fontSize: config.fontSize,\r\n      });\r\n\r\n      // 為高等級創建額外的文字效果\r\n      if (grade === 'SSS') {\r\n        setTimeout(() => {\r\n          this.particles.push({\r\n            x: x,\r\n            y: y - 10,\r\n            vx: 0,\r\n            vy: -60,\r\n            life: 2.5,\r\n            maxLife: 2.5,\r\n            size: 72,\r\n            color: '#ffa500',\r\n            alpha: 0.7,\r\n            type: 'text',\r\n            text: grade,\r\n            fontSize: 72,\r\n          });\r\n        }, 100);\r\n      } else if (grade === 'SS') {\r\n        setTimeout(() => {\r\n          this.particles.push({\r\n            x: x,\r\n            y: y - 8,\r\n            vx: 0,\r\n            vy: -65,\r\n            life: 2.2,\r\n            maxLife: 2.2,\r\n            size: 64,\r\n            color: '#ff4500',\r\n            alpha: 0.6,\r\n            type: 'text',\r\n            text: grade,\r\n            fontSize: 64,\r\n          });\r\n        }, 80);\r\n      } else if (grade === 'S') {\r\n        setTimeout(() => {\r\n          this.particles.push({\r\n            x: x,\r\n            y: y - 6,\r\n            vx: 0,\r\n            vy: -70,\r\n            life: 2.0,\r\n            maxLife: 2.0,\r\n            size: 54,\r\n            color: '#ba55d3',\r\n            alpha: 0.5,\r\n            type: 'text',\r\n            text: grade,\r\n            fontSize: 54,\r\n          });\r\n        }, 60);\r\n      } else if (grade === 'A') {\r\n        setTimeout(() => {\r\n          this.particles.push({\r\n            x: x,\r\n            y: y - 5,\r\n            vx: 0,\r\n            vy: -75,\r\n            life: 1.8,\r\n            maxLife: 1.8,\r\n            size: 48,\r\n            color: '#4169e1',\r\n            alpha: 0.4,\r\n            type: 'text',\r\n            text: grade,\r\n            fontSize: 48,\r\n          });\r\n        }, 40);\r\n      }\r\n    } else {\r\n      // 使用 CSS 後備方案\r\n      this.createCSSFloatingText(x, y, grade);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSS 後備方案創建飄起文字\r\n   */\r\n  private createCSSFloatingText(x: number, y: number, grade: Grade): void {\r\n    console.log(`🎨 Using CSS fallback for floating text: ${grade}`);\r\n\r\n    const container = this.canvas.parentElement;\r\n    if (!container) {return;}\r\n\r\n    // 創建文字元素\r\n    const textElement = document.createElement('div');\r\n    textElement.className = `floating-grade-text grade-${grade.toLowerCase()}`;\r\n    textElement.textContent = grade;\r\n\r\n    // 設定位置\r\n    textElement.style.left = `${x}px`;\r\n    textElement.style.top = `${y}px`;\r\n    textElement.style.transform = 'translate(-50%, -50%)';\r\n\r\n    // 新增到容器\r\n    container.appendChild(textElement);\r\n\r\n    // 2秒後移除\r\n    setTimeout(() => {\r\n      if (textElement.parentNode) {\r\n        textElement.parentNode.removeChild(textElement);\r\n      }\r\n    }, 2000);\r\n  }\r\n}","import type { Language, TranslationKey, AllTranslations, LanguageData } from './types';\r\n\r\n// Import translation files\r\nimport enTranslations from './locales/en.json';\r\nimport zhHantTranslations from './locales/zh-Hant.json';\r\nimport zhHansTranslations from './locales/zh-Hans.json';\r\n\r\n// Current language state\r\nlet currentLanguage: Language = 'en';\r\n\r\n// Consolidated translations object\r\nconst translations: AllTranslations = {\r\n  en: enTranslations as LanguageData,\r\n  'zh-Hant': zhHantTranslations as LanguageData,\r\n  'zh-Hans': zhHansTranslations as LanguageData,\r\n};\r\n\r\n/**\r\n * Translate a key with optional parameter substitution\r\n * @param key Translation key\r\n * @param params Optional parameters for string interpolation\r\n * @returns Translated string\r\n */\r\nexport function t(key: string, params?: Record<string, string | number>): string {\r\n  const currentTranslations = translations[currentLanguage] as LanguageData;\r\n  let translation = currentTranslations[key] ?? key;\r\n\r\n  if (params) {\r\n    translation = translation.replace(/\\$\\{(\\w+)\\}/g, (_match: string, k: string) =>\r\n      Object.prototype.hasOwnProperty.call(params, k) ? String(params[k]) : '',\r\n    );\r\n  }\r\n\r\n  return translation;\r\n}\r\n\r\n/**\r\n * Set the current language\r\n * @param lang Language to set\r\n */\r\nexport function setLanguage(lang: Language): void {\r\n  if (lang in translations) {\r\n    currentLanguage = lang;\r\n    if (typeof document !== 'undefined') {\r\n      document.documentElement.lang = lang;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get the current language\r\n * @returns Current language\r\n */\r\nexport function getLanguage(): Language {\r\n  return currentLanguage;\r\n}\r\n\r\n/**\r\n * Apply translations to elements with data-i18n attributes\r\n * @param root Root element to search within (defaults to document)\r\n */\r\nexport function applyTranslations(root: ParentNode = document): void {\r\n  const elements = root.querySelectorAll<HTMLElement>('[data-i18n]');\r\n  elements.forEach(el => {\r\n    const key = el.dataset.i18n!;\r\n    el.textContent = t(key);\r\n  });\r\n}\r\n\r\n/**\r\n * Get all available languages\r\n * @returns Array of available language codes\r\n */\r\nexport function getAvailableLanguages(): Language[] {\r\n  return Object.keys(translations) as Language[];\r\n}\r\n\r\n/**\r\n * Check if a language is supported\r\n * @param lang Language code to check\r\n * @returns True if language is supported\r\n */\r\nexport function isLanguageSupported(lang: string): lang is Language {\r\n  return lang in translations;\r\n}\r\n\r\n/**\r\n * Get all translations for a specific language\r\n * @param lang Language code\r\n * @returns Translation object for the language\r\n */\r\nexport function getTranslationsForLanguage(lang: Language): LanguageData | null {\r\n  return (lang in translations) ? translations[lang] as LanguageData : null;\r\n}\r\n\r\n/**\r\n * Type-safe translation function (for development)\r\n * @param key Translation key (type-checked)\r\n * @param params Optional parameters for string interpolation\r\n * @returns Translated string\r\n */\r\nexport function ts(key: TranslationKey, params?: Record<string, string | number>): string {\r\n  return t(key, params);\r\n}\r\n\r\n// Re-export types for convenience\r\nexport type { Language, TranslationKey, LanguageData, AllTranslations } from './types';","/**\r\n * 連擊系統\r\n * 追蹤玩家連續下棋狀態並觸發相應特效\r\n */\r\n\r\nimport type { PlayerColor } from '@/types/game-types';\r\nimport { ParticlePresetType, getPresetForSpecialMove, blendPresets, PARTICLE_PRESETS } from './particle-presets';\r\nimport { t } from '@/i18n/index';\r\n\r\nexport interface ComboState {\r\n  /** 連擊次數 */\r\n  count: number;\r\n  /** 當前連擊玩家 */\r\n  player: PlayerColor | null;\r\n  /** 連擊倍數 */\r\n  multiplier: number;\r\n  /** 連擊開始時間 */\r\n  startTime: number;\r\n  /** 是否處於連擊狀態 */\r\n  isActive: boolean;\r\n  /** 最高連擊記錄 */\r\n  maxCombo: number;\r\n  /** 連擊類型 */\r\n  type: ComboType;\r\n}\r\n\r\nexport type ComboType =\r\n  | 'none'\r\n  | 'double'\r\n  | 'triple'\r\n  | 'quadruple'\r\n  | 'quintuple'\r\n  | 'sextuple'\r\n  | 'septuple';\r\n\r\nexport interface ComboEffect {\r\n  /** 特效類型 */\r\n  effectType: ParticlePresetType;\r\n  /** 強度倍數 */\r\n  intensity: number;\r\n  /** 持續時間 */\r\n  duration: number;\r\n  /** 特殊音效 */\r\n  soundEffect?: string;\r\n  /** 螢幕震動 */\r\n  screenShake?: boolean;\r\n  /** 慢動作效果 */\r\n  slowMotion?: boolean;\r\n}\r\n\r\nexport interface ComboEvent {\r\n  type: 'combo_started' | 'combo_continued' | 'combo_ended' | 'combo_broken';\r\n  player: PlayerColor;\r\n  comboCount: number;\r\n  comboType: ComboType;\r\n  effect?: ComboEffect;\r\n  timestamp: number;\r\n}\r\n\r\n/**\r\n * 連擊等級配置\r\n */\r\nexport const COMBO_LEVELS: Record<ComboType, ComboEffect> = {\r\n  none: {\r\n    effectType: 'snowflake',\r\n    intensity: 1.0,\r\n    duration: 500,\r\n  },\r\n  double: {\r\n    effectType: 'magic',\r\n    intensity: 1.5,\r\n    duration: 800,\r\n    soundEffect: 'combo_double',\r\n  },\r\n  triple: {\r\n    effectType: 'fire',\r\n    intensity: 2.0,\r\n    duration: 1200,\r\n    soundEffect: 'combo_triple',\r\n    screenShake: true,\r\n  },\r\n  quadruple: {\r\n    effectType: 'explosion',\r\n    intensity: 2.5,\r\n    duration: 1500,\r\n    soundEffect: 'combo_quadruple',\r\n    screenShake: true,\r\n  },\r\n  quintuple: {\r\n    effectType: 'lightning',\r\n    intensity: 3.0,\r\n    duration: 1800,\r\n    soundEffect: 'combo_quintuple',\r\n    screenShake: true,\r\n    slowMotion: false,\r\n  },\r\n  sextuple: {\r\n    effectType: 'storm',\r\n    intensity: 4.0,\r\n    duration: 2200,\r\n    soundEffect: 'combo_sextuple',\r\n    screenShake: true,\r\n    slowMotion: true,\r\n  },\r\n  septuple: {\r\n    effectType: 'blackhole',\r\n    intensity: 5.0,\r\n    duration: 2500,\r\n    soundEffect: 'combo_septuple',\r\n    screenShake: true,\r\n    slowMotion: true,\r\n  },\r\n};\r\n\r\n/**\r\n * 連擊系統主類\r\n */\r\nexport class ComboSystem {\r\n  private _state: ComboState;\r\n  private _eventHandlers: ((event: ComboEvent) => void)[] = [];\r\n  private _history: ComboEvent[] = [];\r\n\r\n  constructor() {\r\n    this._state = this.createInitialState();\r\n  }\r\n\r\n  /**\r\n   * 創建初始狀態\r\n   */\r\n  private createInitialState(): ComboState {\r\n    return {\r\n      count: 0,\r\n      player: null,\r\n      multiplier: 1.0,\r\n      startTime: 0,\r\n      isActive: false,\r\n      maxCombo: 0,\r\n      type: 'none',\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 獲取當前連擊狀態\r\n   */\r\n  get state(): Readonly<ComboState> {\r\n    return Object.freeze({ ...this._state });\r\n  }\r\n\r\n  /**\r\n   * 獲取連擊歷史\r\n   */\r\n  get history(): readonly ComboEvent[] {\r\n    return Object.freeze([...this._history]);\r\n  }\r\n\r\n  /**\r\n   * 處理玩家移動\r\n   * @param player 當前玩家\r\n   * @param opponentCanMove 對手是否能移動\r\n   * @param moveScore 當前移動分數\r\n   */\r\n  processMove(player: PlayerColor, opponentCanMove: boolean, moveScore?: number): ComboEvent | null {\r\n    console.log(`🔥 Combo: 處理移動 - Player: ${player}, 對手可移動: ${opponentCanMove}, 分數: ${moveScore}`);\r\n\r\n    // 如果對手能移動，重置連擊\r\n    if (opponentCanMove) {\r\n      console.log('🔥 Combo: 對手可移動，結束連擊');\r\n      return this.endCombo();\r\n    } else {\r\n      console.log('🔥 Combo: 對手無法移動，繼續連擊！');\r\n    }\r\n\r\n    // 檢查是否是同一玩家繼續連擊\r\n    if (this._state.player === player) {\r\n      return this.continueCombo(moveScore);\r\n    } else {\r\n      // 新玩家開始連擊\r\n      return this.startCombo(player, moveScore);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 開始新連擊\r\n   */\r\n  private startCombo(player: PlayerColor, moveScore?: number): ComboEvent {\r\n    // 結束之前的連擊\r\n    if (this._state.isActive) {\r\n      this.endCombo();\r\n    }\r\n\r\n    this._state = {\r\n      count: 2, // 第一次連擊至少是2回合\r\n      player,\r\n      multiplier: 1.2,\r\n      startTime: Date.now(),\r\n      isActive: true,\r\n      maxCombo: Math.max(this._state.maxCombo, 2),\r\n      type: 'double',\r\n    };\r\n\r\n    const event: ComboEvent = {\r\n      type: 'combo_started',\r\n      player,\r\n      comboCount: this._state.count,\r\n      comboType: this._state.type,\r\n      effect: this.getComboEffect(),\r\n      timestamp: Date.now(),\r\n    };\r\n\r\n    this._emitEvent(event);\r\n    this._history.push(event);\r\n\r\n    return event;\r\n  }\r\n\r\n  /**\r\n   * 繼續連擊\r\n   */\r\n  private continueCombo(moveScore?: number): ComboEvent {\r\n    if (!this._state.isActive || !this._state.player) {\r\n      throw new Error('Cannot continue combo: no active combo');\r\n    }\r\n\r\n    this._state.count++;\r\n    this._state.multiplier = Math.min(1.0 + (this._state.count * 0.2), 3.0);\r\n    this._state.maxCombo = Math.max(this._state.maxCombo, this._state.count);\r\n    this._state.type = this.determineComboType(this._state.count);\r\n\r\n    const event: ComboEvent = {\r\n      type: 'combo_continued',\r\n      player: this._state.player,\r\n      comboCount: this._state.count,\r\n      comboType: this._state.type,\r\n      effect: this.getComboEffect(),\r\n      timestamp: Date.now(),\r\n    };\r\n\r\n    this._emitEvent(event);\r\n    this._history.push(event);\r\n\r\n    return event;\r\n  }\r\n\r\n  /**\r\n   * 結束連擊\r\n   */\r\n  private endCombo(): ComboEvent | null {\r\n    if (!this._state.isActive || !this._state.player) {\r\n      return null;\r\n    }\r\n\r\n    const event: ComboEvent = {\r\n      type: 'combo_ended',\r\n      player: this._state.player,\r\n      comboCount: this._state.count,\r\n      comboType: this._state.type,\r\n      timestamp: Date.now(),\r\n    };\r\n\r\n    // 重置狀態\r\n    this._state = this.createInitialState();\r\n    this._state.maxCombo = this.state.maxCombo; // 保持最高記錄\r\n\r\n    this._emitEvent(event);\r\n    this._history.push(event);\r\n\r\n    return event;\r\n  }\r\n\r\n  /**\r\n   * 強制中斷連擊\r\n   */\r\n  breakCombo(reason: string = 'manual'): ComboEvent | null {\r\n    if (!this._state.isActive || !this._state.player) {\r\n      return null;\r\n    }\r\n\r\n    const event: ComboEvent = {\r\n      type: 'combo_broken',\r\n      player: this._state.player,\r\n      comboCount: this._state.count,\r\n      comboType: this._state.type,\r\n      timestamp: Date.now(),\r\n    };\r\n\r\n    this._state = this.createInitialState();\r\n    this._state.maxCombo = this.state.maxCombo;\r\n\r\n    this._emitEvent(event);\r\n    this._history.push(event);\r\n\r\n    return event;\r\n  }\r\n\r\n  /**\r\n   * 判斷連擊類型\r\n   */\r\n  private determineComboType(count: number): ComboType {\r\n    if (count >= 7) {return 'septuple';}\r\n    if (count >= 6) {return 'sextuple';}\r\n    if (count >= 5) {return 'quintuple';}\r\n    if (count >= 4) {return 'quadruple';}\r\n    if (count >= 3) {return 'triple';}\r\n    if (count >= 2) {return 'double';}\r\n    return 'none';\r\n  }\r\n\r\n  /**\r\n   * 獲取連擊特效配置\r\n   */\r\n  private getComboEffect(): ComboEffect {\r\n    const baseEffect = COMBO_LEVELS[this._state.type];\r\n\r\n    // 根據連擊次數調整強度\r\n    const intensityBonus = Math.min(this._state.count * 0.1, 1.0);\r\n\r\n    return {\r\n      ...baseEffect,\r\n      intensity: baseEffect.intensity + intensityBonus,\r\n      duration: baseEffect.duration + (this._state.count * 50),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 獲取連擊統計\r\n   */\r\n  getStats(): {\r\n    currentCombo: number;\r\n    maxCombo: number;\r\n    totalCombos: number;\r\n    averageComboLength: number;\r\n    comboTypeDistribution: Record<ComboType, number>;\r\n    } {\r\n    const combos = this._history.filter(e => e.type === 'combo_ended' || e.type === 'combo_broken');\r\n    const totalCombos = combos.length;\r\n    const averageLength = totalCombos > 0\r\n      ? combos.reduce((sum, combo) => sum + combo.comboCount, 0) / totalCombos\r\n      : 0;\r\n\r\n    const distribution: Record<ComboType, number> = {\r\n      none: 0,\r\n      double: 0,\r\n      triple: 0,\r\n      quadruple: 0,\r\n      quintuple: 0,\r\n      sextuple: 0,\r\n      septuple: 0,\r\n    };\r\n\r\n    combos.forEach(combo => {\r\n      distribution[combo.comboType]++;\r\n    });\r\n\r\n    return {\r\n      currentCombo: this._state.count,\r\n      maxCombo: this._state.maxCombo,\r\n      totalCombos,\r\n      averageComboLength: averageLength,\r\n      comboTypeDistribution: distribution,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 獲取連擊建議特效\r\n   */\r\n  getSuggestedEffect(comboType: ComboType): ParticlePresetType {\r\n    switch (comboType) {\r\n      case 'septuple':\r\n        return 'blackhole';\r\n      case 'sextuple':\r\n        return 'storm';\r\n      case 'quintuple':\r\n        return 'lightning';\r\n      case 'quadruple':\r\n        return 'explosion';\r\n      case 'triple':\r\n        return 'fire';\r\n      case 'double':\r\n        return 'magic';\r\n      default:\r\n        return 'snowflake';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 檢查是否應該播放特殊音效\r\n   */\r\n  shouldPlaySpecialSound(comboType: ComboType): boolean {\r\n    return !['none', 'double'].includes(comboType);\r\n  }\r\n\r\n  /**\r\n   * 檢查是否應該觸發螢幕震動\r\n   */\r\n  shouldTriggerScreenShake(comboType: ComboType): boolean {\r\n    return ['quintuple', 'sextuple', 'septuple'].includes(comboType);\r\n  }\r\n\r\n  /**\r\n   * 檢查是否應該觸發慢動作效果\r\n   */\r\n  shouldTriggerSlowMotion(comboType: ComboType): boolean {\r\n    return comboType === 'septuple';\r\n  }\r\n\r\n  /**\r\n   * 重置系統\r\n   */\r\n  reset(): void {\r\n    this._state = this.createInitialState();\r\n    this._history = [];\r\n  }\r\n\r\n  /**\r\n   * 註冊事件處理器\r\n   */\r\n  addEventListener(handler: (event: ComboEvent) => void): void {\r\n    this._eventHandlers.push(handler);\r\n  }\r\n\r\n  /**\r\n   * 移除事件處理器\r\n   */\r\n  removeEventListener(handler: (event: ComboEvent) => void): void {\r\n    const index = this._eventHandlers.indexOf(handler);\r\n    if (index !== -1) {\r\n      this._eventHandlers.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 發送事件\r\n   */\r\n  private _emitEvent(event: ComboEvent): void {\r\n    this._eventHandlers.forEach(handler => {\r\n      try {\r\n        handler(event);\r\n      } catch (error) {\r\n        console.error('Combo event handler error:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 獲取連擊顯示文本\r\n   */\r\n  getComboDisplayText(): string {\r\n    if (!this._state.isActive) {return '';}\r\n\r\n    const key = `combo.${this._state.type}`;\r\n    const text = t(key);\r\n    return text === key ? `${this._state.count} combo!` : text;\r\n  }\r\n\r\n  /**\r\n   * 獲取連擊顏色\r\n   */\r\n  getComboDisplayColor(): string {\r\n    const colors = {\r\n      none: '#ffffff',\r\n      double: '#90ee90',\r\n      triple: '#ffa500',\r\n      quadruple: '#ff6347',\r\n      quintuple: '#ff1493',\r\n      sextuple: '#9932cc',\r\n      septuple: '#ffd700',\r\n    };\r\n\r\n    return colors[this._state.type as keyof typeof colors] || '#ffffff';\r\n  }\r\n}","/**\r\n * 必殺技特效系統\r\n * 處理角落支配、大規模翻轉、完美遊戲、逆轉等特殊招式\r\n */\r\n\r\nimport type { PlayerColor, BoardPosition } from '@/types/game-types';\r\nimport { ParticlePresetType, ParticlePresetConfig, PARTICLE_PRESETS, blendPresets } from './particle-presets';\r\nimport { t } from '@/i18n/index';\r\n\r\nexport type SpecialMoveType =\r\n  | 'corner_joseki'    // 角部定式 - 经典角部布局\r\n  | 'great_reversal'   // 大翻盘 - 乾坤大挪移，局势逆转\r\n  | 'total_domination' // 完全压制 - 如臂使指，掌控全局\r\n  | 'desperate_kill'   // 绝地反杀 - 绝境求生，反败为胜\r\n  | 'perfect_endgame'  // 完美收官 - 收官如神，无懈可击\r\n  | 'edge_control'     // 边线掌控 - 边线为王，稳扎稳打\r\n  | 'chain_reaction'   // 连锁反应 - 环环相扣，精妙计算\r\n  | 'time_control';    // 时间掌控 - 运筹帷幄，决胜千里\r\n\r\nexport interface SpecialMoveCondition {\r\n  /** 翻轉棋子數量要求 */\r\n  minFlipCount?: number;\r\n  /** 分數差距要求 */\r\n  scoreDifference?: { min: number; max: number };\r\n  /** 位置要求 */\r\n  positionType?: 'corner' | 'edge' | 'center';\r\n  /** 時機要求 */\r\n  timing?: 'early' | 'mid' | 'late';\r\n  /** 特殊條件 */\r\n  special?: string;\r\n}\r\n\r\nexport interface SpecialMoveEffect {\r\n  /** 特效類型 */\r\n  type: SpecialMoveType;\r\n  /** 粒子效果配置 */\r\n  particleEffect: ParticlePresetConfig;\r\n  /** 視覺效果 */\r\n  visual: {\r\n    screenShake: boolean;\r\n    slowMotion: boolean;\r\n    zoom: boolean;\r\n    cameraMovement: boolean;\r\n    colorFilter?: string;\r\n  };\r\n  /** 音效 */\r\n  audio: {\r\n    soundEffect: string;\r\n    volume: number;\r\n    echo?: boolean;\r\n    reverb?: boolean;\r\n  };\r\n  /** 持續時間 */\r\n  duration: number;\r\n  /** 文字顯示 */\r\n  display: {\r\n    title: string;\r\n    subtitle?: string;\r\n    color: string;\r\n    fontSize: number;\r\n    animation: 'fade' | 'zoom' | 'slide' | 'explode';\r\n  };\r\n}\r\n\r\n/**\r\n * 特殊招式檢測條件\r\n */\r\nexport const SPECIAL_MOVE_CONDITIONS: Record<SpecialMoveType, SpecialMoveCondition> = {\r\n  corner_joseki: {\r\n    positionType: 'corner',\r\n    minFlipCount: 3,\r\n    timing: 'early' as any,\r\n  },\r\n  great_reversal: {\r\n    minFlipCount: 6, // 大翻盘需要至少6个棋子翻转\r\n  },\r\n  total_domination: {\r\n    scoreDifference: { min: 15, max: 999 }, // 完全压制需要领先15分以上\r\n    minFlipCount: 4, // 至少翻转4个棋子\r\n  },\r\n  desperate_kill: {\r\n    scoreDifference: { min: -15, max: -1 }, // 绝地反杀需要落后15分以内\r\n    minFlipCount: 4, // 至少翻转4个棋子实现反杀\r\n  },\r\n  perfect_endgame: {\r\n    scoreDifference: { min: 20, max: 999 }, // 完美收官需要大幅领先\r\n    special: 'near_endgame',\r\n  },\r\n  edge_control: {\r\n    positionType: 'edge',\r\n    minFlipCount: 5, // 边线掌控需要至少5个棋子翻转\r\n  },\r\n  chain_reaction: {\r\n    minFlipCount: 8, // 连锁反应需要至少8个棋子翻转\r\n    special: 'multiple_directions',\r\n  },\r\n  time_control: {\r\n    minFlipCount: 10, // 时间掌控需要至少10个棋子翻转\r\n    special: 'ultra_rare',\r\n  },\r\n};\r\n\r\n/**\r\n * 特殊招式效果配置\r\n */\r\nexport const SPECIAL_MOVE_EFFECTS: Record<SpecialMoveType, SpecialMoveEffect> = {\r\n  corner_joseki: {\r\n    type: 'corner_joseki',\r\n    particleEffect: blendPresets('explosion', 'magic', 0.7),\r\n    visual: {\r\n      screenShake: true,\r\n      slowMotion: false,\r\n      zoom: true,\r\n      cameraMovement: true,\r\n      colorFilter: '#ffd700',\r\n    },\r\n    audio: {\r\n      soundEffect: 'corner_joseki',\r\n      volume: 0.8,\r\n      echo: true,\r\n    },\r\n    duration: 1500,\r\n    display: {\r\n      title: t('special.corner_joseki'),\r\n      subtitle: t('special.corner_joseki.subtitle'),\r\n      color: '#ffd700',\r\n      fontSize: 36,\r\n      animation: 'explode',\r\n    },\r\n  },\r\n\r\n  great_reversal: {\r\n    type: 'great_reversal',\r\n    particleEffect: blendPresets('storm', 'lightning', 0.6),\r\n    visual: {\r\n      screenShake: true,\r\n      slowMotion: true,\r\n      zoom: true,\r\n      cameraMovement: true,\r\n      colorFilter: '#87ceeb',\r\n    },\r\n    audio: {\r\n      soundEffect: 'great_reversal',\r\n      volume: 0.9,\r\n      echo: true,\r\n      reverb: true,\r\n    },\r\n    duration: 2000,\r\n    display: {\r\n      title: t('special.great_reversal'),\r\n      subtitle: t('special.great_reversal.subtitle'),\r\n      color: '#87ceeb',\r\n      fontSize: 42,\r\n      animation: 'zoom',\r\n    },\r\n  },\r\n\r\n  total_domination: {\r\n    type: 'total_domination',\r\n    particleEffect: blendPresets('blackhole', 'magic', 0.8),\r\n    visual: {\r\n      screenShake: true,\r\n      slowMotion: true,\r\n      zoom: false,\r\n      cameraMovement: false,\r\n      colorFilter: '#9932cc',\r\n    },\r\n    audio: {\r\n      soundEffect: 'total_domination',\r\n      volume: 1.0,\r\n      echo: true,\r\n      reverb: true,\r\n    },\r\n    duration: 2500,\r\n    display: {\r\n      title: t('special.total_domination'),\r\n      subtitle: t('special.total_domination.subtitle'),\r\n      color: '#9932cc',\r\n      fontSize: 48,\r\n      animation: 'explode',\r\n    },\r\n  },\r\n\r\n  desperate_kill: {\r\n    type: 'desperate_kill',\r\n    particleEffect: blendPresets('fire', 'explosion', 0.8),\r\n    visual: {\r\n      screenShake: true,\r\n      slowMotion: true,\r\n      zoom: true,\r\n      cameraMovement: true,\r\n      colorFilter: '#ff4500',\r\n    },\r\n    audio: {\r\n      soundEffect: 'desperate_kill',\r\n      volume: 0.95,\r\n      echo: true,\r\n      reverb: true,\r\n    },\r\n    duration: 2200,\r\n    display: {\r\n      title: t('special.desperate_kill'),\r\n      subtitle: t('special.desperate_kill.subtitle'),\r\n      color: '#ff4500',\r\n      fontSize: 44,\r\n      animation: 'slide',\r\n    },\r\n  },\r\n\r\n  perfect_endgame: {\r\n    type: 'perfect_endgame',\r\n    particleEffect: {\r\n      ...PARTICLE_PRESETS.blackhole,\r\n      colors: ['#ffd700', '#ffdf00', '#fff700', '#ffa500', '#ffffff'],\r\n    },\r\n    visual: {\r\n      screenShake: true,\r\n      slowMotion: true,\r\n      zoom: true,\r\n      cameraMovement: true,\r\n      colorFilter: '#ffd700',\r\n    },\r\n    audio: {\r\n      soundEffect: 'perfect_endgame',\r\n      volume: 1.0,\r\n      echo: true,\r\n      reverb: true,\r\n    },\r\n    duration: 3000,\r\n    display: {\r\n      title: t('special.perfect_endgame'),\r\n      subtitle: t('special.perfect_endgame.subtitle'),\r\n      color: '#ffd700',\r\n      fontSize: 52,\r\n      animation: 'zoom',\r\n    },\r\n  },\r\n\r\n  edge_control: {\r\n    type: 'edge_control',\r\n    particleEffect: blendPresets('lightning', 'storm', 0.5),\r\n    visual: {\r\n      screenShake: true,\r\n      slowMotion: false,\r\n      zoom: false,\r\n      cameraMovement: true,\r\n      colorFilter: '#00ffff',\r\n    },\r\n    audio: {\r\n      soundEffect: 'edge_control',\r\n      volume: 0.85,\r\n      echo: false,\r\n    },\r\n    duration: 1800,\r\n    display: {\r\n      title: t('special.edge_control'),\r\n      subtitle: t('special.edge_control.subtitle'),\r\n      color: '#00ffff',\r\n      fontSize: 38,\r\n      animation: 'slide',\r\n    },\r\n  },\r\n\r\n  chain_reaction: {\r\n    type: 'chain_reaction',\r\n    particleEffect: blendPresets('lightning', 'explosion', 0.7),\r\n    visual: {\r\n      screenShake: true,\r\n      slowMotion: true,\r\n      zoom: false,\r\n      cameraMovement: false,\r\n      colorFilter: '#ffff00',\r\n    },\r\n    audio: {\r\n      soundEffect: 'chain_reaction',\r\n      volume: 0.9,\r\n      echo: true,\r\n    },\r\n    duration: 2000,\r\n    display: {\r\n      title: t('special.chain_reaction'),\r\n      subtitle: t('special.chain_reaction.subtitle'),\r\n      color: '#ffff00',\r\n      fontSize: 40,\r\n      animation: 'explode',\r\n    },\r\n  },\r\n\r\n  time_control: {\r\n    type: 'time_control',\r\n    particleEffect: {\r\n      ...PARTICLE_PRESETS.blackhole,\r\n      colors: ['#9932cc', '#8b00ff', '#ffffff', '#87ceeb', '#000000'],\r\n    },\r\n    visual: {\r\n      screenShake: true,\r\n      slowMotion: true,\r\n      zoom: true,\r\n      cameraMovement: true,\r\n      colorFilter: '#9932cc',\r\n    },\r\n    audio: {\r\n      soundEffect: 'time_control',\r\n      volume: 1.0,\r\n      echo: true,\r\n      reverb: true,\r\n    },\r\n    duration: 3500,\r\n    display: {\r\n      title: t('special.time_control'),\r\n      subtitle: t('special.time_control.subtitle'),\r\n      color: '#9932cc',\r\n      fontSize: 56,\r\n      animation: 'zoom',\r\n    },\r\n  },\r\n};\r\n\r\n/**\r\n * 特殊招式檢測器\r\n */\r\nexport class SpecialMoveDetector {\r\n  /**\r\n   * 檢測移動是否觸發特殊招式\r\n   */\r\n  static detectSpecialMove(\r\n    position: BoardPosition,\r\n    flippedPositions: BoardPosition[],\r\n    playerScore: number,\r\n    opponentScore: number,\r\n    moveNumber: number,\r\n    totalMoves: number,\r\n  ): SpecialMoveType[] {\r\n    const triggeredMoves: SpecialMoveType[] = [];\r\n    const flipCount = flippedPositions.length;\r\n    const scoreDiff = playerScore - opponentScore;\r\n\r\n    // 檢查每種特殊招式\r\n    for (const [moveType, condition] of Object.entries(SPECIAL_MOVE_CONDITIONS)) {\r\n      if (this.checkCondition(\r\n        moveType as SpecialMoveType,\r\n        condition,\r\n        position,\r\n        flipCount,\r\n        scoreDiff,\r\n        moveNumber,\r\n        totalMoves,\r\n        flippedPositions,\r\n      )) {\r\n        triggeredMoves.push(moveType as SpecialMoveType);\r\n      }\r\n    }\r\n\r\n    return triggeredMoves;\r\n  }\r\n\r\n  /**\r\n   * 檢查單個條件\r\n   */\r\n  private static checkCondition(\r\n    moveType: SpecialMoveType,\r\n    condition: SpecialMoveCondition,\r\n    position: BoardPosition,\r\n    flipCount: number,\r\n    scoreDiff: number,\r\n    moveNumber: number,\r\n    totalMoves: number,\r\n    flippedPositions: BoardPosition[],\r\n  ): boolean {\r\n    // 檢查翻轉數量\r\n    if (condition.minFlipCount && flipCount < condition.minFlipCount) {\r\n      return false;\r\n    }\r\n\r\n    // 檢查分數差距\r\n    if (condition.scoreDifference) {\r\n      const { min, max } = condition.scoreDifference;\r\n      if (scoreDiff < min || scoreDiff > max) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // 檢查位置類型\r\n    if (condition.positionType) {\r\n      if (!this.checkPositionType(position, condition.positionType)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // 檢查時機\r\n    if (condition.timing) {\r\n      if (!this.checkTiming(condition.timing, moveNumber, totalMoves)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // 檢查特殊條件\r\n    if (condition.special) {\r\n      if (!this.checkSpecialCondition(moveType, condition.special, {\r\n        position,\r\n        flipCount,\r\n        scoreDiff,\r\n        moveNumber,\r\n        totalMoves,\r\n        flippedPositions,\r\n      })) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 檢查位置類型\r\n   */\r\n  private static checkPositionType(position: BoardPosition, type: 'corner' | 'edge' | 'center'): boolean {\r\n    const row = Math.floor(position / 8);\r\n    const col = position % 8;\r\n\r\n    switch (type) {\r\n      case 'corner':\r\n        return (row === 0 || row === 7) && (col === 0 || col === 7);\r\n      case 'edge':\r\n        return row === 0 || row === 7 || col === 0 || col === 7;\r\n      case 'center':\r\n        return row >= 2 && row <= 5 && col >= 2 && col <= 5;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 檢查時機\r\n   */\r\n  private static checkTiming(timing: 'early' | 'mid' | 'late', moveNumber: number, totalMoves: number): boolean {\r\n    const progress = moveNumber / Math.max(totalMoves, 60); // 估計最大60步\r\n\r\n    switch (timing) {\r\n      case 'early':\r\n        return progress < 0.3;\r\n      case 'mid':\r\n        return progress >= 0.3 && progress <= 0.7;\r\n      case 'late':\r\n        return progress > 0.7;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 檢查特殊條件\r\n   */\r\n  private static checkSpecialCondition(\r\n    moveType: SpecialMoveType,\r\n    special: string,\r\n    context: {\r\n      position: BoardPosition;\r\n      flipCount: number;\r\n      scoreDiff: number;\r\n      moveNumber: number;\r\n      totalMoves: number;\r\n      flippedPositions: BoardPosition[];\r\n    },\r\n  ): boolean {\r\n    switch (special) {\r\n      case 'near_endgame':\r\n        return context.moveNumber > Math.max(context.totalMoves * 0.8, 40);\r\n\r\n      case 'multiple_directions':\r\n        // 檢查是否在多個方向翻轉棋子\r\n        return this.checkMultipleDirections(context.position, context.flippedPositions);\r\n\r\n      case 'ultra_rare':\r\n        // 超稀有條件：大量翻轉 + 高分差\r\n        return context.flipCount >= 15 && Math.abs(context.scoreDiff) > 10;\r\n\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 檢查是否在多個方向翻轉\r\n   */\r\n  private static checkMultipleDirections(position: BoardPosition, flippedPositions: BoardPosition[]): boolean {\r\n    const directions = [\r\n      [-1, -1], [-1, 0], [-1, 1],\r\n      [0, -1],           [0, 1],\r\n      [1, -1],  [1, 0],  [1, 1],\r\n    ];\r\n\r\n    const row = Math.floor(position / 8);\r\n    const col = position % 8;\r\n    let directionCount = 0;\r\n\r\n    for (const [dr, dc] of directions) {\r\n      if (dr === undefined || dc === undefined) {continue;}\r\n      let found = false;\r\n      let r = row + dr;\r\n      let c = col + dc;\r\n\r\n      while (r >= 0 && r < 8 && c >= 0 && c < 8) {\r\n        const pos = r * 8 + c;\r\n        if (flippedPositions.includes(pos)) {\r\n          found = true;\r\n          break;\r\n        }\r\n        r += dr!;\r\n        c += dc!;\r\n      }\r\n\r\n      if (found) {\r\n        directionCount++;\r\n      }\r\n    }\r\n\r\n    return directionCount >= 3; // 至少3個方向\r\n  }\r\n}\r\n\r\n/**\r\n * 特殊招式管理器\r\n */\r\nexport class SpecialMoveManager {\r\n  private _activeEffects: Map<string, SpecialMoveEffect> = new Map();\r\n  private _eventHandlers: ((effect: SpecialMoveEffect) => void)[] = [];\r\n\r\n  /**\r\n   * 觸發特殊招式\r\n   */\r\n  triggerSpecialMove(moveType: SpecialMoveType, position: { x: number; y: number }): void {\r\n    const effect = SPECIAL_MOVE_EFFECTS[moveType];\r\n\r\n    if (!effect) {\r\n      console.warn(`Unknown special move type: ${moveType}`);\r\n      return;\r\n    }\r\n\r\n    const effectId = `${moveType}_${Date.now()}`;\r\n    this._activeEffects.set(effectId, effect);\r\n\r\n    // 發送事件\r\n    this._emitEffect(effect);\r\n\r\n    // 設定移除時間\r\n    setTimeout(() => {\r\n      this._activeEffects.delete(effectId);\r\n    }, effect.duration);\r\n\r\n    console.log(`🎆 特殊招式觸發: ${effect.display.title}`);\r\n  }\r\n\r\n  /**\r\n   * 獲取活動中的特效\r\n   */\r\n  getActiveEffects(): SpecialMoveEffect[] {\r\n    return Array.from(this._activeEffects.values());\r\n  }\r\n\r\n  /**\r\n   * 清除所有特效\r\n   */\r\n  clearAllEffects(): void {\r\n    this._activeEffects.clear();\r\n  }\r\n\r\n  /**\r\n   * 註冊特效事件處理器\r\n   */\r\n  addEventListener(handler: (effect: SpecialMoveEffect) => void): void {\r\n    this._eventHandlers.push(handler);\r\n  }\r\n\r\n  /**\r\n   * 移除特效事件處理器\r\n   */\r\n  removeEventListener(handler: (effect: SpecialMoveEffect) => void): void {\r\n    const index = this._eventHandlers.indexOf(handler);\r\n    if (index !== -1) {\r\n      this._eventHandlers.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 發送特效事件\r\n   */\r\n  private _emitEffect(effect: SpecialMoveEffect): void {\r\n    this._eventHandlers.forEach(handler => {\r\n      try {\r\n        handler(effect);\r\n      } catch (error) {\r\n        console.error('Special move effect handler error:', error);\r\n      }\r\n    });\r\n  }\r\n}","/**\r\n * Core Game Type Definitions\r\n *\r\n * Fundamental types used throughout the Super Reversi game.\r\n * These types define the core game state, player information,\r\n * and basic game mechanics.\r\n */\r\n\r\n// Basic game constants\r\nexport const BOARD_SIZE = 8;\r\nexport const TOTAL_SQUARES = 64;\r\nexport const DIRECTIONS = [-9, -8, -7, -1, 1, 7, 8, 9] as const;\r\n\r\n// Player and piece representation\r\nexport enum PlayerColor {\r\n  EMPTY = 0,\r\n  BLACK = 1,\r\n  WHITE = 2,\r\n}\r\n\r\nexport enum PlayerType {\r\n  HUMAN = 'human',\r\n  AI = 'ai',\r\n}\r\n\r\nexport enum GameStatus {\r\n  WAITING = 'waiting',\r\n  IN_PROGRESS = 'in_progress',\r\n  PAUSED = 'paused',\r\n  GAME_OVER = 'game_over',\r\n}\r\n\r\n// Move quality grades\r\nexport enum Grade {\r\n  C = 'C',    // Basic moves (0-9 points)\r\n  B = 'B',    // Good moves (10-17 points)\r\n  A = 'A',    // Great moves (18-29 points)\r\n  S = 'S',    // Exceptional moves (30-44 points)\r\n  SS = 'SS',  // Master moves (45-59 points)\r\n  SSS = 'SSS' // Legendary moves (60+ points)\r\n}\r\n\r\n// AI difficulty levels\r\nexport enum AIDifficulty {\r\n  RANDOM = 'v0',      // Random valid moves\r\n  GREEDY = 'v1',      // Immediate best score\r\n  MINIMAX = 'v2',     // Look-ahead with alpha-beta pruning\r\n  ADVANCED = 'v3',    // Opening book + minimax + endgame solver\r\n  MINIMAX_EASY = 'v2a',    // Minimax depth 2-4\r\n  MINIMAX_HARD = 'v2b',    // Minimax depth 4-6 + features\r\n  MASTER = 'v3_master',    // Maximum strength advanced AI\r\n  BLITZ = 'v3_blitz',     // Fast advanced AI for quick games\r\n  CUSTOM = 'custom',       // User-configurable AI\r\n}\r\n\r\n// Board position (0-63)\r\nexport type BoardPosition = number;\r\n\r\n// Position value constants for scoring\r\nexport const POSITION_VALUES = {\r\n  CORNER: 25,\r\n  EDGE: 6,\r\n  X_SQUARE: -10,  // Diagonal from corner\r\n  C_SQUARE: -6,   // Adjacent to corner\r\n  NORMAL: 0,\r\n} as const;\r\n\r\n// Grade thresholds\r\nexport const GRADE_THRESHOLDS = {\r\n  B: 10,\r\n  A: 18,\r\n  S: 30,\r\n  SS: 45,\r\n  SSS: 60,\r\n} as const;\r\n\r\n// Animation and timing constants\r\nexport const ANIMATION_TIMINGS = {\r\n  PREPARATION: 200,  // ms - 0.2 second prep phase\r\n  FLIP: 400,         // ms - 0.4 second flip animation\r\n  TOTAL: 600,        // ms - Total animation duration\r\n  EFFECTS_MIN: 350,  // ms - Minimum effect duration\r\n  EFFECTS_MAX: 900,  // ms - Maximum effect duration\r\n} as const;\r\n\r\n// Performance limits\r\nexport const PARTICLE_LIMITS = {\r\n  MIN: 1200,\r\n  MAX: 1800,\r\n  LOW_PERFORMANCE: 600,\r\n} as const;\r\n\r\nexport const PERFORMANCE_TARGETS = {\r\n  TARGET_FPS: 60,\r\n  MAX_FRAME_TIME: 16, // ms for 60fps\r\n  AI_RESPONSE_TIME: {\r\n    v0: 100,        // ms - Random should be instant\r\n    v1: 1000,       // ms - Greedy evaluation\r\n    v2: 3000,       // ms - Minimax search\r\n    v3: 5000,       // ms - Advanced with endgame\r\n    v2a: 2000,      // ms - Easy minimax\r\n    v2b: 4000,      // ms - Hard minimax\r\n    v3_master: 10000, // ms - Master level\r\n    v3_blitz: 1500,   // ms - Blitz games\r\n    custom: 5000,     // ms - Default for custom\r\n  },\r\n} as const;\r\n\r\n// Player information\r\nexport interface Player {\r\n  type: PlayerType;\r\n  color: PlayerColor;\r\n  name: string;\r\n  stats: PlayerStats;\r\n}\r\n\r\nexport interface PlayerStats {\r\n  movesPlayed: number;\r\n  averageScore: number;\r\n  gradeDistribution: Record<Grade, number>;\r\n  totalThinkingTime: number;\r\n  gamesWon: number;\r\n  gamesLost: number;\r\n  gamesTied: number;\r\n}\r\n\r\n// Game configuration\r\nexport interface GameOptions {\r\n  playerBlack: PlayerType;\r\n  playerWhite: PlayerType;\r\n  aiDifficulty?: AIDifficulty;\r\n  startingPlayer?: PlayerColor;\r\n  boardSize?: number; // Always 8 for standard Reversi\r\n}\r\n\r\n// Board utilities\r\nexport interface BoardPosition2D {\r\n  row: number;\r\n  col: number;\r\n}\r\n\r\nexport interface Point {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\n// Validation helpers\r\nexport const isValidPosition = (position: BoardPosition): boolean => {\r\n  return position >= 0 && position < TOTAL_SQUARES;\r\n};\r\n\r\nexport const isValidColor = (color: PlayerColor): boolean => {\r\n  return Object.values(PlayerColor).includes(color);\r\n};\r\n\r\nexport const positionToCoords = (position: BoardPosition): BoardPosition2D => {\r\n  return {\r\n    row: Math.floor(position / BOARD_SIZE),\r\n    col: position % BOARD_SIZE,\r\n  };\r\n};\r\n\r\nexport const coordsToPosition = (row: number, col: number): BoardPosition => {\r\n  return row * BOARD_SIZE + col;\r\n};\r\n\r\nexport const positionToPoint = (position: BoardPosition, cellSize: number = 50): Point => {\r\n  const coords = positionToCoords(position);\r\n  return {\r\n    x: coords.col * cellSize + cellSize / 2,\r\n    y: coords.row * cellSize + cellSize / 2,\r\n  };\r\n};\r\n\r\n// Position analysis helpers\r\nexport const isCorner = (position: BoardPosition): boolean => {\r\n  return [0, 7, 56, 63].includes(position);\r\n};\r\n\r\nexport const isEdge = (position: BoardPosition): boolean => {\r\n  const coords = positionToCoords(position);\r\n  return coords.row === 0 || coords.row === 7 || coords.col === 0 || coords.col === 7;\r\n};\r\n\r\nexport const isXSquare = (position: BoardPosition): boolean => {\r\n  // Squares diagonally adjacent to corners\r\n  return [9, 14, 49, 54].includes(position);\r\n};\r\n\r\nexport const isCSquare = (position: BoardPosition): boolean => {\r\n  // Squares adjacent to corners (excluding X-squares)\r\n  return [1, 6, 8, 15, 48, 55, 57, 62].includes(position);\r\n};\r\n\r\nexport const getPositionValue = (position: BoardPosition): number => {\r\n  if (isCorner(position)) {return POSITION_VALUES.CORNER;}\r\n  if (isXSquare(position)) {return POSITION_VALUES.X_SQUARE;}\r\n  if (isCSquare(position)) {return POSITION_VALUES.C_SQUARE;}\r\n  if (isEdge(position)) {return POSITION_VALUES.EDGE;}\r\n  return POSITION_VALUES.NORMAL;\r\n};\r\n\r\n// Direction helpers for move validation\r\nexport const getDirectionOffset = (direction: number): BoardPosition2D => {\r\n  return {\r\n    row: Math.floor(direction / BOARD_SIZE) - 1,\r\n    col: (direction % BOARD_SIZE) - 1,\r\n  };\r\n};\r\n\r\nexport const isValidDirection = (from: BoardPosition, direction: number): boolean => {\r\n  const fromCoords = positionToCoords(from);\r\n  const dirOffset = getDirectionOffset(direction + 8); // Adjust for array indexing\r\n  const newRow = fromCoords.row + dirOffset.row;\r\n  const newCol = fromCoords.col + dirOffset.col;\r\n\r\n  return newRow >= 0 && newRow < BOARD_SIZE && newCol >= 0 && newCol < BOARD_SIZE;\r\n};\r\n\r\n// Type guards\r\nexport const isPlayerColor = (value: unknown): value is PlayerColor => {\r\n  return typeof value === 'number' && Object.values(PlayerColor).includes(value as PlayerColor);\r\n};\r\n\r\nexport const isGrade = (value: unknown): value is Grade => {\r\n  return typeof value === 'string' && Object.values(Grade).includes(value as Grade);\r\n};\r\n\r\nexport const isAIDifficulty = (value: unknown): value is AIDifficulty => {\r\n  return typeof value === 'string' && Object.values(AIDifficulty).includes(value as AIDifficulty);\r\n};\r\n\r\nexport const isGameStatus = (value: unknown): value is GameStatus => {\r\n  return typeof value === 'string' && Object.values(GameStatus).includes(value as GameStatus);\r\n};\r\n\r\n// Error types for game operations\r\nexport class InvalidMoveError extends Error {\r\n  constructor(\r\n    message: string,\r\n    public readonly position: BoardPosition,\r\n    public readonly reason: string,\r\n  ) {\r\n    super(message);\r\n    this.name = 'InvalidMoveError';\r\n  }\r\n}\r\n\r\nexport class GameStateError extends Error {\r\n  constructor(\r\n    message: string,\r\n    public readonly gameStatus: GameStatus,\r\n  ) {\r\n    super(message);\r\n    this.name = 'GameStateError';\r\n  }\r\n}\r\n\r\nexport class AIError extends Error {\r\n  constructor(\r\n    message: string,\r\n    public readonly difficulty: AIDifficulty,\r\n    public readonly cause?: Error,\r\n  ) {\r\n    super(message);\r\n    this.name = 'AIError';\r\n  }\r\n}","/**\r\n * AI Strategy Base Classes\r\n *\r\n * Abstract base classes and interfaces for implementing different AI strategies.\r\n * Provides common structure for v0 (Random), v1 (Greedy), v2 (Minimax), v3 (Advanced).\r\n */\r\n\r\nimport {\r\n  BoardPosition,\r\n  PlayerColor,\r\n  AIDifficulty,\r\n  PERFORMANCE_TARGETS,\r\n} from '@/types/game-types';\r\nimport type { GameState } from '@/core/models/GameState';\r\n// import type { Move } from '@/core/models/Move';\r\n\r\n/**\r\n * AI move selection result\r\n */\r\nexport interface AIMoveResult {\r\n  readonly position: BoardPosition;\r\n  readonly confidence: number; // 0-1, how confident the AI is in this move\r\n  readonly evaluation: number; // Numeric evaluation score\r\n  readonly thinkingTime: number; // Time spent calculating (ms)\r\n  readonly depth?: number; // Search depth used (for minimax variants)\r\n  readonly nodesEvaluated?: number; // Nodes explored (for analytics)\r\n}\r\n\r\n/**\r\n * AI thinking process metadata\r\n */\r\nexport interface AIThinkingProcess {\r\n  readonly startTime: number;\r\n  readonly targetTime: number; // Maximum thinking time allowed\r\n  readonly depth: number; // Current search depth\r\n  readonly nodesEvaluated: number;\r\n  readonly bestMove?: BoardPosition;\r\n  readonly bestScore?: number;\r\n}\r\n\r\n/**\r\n * AI performance metrics\r\n */\r\nexport interface AIPerformanceMetrics {\r\n  readonly averageThinkingTime: number;\r\n  readonly movesPlayed: number;\r\n  readonly totalNodesEvaluated: number;\r\n  readonly averageDepth: number;\r\n  readonly timeoutCount: number; // How many times AI hit time limit\r\n  readonly accuracy: number; // Estimated move quality (0-1)\r\n}\r\n\r\n/**\r\n * Base interface for all AI strategies\r\n */\r\nexport interface IAIStrategy {\r\n  readonly difficulty: AIDifficulty;\r\n  readonly name: string;\r\n  readonly description: string;\r\n\r\n  /**\r\n   * Select the best move for the given game state\r\n   */\r\n  selectMove(\r\n    gameState: GameState,\r\n    player: PlayerColor,\r\n    timeLimit?: number\r\n  ): Promise<AIMoveResult>;\r\n\r\n  /**\r\n   * Get current performance metrics\r\n   */\r\n  getPerformanceMetrics(): AIPerformanceMetrics;\r\n\r\n  /**\r\n   * Reset performance metrics\r\n   */\r\n  resetMetrics(): void;\r\n\r\n  /**\r\n   * Check if AI is currently thinking\r\n   */\r\n  isThinking(): boolean;\r\n\r\n  /**\r\n   * Stop current thinking process (for timeout/cancellation)\r\n   */\r\n  stopThinking(): void;\r\n}\r\n\r\n/**\r\n * Abstract base class for AI strategies\r\n */\r\nexport abstract class AIStrategyBase implements IAIStrategy {\r\n  public abstract readonly difficulty: AIDifficulty;\r\n  public abstract readonly name: string;\r\n  public abstract readonly description: string;\r\n\r\n  protected _isThinking = false;\r\n  protected _shouldStop = false;\r\n  protected _metrics: AIPerformanceMetrics = {\r\n    averageThinkingTime: 0,\r\n    movesPlayed: 0,\r\n    totalNodesEvaluated: 0,\r\n    averageDepth: 0,\r\n    timeoutCount: 0,\r\n    accuracy: 0,\r\n  };\r\n\r\n  protected _thinkingHistory: number[] = [];\r\n  protected _depthHistory: number[] = [];\r\n  protected _nodeHistory: number[] = [];\r\n\r\n  /**\r\n   * Main move selection interface\r\n   */\r\n  async selectMove(\r\n    gameState: GameState,\r\n    player: PlayerColor,\r\n    timeLimit?: number,\r\n  ): Promise<AIMoveResult> {\r\n    const startTime = Date.now();\r\n    const targetTime = timeLimit || this.getDefaultTimeLimit();\r\n\r\n    this._isThinking = true;\r\n    this._shouldStop = false;\r\n\r\n    try {\r\n      const result = await this.selectMoveImpl(gameState, player, targetTime);\r\n      const actualThinkingTime = Date.now() - startTime;\r\n\r\n      // Update metrics\r\n      this.updateMetrics(result, actualThinkingTime, targetTime);\r\n\r\n      return {\r\n        ...result,\r\n        thinkingTime: actualThinkingTime,\r\n      };\r\n    } finally {\r\n      this._isThinking = false;\r\n      this._shouldStop = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Abstract method that subclasses must implement\r\n   */\r\n  protected abstract selectMoveImpl(\r\n    gameState: GameState,\r\n    player: PlayerColor,\r\n    timeLimit: number\r\n  ): Promise<AIMoveResult>;\r\n\r\n  /**\r\n   * Get default time limit for this difficulty level\r\n   */\r\n  protected getDefaultTimeLimit(): number {\r\n    return PERFORMANCE_TARGETS.AI_RESPONSE_TIME[this.difficulty] || 1000;\r\n  }\r\n\r\n  /**\r\n   * Check if we should stop thinking (timeout or cancellation)\r\n   */\r\n  protected shouldStop(startTime: number, timeLimit: number): boolean {\r\n    return this._shouldStop || (Date.now() - startTime) >= timeLimit;\r\n  }\r\n\r\n  /**\r\n   * Update performance metrics after a move\r\n   */\r\n  protected updateMetrics(\r\n    result: AIMoveResult,\r\n    actualTime: number,\r\n    timeLimit: number,\r\n  ): void {\r\n    this._thinkingHistory.push(actualTime);\r\n    if (result.depth !== undefined) {\r\n      this._depthHistory.push(result.depth);\r\n    }\r\n    if (result.nodesEvaluated !== undefined) {\r\n      this._nodeHistory.push(result.nodesEvaluated);\r\n    }\r\n\r\n    const movesPlayed = this._thinkingHistory.length;\r\n    const totalThinkingTime = this._thinkingHistory.reduce((sum, time) => sum + time, 0);\r\n    const totalNodes = this._nodeHistory.reduce((sum, nodes) => sum + nodes, 0);\r\n    const totalDepth = this._depthHistory.reduce((sum, depth) => sum + depth, 0);\r\n\r\n    this._metrics = {\r\n      averageThinkingTime: totalThinkingTime / movesPlayed,\r\n      movesPlayed,\r\n      totalNodesEvaluated: totalNodes,\r\n      averageDepth: this._depthHistory.length > 0 ? totalDepth / this._depthHistory.length : 0,\r\n      timeoutCount: this._metrics.timeoutCount + (actualTime >= timeLimit ? 1 : 0),\r\n      accuracy: this.estimateAccuracy(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Estimate move accuracy based on thinking time and difficulty\r\n   */\r\n  protected estimateAccuracy(): number {\r\n    if (this._metrics.movesPlayed === 0) {return 0;}\r\n\r\n    const targetTime = this.getDefaultTimeLimit();\r\n    const actualTime = this._metrics.averageThinkingTime;\r\n\r\n    // Simple heuristic: accuracy increases with thinking time up to target\r\n    const timeRatio = Math.min(actualTime / targetTime, 1.0);\r\n    const baseAccuracy = this.getBaseAccuracy();\r\n\r\n    return Math.min(baseAccuracy + (timeRatio * 0.3), 1.0);\r\n  }\r\n\r\n  /**\r\n   * Get base accuracy for this difficulty level\r\n   */\r\n  protected getBaseAccuracy(): number {\r\n    switch (this.difficulty) {\r\n      case AIDifficulty.RANDOM: return 0.1;  // Very low accuracy\r\n      case AIDifficulty.GREEDY: return 0.6;  // Decent accuracy\r\n      case AIDifficulty.MINIMAX: return 0.8; // High accuracy\r\n      case AIDifficulty.ADVANCED: return 0.9; // Very high accuracy\r\n      default: return 0.5;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current performance metrics\r\n   */\r\n  getPerformanceMetrics(): AIPerformanceMetrics {\r\n    return { ...this._metrics };\r\n  }\r\n\r\n  /**\r\n   * Reset performance metrics\r\n   */\r\n  resetMetrics(): void {\r\n    this._metrics = {\r\n      averageThinkingTime: 0,\r\n      movesPlayed: 0,\r\n      totalNodesEvaluated: 0,\r\n      averageDepth: 0,\r\n      timeoutCount: 0,\r\n      accuracy: 0,\r\n    };\r\n    this._thinkingHistory = [];\r\n    this._depthHistory = [];\r\n    this._nodeHistory = [];\r\n  }\r\n\r\n  /**\r\n   * Check if AI is currently thinking\r\n   */\r\n  isThinking(): boolean {\r\n    return this._isThinking;\r\n  }\r\n\r\n  /**\r\n   * Stop current thinking process\r\n   */\r\n  stopThinking(): void {\r\n    this._shouldStop = true;\r\n  }\r\n}\r\n\r\n/**\r\n * Utility functions for AI implementations\r\n */\r\nexport class AIUtils {\r\n  /**\r\n   * Add random jitter to move selection to avoid predictable play\r\n   */\r\n  static addJitter(baseScore: number, jitterAmount = 0.1): number {\r\n    const jitter = (Math.random() - 0.5) * 2 * jitterAmount;\r\n    return baseScore + jitter;\r\n  }\r\n\r\n  /**\r\n   * Select move from candidates with weighted randomization\r\n   */\r\n  static selectWeightedRandom<T extends { score: number }>(\r\n    candidates: T[],\r\n    temperature = 1.0,\r\n  ): T {\r\n    if (candidates.length === 0) {\r\n      throw new Error('No candidates to select from');\r\n    }\r\n\r\n    if (candidates.length === 1) {\r\n      return candidates[0] as T;\r\n    }\r\n\r\n    // Apply temperature scaling to scores\r\n    const scaledCandidates = candidates.map(candidate => ({\r\n      ...candidate,\r\n      weight: Math.exp(candidate.score / temperature),\r\n    }));\r\n\r\n    const totalWeight = scaledCandidates.reduce((sum, candidate) => sum + candidate.weight, 0);\r\n    const randomValue = Math.random() * totalWeight;\r\n\r\n    let cumulativeWeight = 0;\r\n    for (const candidate of scaledCandidates) {\r\n      cumulativeWeight += candidate.weight;\r\n      if (randomValue <= cumulativeWeight) {\r\n        return candidate as T;\r\n      }\r\n    }\r\n\r\n    // Fallback to last candidate (this shouldn't happen but ensures type safety)\r\n    return scaledCandidates[scaledCandidates.length - 1] as T;\r\n  }\r\n\r\n  /**\r\n   * Evaluate position stability for AI decision making\r\n   */\r\n  static evaluatePositionStability(\r\n    gameState: GameState,\r\n    position: BoardPosition,\r\n    player: PlayerColor,\r\n  ): number {\r\n    // Simple stability heuristic based on position type and surrounding pieces\r\n    let stability = 0;\r\n\r\n    // Corner positions are extremely stable\r\n    if ([0, 7, 56, 63].includes(position)) {\r\n      stability += 10;\r\n    }\r\n\r\n    // Edge positions have moderate stability\r\n    const row = Math.floor(position / 8);\r\n    const col = position % 8;\r\n    if (row === 0 || row === 7 || col === 0 || col === 7) {\r\n      stability += 3;\r\n    }\r\n\r\n    // Check for friendly neighbors (increases stability)\r\n    const neighbors = this.getNeighbors(position);\r\n    const friendlyNeighbors = neighbors.filter(pos =>\r\n      gameState.board[pos] === player,\r\n    ).length;\r\n\r\n    stability += friendlyNeighbors * 0.5;\r\n\r\n    return stability;\r\n  }\r\n\r\n  /**\r\n   * Get neighboring positions\r\n   */\r\n  private static getNeighbors(position: BoardPosition): BoardPosition[] {\r\n    const neighbors: BoardPosition[] = [];\r\n    const row = Math.floor(position / 8);\r\n    const col = position % 8;\r\n\r\n    for (let dr = -1; dr <= 1; dr++) {\r\n      for (let dc = -1; dc <= 1; dc++) {\r\n        if (dr === 0 && dc === 0) {continue;}\r\n\r\n        const newRow = row + dr;\r\n        const newCol = col + dc;\r\n\r\n        if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\r\n          neighbors.push(newRow * 8 + newCol);\r\n        }\r\n      }\r\n    }\r\n\r\n    return neighbors;\r\n  }\r\n\r\n  /**\r\n   * Calculate endgame phase (0 = early game, 1 = endgame)\r\n   */\r\n  static getGamePhase(gameState: GameState): number {\r\n    const totalPieces = gameState.scores.black + gameState.scores.white;\r\n    const maxPieces = 64;\r\n    return totalPieces / maxPieces;\r\n  }\r\n\r\n  /**\r\n   * Simple mobility calculation\r\n   */\r\n  static calculateMobility(gameState: GameState, _player: PlayerColor): number {\r\n    return gameState.validMoves.size;\r\n  }\r\n\r\n  /**\r\n   * Check if position is in dangerous area (X-squares, C-squares)\r\n   */\r\n  static isDangerousPosition(position: BoardPosition): boolean {\r\n    // X-squares (diagonal from corners) and C-squares (adjacent to corners)\r\n    const dangerousPositions = [\r\n      1, 6, 8, 9, 14, 15, // Top area\r\n      48, 49, 54, 55, 57, 62, // Bottom area\r\n    ];\r\n    return dangerousPositions.includes(position);\r\n  }\r\n}","/**\r\n * Random AI Strategy (v0)\r\n *\r\n * Simplest AI implementation that selects random valid moves.\r\n * Used for testing and as a baseline for other AI strategies.\r\n * Should respond almost instantly (<100ms).\r\n */\r\n\r\nimport { AIDifficulty, PlayerColor, BoardPosition } from '@/types/game-types';\r\nimport type { GameState } from '@/core/models/GameState';\r\nimport { AIStrategyBase, type AIMoveResult, AIUtils } from '../ai-strategy-base';\r\n\r\n/**\r\n * Random AI implementation\r\n */\r\nexport class RandomAI extends AIStrategyBase {\r\n  public readonly difficulty = AIDifficulty.RANDOM;\r\n  public readonly name = 'Random AI';\r\n  public readonly description = 'Selects random valid moves with no strategy';\r\n\r\n  /**\r\n   * Select a random valid move\r\n   */\r\n  protected async selectMoveImpl(\r\n    gameState: GameState,\r\n    _player: PlayerColor,\r\n    _timeLimit: number,\r\n  ): Promise<AIMoveResult> {\r\n    const startTime = Date.now();\r\n\r\n    // Get all valid moves\r\n    const validMoves = Array.from(gameState.validMoves.keys());\r\n\r\n    if (validMoves.length === 0) {\r\n      throw new Error('No valid moves available');\r\n    }\r\n\r\n    // Add tiny random delay to simulate thinking (but stay under 100ms)\r\n    const thinkingDelay = Math.random() * 50; // 0-50ms\r\n    await new Promise(resolve => setTimeout(resolve, thinkingDelay));\r\n\r\n    // Select random move\r\n    const randomIndex = Math.floor(Math.random() * validMoves.length);\r\n    const selectedPosition = validMoves[randomIndex];\r\n\r\n    // Calculate basic evaluation score (just for metrics)\r\n    const evaluation = this.evaluateMove(gameState, selectedPosition!, _player);\r\n\r\n    return {\r\n      position: selectedPosition!,\r\n      confidence: 0.1, // Very low confidence since it's random\r\n      evaluation,\r\n      thinkingTime: Date.now() - startTime,\r\n      depth: 0, // No search depth\r\n      nodesEvaluated: validMoves.length, // Only evaluated immediate moves\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Simple move evaluation for metrics (not used for selection)\r\n   */\r\n  private evaluateMove(\r\n    gameState: GameState,\r\n    position: BoardPosition,\r\n    _player: PlayerColor,\r\n  ): number {\r\n    // Basic evaluation based on position value and flips\r\n    const flippedPositions = gameState.validMoves.get(position) || [];\r\n    let score = 0;\r\n\r\n    // Position value\r\n    if ([0, 7, 56, 63].includes(position)) {\r\n      score += 25; // Corner\r\n    } else if (this.isEdgePosition(position)) {\r\n      score += 6; // Edge\r\n    } else if ([9, 14, 49, 54].includes(position)) {\r\n      score -= 10; // X-square (dangerous)\r\n    }\r\n\r\n    // Flipped pieces\r\n    score += flippedPositions.length;\r\n\r\n    // Add small random component for variety\r\n    score += AIUtils.addJitter(0, 0.5);\r\n\r\n    return score;\r\n  }\r\n\r\n  /**\r\n   * Check if position is on the edge\r\n   */\r\n  private isEdgePosition(position: BoardPosition): boolean {\r\n    const row = Math.floor(position / 8);\r\n    const col = position % 8;\r\n    return row === 0 || row === 7 || col === 0 || col === 7;\r\n  }\r\n}\r\n\r\n/**\r\n * Slightly improved random AI that avoids obviously bad moves\r\n */\r\nexport class SmartRandomAI extends AIStrategyBase {\r\n  public readonly difficulty = AIDifficulty.RANDOM;\r\n  public readonly name = 'Smart Random AI';\r\n  public readonly description = 'Random moves but avoids obviously terrible positions';\r\n\r\n  protected async selectMoveImpl(\r\n    gameState: GameState,\r\n    _player: PlayerColor,\r\n    _timeLimit: number,\r\n  ): Promise<AIMoveResult> {\r\n    const startTime = Date.now();\r\n\r\n    const validMoves = Array.from(gameState.validMoves.keys());\r\n\r\n    if (validMoves.length === 0) {\r\n      throw new Error('No valid moves available');\r\n    }\r\n\r\n    // Categorize moves\r\n    const cornerMoves = validMoves.filter(pos => [0, 7, 56, 63].includes(pos));\r\n    const safeEdgeMoves = validMoves.filter(pos =>\r\n      this.isEdgePosition(pos) && ![0, 7, 56, 63].includes(pos) && !this.isXSquare(pos),\r\n    );\r\n    const xSquareMoves = validMoves.filter(pos => [9, 14, 49, 54].includes(pos));\r\n    const normalMoves = validMoves.filter(pos =>\r\n      !cornerMoves.includes(pos) &&\r\n      !safeEdgeMoves.includes(pos) &&\r\n      !xSquareMoves.includes(pos),\r\n    );\r\n\r\n    let candidateMoves: BoardPosition[];\r\n    let moveType: string;\r\n\r\n    // Selection priority: Corners > Safe edges > Normal > X-squares (last resort)\r\n    if (cornerMoves.length > 0) {\r\n      candidateMoves = cornerMoves;\r\n      moveType = 'corner';\r\n    } else if (safeEdgeMoves.length > 0) {\r\n      candidateMoves = safeEdgeMoves;\r\n      moveType = 'safe_edge';\r\n    } else if (normalMoves.length > 0) {\r\n      candidateMoves = normalMoves;\r\n      moveType = 'normal';\r\n    } else {\r\n      candidateMoves = xSquareMoves;\r\n      moveType = 'x_square';\r\n    }\r\n\r\n    // Add thinking delay\r\n    const thinkingDelay = Math.random() * 75; // 0-75ms\r\n    await new Promise(resolve => setTimeout(resolve, thinkingDelay));\r\n\r\n    // Select random from candidates\r\n    const randomIndex = Math.floor(Math.random() * candidateMoves.length);\r\n    const selectedPosition = candidateMoves[randomIndex];\r\n\r\n    // Evaluate selected move\r\n    const evaluation = this.evaluateMove(gameState, selectedPosition!, _player);\r\n\r\n    // Higher confidence for better move types\r\n    const confidence = this.getConfidenceForMoveType(moveType);\r\n\r\n    return {\r\n      position: selectedPosition!,\r\n      confidence,\r\n      evaluation,\r\n      thinkingTime: Date.now() - startTime,\r\n      depth: 1, // One level of categorization\r\n      nodesEvaluated: validMoves.length,\r\n    };\r\n  }\r\n\r\n  private evaluateMove(\r\n    gameState: GameState,\r\n    position: BoardPosition,\r\n    _player: PlayerColor,\r\n  ): number {\r\n    const flippedPositions = gameState.validMoves.get(position) || [];\r\n    let score = 0;\r\n\r\n    // Position value\r\n    if ([0, 7, 56, 63].includes(position)) {\r\n      score += 25;\r\n    } else if (this.isEdgePosition(position)) {\r\n      score += 6;\r\n    } else if ([9, 14, 49, 54].includes(position)) {\r\n      score -= 10;\r\n    }\r\n\r\n    // Flipped pieces\r\n    score += flippedPositions.length;\r\n\r\n    return score;\r\n  }\r\n\r\n  private isEdgePosition(position: BoardPosition): boolean {\r\n    const row = Math.floor(position / 8);\r\n    const col = position % 8;\r\n    return row === 0 || row === 7 || col === 0 || col === 7;\r\n  }\r\n\r\n  private isXSquare(position: BoardPosition): boolean {\r\n    return [9, 14, 49, 54].includes(position);\r\n  }\r\n\r\n  private getConfidenceForMoveType(moveType: string): number {\r\n    switch (moveType) {\r\n      case 'corner': return 0.8;\r\n      case 'safe_edge': return 0.6;\r\n      case 'normal': return 0.3;\r\n      case 'x_square': return 0.1;\r\n      default: return 0.2;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Factory function to create random AI variants\r\n */\r\nexport const createRandomAI = {\r\n  /**\r\n   * Pure random selection\r\n   */\r\n  pure(): RandomAI {\r\n    return new RandomAI();\r\n  },\r\n\r\n  /**\r\n   * Smart random (avoids obviously bad moves)\r\n   */\r\n  smart(): SmartRandomAI {\r\n    return new SmartRandomAI();\r\n  },\r\n};","/**\n * Board Utilities\n *\n * Core utilities for board position conversion, direction vectors,\n * and spatial relationships in the 8x8 Reversi game.\n */\n\nimport {\n  BOARD_SIZE,\n  TOTAL_SQUARES,\n  DIRECTIONS,\n  BoardPosition,\n  BoardPosition2D,\n  Point,\n  PlayerColor,\n  isValidPosition,\n} from '@/types/game-types';\n\n/**\n * Convert linear board position to 2D coordinates\n */\nexport const positionToCoords = (position: BoardPosition): BoardPosition2D => {\n  if (!isValidPosition(position)) {\n    throw new Error(`Invalid position: ${position}`);\n  }\n  return {\n    row: Math.floor(position / BOARD_SIZE),\n    col: position % BOARD_SIZE,\n  };\n};\n\n/**\n * Convert 2D coordinates to linear board position\n */\nexport const coordsToPosition = (row: number, col: number): BoardPosition => {\n  if (row < 0 || row >= BOARD_SIZE || col < 0 || col >= BOARD_SIZE) {\n    throw new Error(`Invalid coordinates: (${row}, ${col})`);\n  }\n  return row * BOARD_SIZE + col;\n};\n\n/**\n * Convert board position to pixel coordinates for rendering\n */\nexport const positionToPixel = (\n  position: BoardPosition,\n  cellSize: number,\n  boardOffset: Point = { x: 0, y: 0 },\n): Point => {\n  const coords = positionToCoords(position);\n  return {\n    x: boardOffset.x + coords.col * cellSize + cellSize / 2,\n    y: boardOffset.y + coords.row * cellSize + cellSize / 2,\n  };\n};\n\n/**\n * Convert pixel coordinates to board position\n */\nexport const pixelToPosition = (\n  pixel: Point,\n  cellSize: number,\n  boardOffset: Point = { x: 0, y: 0 },\n): BoardPosition | null => {\n  const col = Math.floor((pixel.x - boardOffset.x) / cellSize);\n  const row = Math.floor((pixel.y - boardOffset.y) / cellSize);\n\n  if (row < 0 || row >= BOARD_SIZE || col < 0 || col >= BOARD_SIZE) {\n    return null;\n  }\n\n  return coordsToPosition(row, col);\n};\n\n/**\n * Check if two positions are adjacent\n */\nexport const areAdjacent = (pos1: BoardPosition, pos2: BoardPosition): boolean => {\n  if (!isValidPosition(pos1) || !isValidPosition(pos2)) {\n    return false;\n  }\n\n  const coords1 = positionToCoords(pos1);\n  const coords2 = positionToCoords(pos2);\n\n  const rowDiff = Math.abs(coords1.row - coords2.row);\n  const colDiff = Math.abs(coords1.col - coords2.col);\n\n  return (rowDiff <= 1 && colDiff <= 1) && (rowDiff + colDiff > 0);\n};\n\n/**\n * Get distance between two positions\n */\nexport const getDistance = (pos1: BoardPosition, pos2: BoardPosition): number => {\n  const coords1 = positionToCoords(pos1);\n  const coords2 = positionToCoords(pos2);\n\n  return Math.max(\n    Math.abs(coords1.row - coords2.row),\n    Math.abs(coords1.col - coords2.col),\n  );\n};\n\n/**\n * Get all positions in a direction from a starting position\n */\nexport const getPositionsInDirection = (\n  start: BoardPosition,\n  direction: number,\n): BoardPosition[] => {\n  const positions: BoardPosition[] = [];\n  const startCoords = positionToCoords(start);\n\n  // Direction mappings: -9=NW, -8=N, -7=NE, -1=W, 1=E, 7=SW, 8=S, 9=SE\n  const dirRow = Math.floor(direction / 3) - 1;\n  const dirCol = (direction % 3) - 1;\n\n  let currentRow = startCoords.row + dirRow;\n  let currentCol = startCoords.col + dirCol;\n\n  while (currentRow >= 0 && currentRow < BOARD_SIZE &&\n         currentCol >= 0 && currentCol < BOARD_SIZE) {\n    positions.push(coordsToPosition(currentRow, currentCol));\n    currentRow += dirRow;\n    currentCol += dirCol;\n  }\n\n  return positions;\n};\n\n/**\n * Get all neighbors of a position\n */\nexport const getNeighbors = (position: BoardPosition): BoardPosition[] => {\n  const neighbors: BoardPosition[] = [];\n  const coords = positionToCoords(position);\n\n  for (let rowOffset = -1; rowOffset <= 1; rowOffset++) {\n    for (let colOffset = -1; colOffset <= 1; colOffset++) {\n      if (rowOffset === 0 && colOffset === 0) {continue;}\n\n      const newRow = coords.row + rowOffset;\n      const newCol = coords.col + colOffset;\n\n      if (newRow >= 0 && newRow < BOARD_SIZE &&\n          newCol >= 0 && newCol < BOARD_SIZE) {\n        neighbors.push(coordsToPosition(newRow, newCol));\n      }\n    }\n  }\n\n  return neighbors;\n};\n\n/**\n * Get positions along the edges of the board\n */\nexport const getEdgePositions = (): BoardPosition[] => {\n  const edges: BoardPosition[] = [];\n\n  // Top and bottom rows\n  for (let col = 0; col < BOARD_SIZE; col++) {\n    edges.push(coordsToPosition(0, col));\n    edges.push(coordsToPosition(BOARD_SIZE - 1, col));\n  }\n\n  // Left and right columns (excluding corners already added)\n  for (let row = 1; row < BOARD_SIZE - 1; row++) {\n    edges.push(coordsToPosition(row, 0));\n    edges.push(coordsToPosition(row, BOARD_SIZE - 1));\n  }\n\n  return edges;\n};\n\n/**\n * Get corner positions\n */\nexport const getCornerPositions = (): BoardPosition[] => {\n  return [0, 7, 56, 63];\n};\n\n/**\n * Get positions that are diagonally adjacent to corners (X-squares)\n */\nexport const getXSquarePositions = (): BoardPosition[] => {\n  return [9, 14, 49, 54];\n};\n\n/**\n * Get positions that are adjacent to corners but not X-squares (C-squares)\n */\nexport const getCSquarePositions = (): BoardPosition[] => {\n  return [1, 6, 8, 15, 48, 55, 57, 62];\n};\n\n/**\n * Check if a position is on the board edge\n */\nexport const isOnEdge = (position: BoardPosition): boolean => {\n  const coords = positionToCoords(position);\n  return coords.row === 0 || coords.row === BOARD_SIZE - 1 ||\n         coords.col === 0 || coords.col === BOARD_SIZE - 1;\n};\n\n/**\n * Check if a position is a corner\n */\nexport const isCorner = (position: BoardPosition): boolean => {\n  return getCornerPositions().includes(position);\n};\n\n/**\n * Check if a position is an X-square (diagonal from corner)\n */\nexport const isXSquare = (position: BoardPosition): boolean => {\n  return getXSquarePositions().includes(position);\n};\n\n/**\n * Check if a position is a C-square (adjacent to corner)\n */\nexport const isCSquare = (position: BoardPosition): boolean => {\n  return getCSquarePositions().includes(position);\n};\n\n/**\n * Get the board notation for a position (e.g., \"a1\", \"h8\")\n */\nexport const getPositionNotation = (position: BoardPosition): string => {\n  const coords = positionToCoords(position);\n  const colLetter = String.fromCharCode(97 + coords.col); // 'a' + col\n  const rowNumber = coords.row + 1;\n  return `${colLetter}${rowNumber}`;\n};\n\n/**\n * Parse board notation to position\n */\nexport const parsePositionNotation = (notation: string): BoardPosition | null => {\n  if (notation.length !== 2) {return null;}\n\n  const colChar = notation.charAt(0).toLowerCase();\n  const rowChar = notation.charAt(1);\n\n  const col = colChar.charCodeAt(0) - 97; // 'a' = 0\n  const row = parseInt(rowChar, 10) - 1;\n\n  if (col < 0 || col >= BOARD_SIZE || row < 0 || row >= BOARD_SIZE || isNaN(row)) {\n    return null;\n  }\n\n  return coordsToPosition(row, col);\n};\n\n/**\n * Calculate direction between two positions\n */\nexport const getDirection = (from: BoardPosition, to: BoardPosition): number | null => {\n  const fromCoords = positionToCoords(from);\n  const toCoords = positionToCoords(to);\n\n  const rowDiff = toCoords.row - fromCoords.row;\n  const colDiff = toCoords.col - fromCoords.col;\n\n  // Normalize to -1, 0, 1\n  const normalizedRow = rowDiff === 0 ? 0 : (rowDiff > 0 ? 1 : -1);\n  const normalizedCol = colDiff === 0 ? 0 : (colDiff > 0 ? 1 : -1);\n\n  // Check if positions are in a straight line\n  if (rowDiff !== 0 && colDiff !== 0 && Math.abs(rowDiff) !== Math.abs(colDiff)) {\n    return null; // Not in a straight line\n  }\n\n  // Convert to direction index\n  return (normalizedRow + 1) * 3 + (normalizedCol + 1) - 4;\n};\n\n/**\n * Get all positions between two positions (exclusive)\n */\nexport const getPositionsBetween = (\n  from: BoardPosition,\n  to: BoardPosition,\n): BoardPosition[] | null => {\n  const direction = getDirection(from, to);\n  if (direction === null) {return null;}\n\n  const positions: BoardPosition[] = [];\n  const fromCoords = positionToCoords(from);\n  const toCoords = positionToCoords(to);\n\n  const rowStep = toCoords.row > fromCoords.row ? 1 : (toCoords.row < fromCoords.row ? -1 : 0);\n  const colStep = toCoords.col > fromCoords.col ? 1 : (toCoords.col < fromCoords.col ? -1 : 0);\n\n  let currentRow = fromCoords.row + rowStep;\n  let currentCol = fromCoords.col + colStep;\n\n  while (currentRow !== toCoords.row || currentCol !== toCoords.col) {\n    positions.push(coordsToPosition(currentRow, currentCol));\n    currentRow += rowStep;\n    currentCol += colStep;\n  }\n\n  return positions;\n};\n\n/**\n * Create empty board\n */\nexport const createEmptyBoard = (): Uint8Array => {\n  return new Uint8Array(TOTAL_SQUARES);\n};\n\n/**\n * Create initial Reversi board setup\n */\nexport const createInitialBoard = (): Uint8Array => {\n  const board = createEmptyBoard();\n\n  // Standard Reversi starting position\n  board[coordsToPosition(3, 3)] = PlayerColor.WHITE;\n  board[coordsToPosition(3, 4)] = PlayerColor.BLACK;\n  board[coordsToPosition(4, 3)] = PlayerColor.BLACK;\n  board[coordsToPosition(4, 4)] = PlayerColor.WHITE;\n\n  return board;\n};\n\n/**\n * Clone board state\n */\nexport const cloneBoard = (board: Uint8Array): Uint8Array => {\n  return new Uint8Array(board);\n};\n\n/**\n * Count pieces of each color on the board\n */\nexport const countPieces = (board: Uint8Array): { black: number; white: number; empty: number } => {\n  let black = 0;\n  let white = 0;\n  let empty = 0;\n\n  for (let i = 0; i < TOTAL_SQUARES; i++) {\n    switch (board[i]) {\n      case PlayerColor.BLACK:\n        black++;\n        break;\n      case PlayerColor.WHITE:\n        white++;\n        break;\n      case PlayerColor.EMPTY:\n        empty++;\n        break;\n    }\n  }\n\n  return { black, white, empty };\n};\n\n/**\n * Get all positions occupied by a specific color\n */\nexport const getPositionsOfColor = (board: Uint8Array, color: PlayerColor): BoardPosition[] => {\n  const positions: BoardPosition[] = [];\n  for (let i = 0; i < TOTAL_SQUARES; i++) {\n    if (board[i] === color) {\n      positions.push(i);\n    }\n  }\n  return positions;\n};\n\n/**\n * Check if board is full\n */\nexport const isBoardFull = (board: Uint8Array): boolean => {\n  return !board.includes(PlayerColor.EMPTY);\n};\n\n/**\n * Convert board to string representation for debugging\n */\nexport const boardToString = (board: Uint8Array): string => {\n  let result = '  a b c d e f g h\\n';\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    result += `${row + 1} `;\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      const position = coordsToPosition(row, col);\n      const piece = board[position];\n      let symbol = '.';\n      if (piece === PlayerColor.BLACK) {symbol = '●';}\n      if (piece === PlayerColor.WHITE) {symbol = '○';}\n      result += symbol + ' ';\n    }\n    result += `${row + 1}\\n`;\n  }\n  result += '  a b c d e f g h\\n';\n  return result;\n};","/**\n * Move Validation Logic\n *\n * Handles validation of Reversi moves including:\n * - Legal move checking\n * - Piece flipping calculation\n * - Valid move generation\n */\n\nimport {\n  BoardPosition,\n  PlayerColor,\n  BOARD_SIZE,\n  TOTAL_SQUARES,\n  InvalidMoveError,\n} from '@/types/game-types';\nimport { positionToCoords } from './board-utils';\n\n/**\n * Validation result for a move attempt\n */\nexport interface MoveValidationResult {\n  isValid: boolean;\n  flippedPositions: BoardPosition[];\n  reason?: string;\n}\n\n/**\n * Check if a move is legal and return flipped positions\n */\nexport const validateMove = (\n  board: Uint8Array,\n  position: BoardPosition,\n  player: PlayerColor,\n): MoveValidationResult => {\n  // Position must be empty\n  if (board[position] !== PlayerColor.EMPTY) {\n    return {\n      isValid: false,\n      flippedPositions: [],\n      reason: 'Position is already occupied',\n    };\n  }\n\n  // Position must be on the board\n  if (position < 0 || position >= TOTAL_SQUARES) {\n    return {\n      isValid: false,\n      flippedPositions: [],\n      reason: 'Position is outside the board',\n    };\n  }\n\n  const flippedPositions = calculateFlips(board, position, player);\n\n  if (flippedPositions.length === 0) {\n    return {\n      isValid: false,\n      flippedPositions: [],\n      reason: 'Move does not flip any opponent pieces',\n    };\n  }\n\n  return {\n    isValid: true,\n    flippedPositions,\n  };\n};\n\n/**\n * Calculate which pieces would be flipped by a move\n */\nexport const calculateFlips = (\n  board: Uint8Array,\n  position: BoardPosition,\n  player: PlayerColor,\n): BoardPosition[] => {\n  const allFlips: BoardPosition[] = [];\n  const opponent = player === PlayerColor.BLACK ? PlayerColor.WHITE : PlayerColor.BLACK;\n\n  // All 8 directions: N, NE, E, SE, S, SW, W, NW\n  const directions = [\n    { row: -1, col: 0 },  // N\n    { row: -1, col: 1 },  // NE\n    { row: 0, col: 1 },   // E\n    { row: 1, col: 1 },   // SE\n    { row: 1, col: 0 },   // S\n    { row: 1, col: -1 },  // SW\n    { row: 0, col: -1 },  // W\n    { row: -1, col: -1 }, // NW\n  ];\n\n  const startCoords = positionToCoords(position);\n\n  for (const direction of directions) {\n    const flipsInDirection = calculateFlipsInDirection(\n      board,\n      startCoords,\n      direction,\n      player,\n      opponent,\n    );\n    allFlips.push(...flipsInDirection);\n  }\n\n  return allFlips;\n};\n\n/**\n * Calculate flips in a specific direction\n */\nfunction calculateFlipsInDirection(\n  board: Uint8Array,\n  startCoords: { row: number; col: number },\n  direction: { row: number; col: number },\n  player: PlayerColor,\n  opponent: PlayerColor,\n): BoardPosition[] {\n  const flips: BoardPosition[] = [];\n  let currentRow = startCoords.row + direction.row;\n  let currentCol = startCoords.col + direction.col;\n\n  // First, collect all consecutive opponent pieces\n  while (\n    currentRow >= 0 && currentRow < BOARD_SIZE &&\n    currentCol >= 0 && currentCol < BOARD_SIZE\n  ) {\n    const currentPosition = currentRow * BOARD_SIZE + currentCol;\n    const currentPiece = board[currentPosition];\n\n    if (currentPiece === opponent) {\n      // Found opponent piece, add to potential flips\n      flips.push(currentPosition);\n    } else if (currentPiece === player) {\n      // Found our piece - flips are valid if we have opponent pieces between\n      return flips.length > 0 ? flips : [];\n    } else {\n      // Found empty square - no valid flips in this direction\n      return [];\n    }\n\n    currentRow += direction.row;\n    currentCol += direction.col;\n  }\n\n  // Reached edge of board without finding our piece - no valid flips\n  return [];\n}\n\n/**\n * Get all valid moves for a player\n */\nexport const getValidMoves = (\n  board: Uint8Array,\n  player: PlayerColor,\n): Map<BoardPosition, BoardPosition[]> => {\n  const validMoves = new Map<BoardPosition, BoardPosition[]>();\n\n  for (let position = 0; position < TOTAL_SQUARES; position++) {\n    if (board[position] === PlayerColor.EMPTY) {\n      const result = validateMove(board, position, player);\n      if (result.isValid) {\n        validMoves.set(position, result.flippedPositions);\n      }\n    }\n  }\n\n  return validMoves;\n};\n\n/**\n * Check if a player has any valid moves\n */\nexport const hasValidMoves = (board: Uint8Array, player: PlayerColor): boolean => {\n  for (let position = 0; position < TOTAL_SQUARES; position++) {\n    if (board[position] === PlayerColor.EMPTY) {\n      const result = validateMove(board, position, player);\n      if (result.isValid) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/**\n * Apply a move to the board (creates new board state)\n */\nexport const applyMove = (\n  board: Uint8Array,\n  position: BoardPosition,\n  player: PlayerColor,\n  flippedPositions: BoardPosition[],\n): Uint8Array => {\n  const newBoard = new Uint8Array(board);\n\n  // Place the new piece\n  newBoard[position] = player;\n\n  // Flip all the captured pieces\n  for (const flipPosition of flippedPositions) {\n    newBoard[flipPosition] = player;\n  }\n\n  return newBoard;\n};\n\n/**\n * Validate and apply a move in one step\n */\nexport const makeMove = (\n  board: Uint8Array,\n  position: BoardPosition,\n  player: PlayerColor,\n): { newBoard: Uint8Array; flippedPositions: BoardPosition[] } => {\n  const validation = validateMove(board, position, player);\n\n  if (!validation.isValid) {\n    throw new InvalidMoveError(\n      validation.reason || 'Invalid move',\n      position,\n      'invalid_move',\n    );\n  }\n\n  const newBoard = applyMove(board, position, player, validation.flippedPositions);\n\n  return {\n    newBoard,\n    flippedPositions: validation.flippedPositions,\n  };\n};\n\n/**\n * Check if game is over (no moves for either player)\n */\nexport const isGameOver = (board: Uint8Array): boolean => {\n  return !hasValidMoves(board, PlayerColor.BLACK) && !hasValidMoves(board, PlayerColor.WHITE);\n};\n\n/**\n * Get game winner based on current board state\n */\nexport const getWinner = (board: Uint8Array): PlayerColor | 'tie' | null => {\n  if (!isGameOver(board)) {\n    return null; // Game not over yet\n  }\n\n  let blackCount = 0;\n  let whiteCount = 0;\n\n  for (let i = 0; i < TOTAL_SQUARES; i++) {\n    if (board[i] === PlayerColor.BLACK) {\n      blackCount++;\n    } else if (board[i] === PlayerColor.WHITE) {\n      whiteCount++;\n    }\n  }\n\n  if (blackCount > whiteCount) {\n    return PlayerColor.BLACK;\n  } else if (whiteCount > blackCount) {\n    return PlayerColor.WHITE;\n  } else {\n    return 'tie';\n  }\n};\n\n/**\n * Check if a position is a corner move\n */\nexport const isCornerMove = (position: BoardPosition): boolean => {\n  return [0, 7, 56, 63].includes(position);\n};\n\n/**\n * Check if a position is an edge move\n */\nexport const isEdgeMove = (position: BoardPosition): boolean => {\n  const coords = positionToCoords(position);\n  return coords.row === 0 || coords.row === 7 || coords.col === 0 || coords.col === 7;\n};\n\n/**\n * Check if a position is adjacent to a corner (dangerous X-square)\n */\nexport const isXSquareMove = (position: BoardPosition): boolean => {\n  return [9, 14, 49, 54].includes(position);\n};\n\n/**\n * Check if a position is next to a corner (C-square)\n */\nexport const isCSquareMove = (position: BoardPosition): boolean => {\n  return [1, 6, 8, 15, 48, 55, 57, 62].includes(position);\n};\n\n/**\n * Calculate mobility (number of valid moves) for a player after a hypothetical move\n */\nexport const calculateMobility = (\n  board: Uint8Array,\n  position: BoardPosition,\n  player: PlayerColor,\n): { playerMobility: number; opponentMobility: number } => {\n  // Apply the hypothetical move\n  const validation = validateMove(board, position, player);\n  if (!validation.isValid) {\n    return { playerMobility: 0, opponentMobility: 0 };\n  }\n\n  const newBoard = applyMove(board, position, player, validation.flippedPositions);\n  const opponent = player === PlayerColor.BLACK ? PlayerColor.WHITE : PlayerColor.BLACK;\n\n  const playerMoves = getValidMoves(newBoard, player);\n  const opponentMoves = getValidMoves(newBoard, opponent);\n\n  return {\n    playerMobility: playerMoves.size,\n    opponentMobility: opponentMoves.size,\n  };\n};\n\n/**\n * Calculate stability score for a position (rough estimate)\n */\nexport const calculateStability = (\n  board: Uint8Array,\n  position: BoardPosition,\n  player: PlayerColor,\n): number => {\n  let stability = 0;\n  const coords = positionToCoords(position);\n\n  // Corner pieces are completely stable\n  if (isCornerMove(position)) {\n    return 10;\n  }\n\n  // Edge pieces have some stability\n  if (isEdgeMove(position)) {\n    stability += 3;\n  }\n\n  // Check if piece is protected by friendly pieces in multiple directions\n  const directions = [\n    { row: -1, col: 0 }, { row: -1, col: 1 }, { row: 0, col: 1 }, { row: 1, col: 1 },\n    { row: 1, col: 0 }, { row: 1, col: -1 }, { row: 0, col: -1 }, { row: -1, col: -1 },\n  ];\n\n  let protectedDirections = 0;\n  for (const dir of directions) {\n    const newRow = coords.row + dir.row;\n    const newCol = coords.col + dir.col;\n\n    if (newRow >= 0 && newRow < BOARD_SIZE && newCol >= 0 && newCol < BOARD_SIZE) {\n      const neighborPos = newRow * BOARD_SIZE + newCol;\n      if (board[neighborPos] === player) {\n        protectedDirections++;\n      }\n    }\n  }\n\n  stability += Math.floor(protectedDirections / 2);\n  return stability;\n};","/**\n * Move Scoring System\n *\n * Evaluates move quality and assigns scores/grades based on:\n * - Position value (corners, edges, X-squares, etc.)\n * - Number of pieces flipped\n * - Stability bonus\n * - Mobility impact\n */\n\nimport {\n  BoardPosition,\n  PlayerColor,\n  Grade,\n  GRADE_THRESHOLDS,\n  POSITION_VALUES,\n} from '@/types/game-types';\nimport type { MoveScore, ScoreBreakdown } from '@/core/models/Move';\nimport {\n  isCornerMove,\n  isEdgeMove,\n  isXSquareMove,\n  isCSquareMove,\n  calculateMobility,\n  calculateStability,\n} from './move-validator';\n\n/**\n * Evaluate a move and return its score and grade\n */\nexport const evaluateMove = (\n  board: Uint8Array,\n  position: BoardPosition,\n  player: PlayerColor,\n  flippedPositions: BoardPosition[],\n): MoveScore => {\n  const breakdown = calculateScoreBreakdown(board, position, player, flippedPositions);\n  const grade = calculateGrade(breakdown.total);\n\n  return {\n    points: breakdown.total,\n    grade,\n    breakdown: Object.freeze(breakdown),\n  };\n};\n\n/**\n * Calculate detailed score breakdown for a move\n */\nexport const calculateScoreBreakdown = (\n  board: Uint8Array,\n  position: BoardPosition,\n  player: PlayerColor,\n  flippedPositions: BoardPosition[],\n): ScoreBreakdown => {\n  const positionValue = calculatePositionValue(position);\n  const flippedCount = flippedPositions.length;\n  const stabilityBonus = calculateStabilityBonus(board, position, player, flippedPositions);\n  const mobilityFactor = calculateMobilityFactor(board, position, player);\n\n  // Base score calculation including mobility difference\n  let baseScore = positionValue + flippedCount + stabilityBonus;\n\n  // Add mobility factor (difference between player and opponent mobility)\n  const total = Math.max(0, Math.floor(baseScore + mobilityFactor));\n\n  return {\n    positionValue,\n    flippedCount,\n    stabilityBonus,\n    mobilityFactor,\n    total,\n  };\n};\n\n/**\n * Calculate position value based on strategic importance\n */\nexport const calculatePositionValue = (position: BoardPosition): number => {\n  if (isCornerMove(position)) {\n    return POSITION_VALUES.CORNER; // 25 points - extremely valuable\n  }\n\n  if (isXSquareMove(position)) {\n    return POSITION_VALUES.X_SQUARE; // -10 points - dangerous, gives opponent corner access\n  }\n\n  if (isCSquareMove(position)) {\n    return POSITION_VALUES.C_SQUARE; // -6 points - somewhat dangerous\n  }\n\n  if (isEdgeMove(position)) {\n    return POSITION_VALUES.EDGE; // 6 points - good for stability\n  }\n\n  return POSITION_VALUES.NORMAL; // 0 points - neutral position\n};\n\n/**\n * Calculate stability bonus for pieces that will become stable\n */\nexport const calculateStabilityBonus = (\n  board: Uint8Array,\n  position: BoardPosition,\n  player: PlayerColor,\n  flippedPositions: BoardPosition[],\n): number => {\n  let stabilityBonus = 0;\n\n  // Bonus for the placed piece\n  const placedStability = calculateStability(board, position, player);\n  stabilityBonus += placedStability;\n\n  // Bonus for newly stable flipped pieces\n  for (const flippedPos of flippedPositions) {\n    const flippedStability = calculateStability(board, flippedPos, player);\n    stabilityBonus += Math.floor(flippedStability / 2); // Half value for flipped pieces\n  }\n\n  return stabilityBonus;\n};\n\n/**\n * Calculate mobility factor as the direct difference between player and opponent mobility\n */\nexport const calculateMobilityFactor = (\n  board: Uint8Array,\n  position: BoardPosition,\n  player: PlayerColor,\n): number => {\n  const mobility = calculateMobility(board, position, player);\n  const mobilityDifference = mobility.playerMobility - mobility.opponentMobility;\n\n  // Return the direct difference (subtraction result)\n  return mobilityDifference;\n};\n\n/**\n * Determine grade based on total score\n */\nexport const calculateGrade = (score: number): Grade => {\n  if (score >= GRADE_THRESHOLDS.SSS) {\n    return Grade.SSS; // 60+ points\n  } else if (score >= GRADE_THRESHOLDS.SS) {\n    return Grade.SS; // 45-59 points\n  } else if (score >= GRADE_THRESHOLDS.S) {\n    return Grade.S; // 30-44 points\n  } else if (score >= GRADE_THRESHOLDS.A) {\n    return Grade.A; // 18-29 points\n  } else if (score >= GRADE_THRESHOLDS.B) {\n    return Grade.B; // 10-17 points\n  } else {\n    return Grade.C; // 0-9 points\n  }\n};\n\n/**\n * Quick evaluation for AI move sorting (simplified version)\n */\nexport const quickEvaluateMove = (\n  _board: Uint8Array,\n  position: BoardPosition,\n  _player: PlayerColor,\n  flippedPositions: BoardPosition[],\n): number => {\n  const positionValue = calculatePositionValue(position);\n  const flippedCount = flippedPositions.length;\n\n  // Simplified calculation for performance\n  return positionValue + flippedCount + (isCornerMove(position) ? 10 : 0);\n};\n\n/**\n * Evaluate all valid moves and return sorted by score\n */\nexport const evaluateAllMoves = (\n  board: Uint8Array,\n  validMoves: Map<BoardPosition, readonly BoardPosition[]> | Map<BoardPosition, BoardPosition[]>,\n  player: PlayerColor,\n): Array<{ position: BoardPosition; score: MoveScore; flippedPositions: BoardPosition[] }> => {\n  const evaluatedMoves: Array<{\n    position: BoardPosition;\n    score: MoveScore;\n    flippedPositions: BoardPosition[];\n  }> = [];\n\n  for (const [position, flippedPositions] of validMoves.entries()) {\n    const score = evaluateMove(board, position, player, [...flippedPositions]);\n    evaluatedMoves.push({ position, score, flippedPositions: [...flippedPositions] });\n  }\n\n  // Sort by score descending (best moves first)\n  return evaluatedMoves.sort((a, b) => b.score.points - a.score.points);\n};\n\n/**\n * Get moves above a certain grade threshold\n */\nexport const getMovesAboveGrade = (\n  evaluatedMoves: Array<{ position: BoardPosition; score: MoveScore; flippedPositions: BoardPosition[] }>,\n  minGrade: Grade,\n): Array<{ position: BoardPosition; score: MoveScore; flippedPositions: BoardPosition[] }> => {\n  const gradeValues = {\n    [Grade.C]: 1,\n    [Grade.B]: 2,\n    [Grade.A]: 3,\n    [Grade.S]: 4,\n    [Grade.SS]: 5,\n    [Grade.SSS]: 6,\n  };\n  const minValue = gradeValues[minGrade];\n\n  return evaluatedMoves.filter(move => gradeValues[move.score.grade] >= minValue);\n};\n\n/**\n * Get the best move from a list of evaluated moves\n */\nexport const getBestMove = (\n  evaluatedMoves: Array<{ position: BoardPosition; score: MoveScore; flippedPositions: BoardPosition[] }>,\n): { position: BoardPosition; score: MoveScore; flippedPositions: BoardPosition[] } | null => {\n  if (evaluatedMoves.length === 0) {return null;}\n\n  // Find highest scoring move\n  let bestMove = evaluatedMoves[0]!;\n  for (const move of evaluatedMoves) {\n    if (move.score.points > bestMove.score.points) {\n      bestMove = move;\n    }\n  }\n\n  return bestMove;\n};\n\n/**\n * Get moves of a specific grade\n */\nexport const getMovesByGrade = (\n  evaluatedMoves: Array<{ position: BoardPosition; score: MoveScore; flippedPositions: BoardPosition[] }>,\n  grade: Grade,\n): Array<{ position: BoardPosition; score: MoveScore; flippedPositions: BoardPosition[] }> => {\n  return evaluatedMoves.filter(move => move.score.grade === grade);\n};\n\n/**\n * Calculate average score of all moves\n */\nexport const calculateAverageScore = (\n  evaluatedMoves: Array<{ position: BoardPosition; score: MoveScore; flippedPositions: BoardPosition[] }>,\n): number => {\n  if (evaluatedMoves.length === 0) {return 0;}\n\n  const totalScore = evaluatedMoves.reduce((sum, move) => sum + move.score.points, 0);\n  return totalScore / evaluatedMoves.length;\n};\n\n/**\n * Get grade distribution for analytics\n */\nexport const getGradeDistribution = (\n  evaluatedMoves: Array<{ position: BoardPosition; score: MoveScore; flippedPositions: BoardPosition[] }>,\n): Record<Grade, number> => {\n  const distribution: Record<Grade, number> = {\n    [Grade.C]: 0,\n    [Grade.B]: 0,\n    [Grade.A]: 0,\n    [Grade.S]: 0,\n    [Grade.SS]: 0,\n    [Grade.SSS]: 0,\n  };\n\n  for (const move of evaluatedMoves) {\n    distribution[move.score.grade]++;\n  }\n\n  return distribution;\n};\n\n/**\n * Check if a move qualifies for bonus effects (high flip count)\n */\nexport const shouldTriggerBonusEffects = (flippedCount: number): boolean => {\n  return flippedCount >= 16; // Massive flip bonus\n};\n\n/**\n * Calculate endgame scoring adjustments\n */\nexport const calculateEndgameAdjustment = (\n  board: Uint8Array,\n  position: BoardPosition,\n  _player: PlayerColor,\n): number => {\n  let emptySquares = 0;\n  for (let i = 0; i < board.length; i++) {\n    if (board[i] === PlayerColor.EMPTY) {\n      emptySquares++;\n    }\n  }\n\n  // In endgame (< 16 empty squares), prioritize flipping count over position\n  if (emptySquares < 16) {\n    return isCornerMove(position) ? 5 : 0; // Reduced corner bonus\n  }\n\n  return 0; // No adjustment in early/mid game\n};\n\n/**\n * Format score for display\n */\nexport const formatScore = (score: MoveScore): string => {\n  return `${score.grade}-${score.points}`;\n};\n\n/**\n * Format score breakdown for detailed display\n */\nexport const formatBreakdown = (breakdown: ScoreBreakdown): string => {\n  return [\n    `Position: ${breakdown.positionValue >= 0 ? '+' : ''}${breakdown.positionValue}`,\n    `Flipped: +${breakdown.flippedCount}`,\n    `Stability: +${breakdown.stabilityBonus}`,\n    `Mobility: ${breakdown.mobilityFactor > 0 ? '+' : ''}${breakdown.mobilityFactor}`,\n    `Total: ${breakdown.total}`,\n  ].join(' | ');\n};","/**\r\n * Greedy AI Strategy (v1)\r\n *\r\n * AI implementation that selects moves based on immediate score evaluation.\r\n * Uses the move evaluation system to pick the highest-scoring move available.\r\n * Target response time: ~1 second for thorough evaluation.\r\n */\r\n\r\nimport { AIDifficulty, PlayerColor, BoardPosition } from '@/types/game-types';\r\nimport type { GameState } from '@/core/models/GameState';\r\nimport { AIStrategyBase, type AIMoveResult, AIUtils } from '../ai-strategy-base';\r\nimport { evaluateAllMoves, getBestMove } from '@/core/utils/move-evaluator';\r\nimport { Grade } from '@/types/game-types';\r\n\r\n/**\r\n * Greedy AI implementation\r\n */\r\nexport class GreedyAI extends AIStrategyBase {\r\n  public readonly difficulty = AIDifficulty.GREEDY;\r\n  public readonly name = 'Greedy AI';\r\n  public readonly description = 'Selects moves with highest immediate score';\r\n\r\n  protected async selectMoveImpl(\r\n    gameState: GameState,\r\n    player: PlayerColor,\r\n    timeLimit: number,\r\n  ): Promise<AIMoveResult> {\r\n    const startTime = Date.now();\r\n\r\n    // Get all valid moves and evaluate them\r\n    const evaluatedMoves = evaluateAllMoves(gameState.board as Uint8Array, new Map(gameState.validMoves), player);\r\n\r\n    if (evaluatedMoves.length === 0) {\r\n      throw new Error('No valid moves available');\r\n    }\r\n\r\n    // Simulate thinking time (but be efficient)\r\n    const thinkingTime = Math.min(500 + Math.random() * 300, timeLimit * 0.8); // 500-800ms\r\n    const remainingTime = thinkingTime - (Date.now() - startTime);\r\n\r\n    if (remainingTime > 0) {\r\n      await new Promise(resolve => setTimeout(resolve, remainingTime));\r\n    }\r\n\r\n    // Get the best move\r\n    const bestMove = getBestMove(evaluatedMoves);\r\n\r\n    if (!bestMove) {\r\n      throw new Error('Could not determine best move');\r\n    }\r\n\r\n    // Calculate confidence based on move quality and competition\r\n    const confidence = this.calculateConfidence(evaluatedMoves, bestMove);\r\n\r\n    return {\r\n      position: bestMove.position,\r\n      confidence,\r\n      evaluation: bestMove.score.points,\r\n      thinkingTime: Date.now() - startTime,\r\n      depth: 1, // Only evaluates immediate moves\r\n      nodesEvaluated: evaluatedMoves.length,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate confidence based on move quality and alternatives\r\n   */\r\n  private calculateConfidence(\r\n    evaluatedMoves: Array<{ position: BoardPosition; score: any; flippedPositions: BoardPosition[] }>,\r\n    bestMove: { position: BoardPosition; score: any; flippedPositions: BoardPosition[] },\r\n  ): number {\r\n    if (evaluatedMoves.length === 1) {\r\n      return 0.9; // High confidence when only one move\r\n    }\r\n\r\n    // Base confidence from move grade\r\n    let confidence = 0.3; // Start with moderate confidence\r\n\r\n    switch (bestMove.score.grade) {\r\n      case Grade.S:\r\n        confidence = 0.95;\r\n        break;\r\n      case Grade.A:\r\n        confidence = 0.8;\r\n        break;\r\n      case Grade.B:\r\n        confidence = 0.6;\r\n        break;\r\n      case Grade.C:\r\n        confidence = 0.3;\r\n        break;\r\n    }\r\n\r\n    // Adjust based on score gap to second-best move\r\n    const sortedMoves = [...evaluatedMoves].sort((a, b) => b.score.points - a.score.points);\r\n    if (sortedMoves.length > 1) {\r\n      const scoreGap = sortedMoves[0]!.score.points - sortedMoves[1]!.score.points;\r\n\r\n      if (scoreGap > 15) {\r\n        confidence += 0.15; // Clear winner\r\n      } else if (scoreGap > 5) {\r\n        confidence += 0.05; // Moderate advantage\r\n      } else {\r\n        confidence -= 0.1; // Close competition\r\n      }\r\n    }\r\n\r\n    return Math.max(0.1, Math.min(0.95, confidence));\r\n  }\r\n}\r\n\r\n/**\r\n * Enhanced Greedy AI with additional heuristics\r\n */\r\nexport class EnhancedGreedyAI extends AIStrategyBase {\r\n  public readonly difficulty = AIDifficulty.GREEDY;\r\n  public readonly name = 'Enhanced Greedy AI';\r\n  public readonly description = 'Greedy with additional strategic considerations';\r\n\r\n  protected async selectMoveImpl(\r\n    gameState: GameState,\r\n    player: PlayerColor,\r\n    timeLimit: number,\r\n  ): Promise<AIMoveResult> {\r\n    const startTime = Date.now();\r\n\r\n    const evaluatedMoves = evaluateAllMoves(gameState.board as Uint8Array, new Map(gameState.validMoves), player);\r\n\r\n    if (evaluatedMoves.length === 0) {\r\n      throw new Error('No valid moves available');\r\n    }\r\n\r\n    // Apply additional heuristics\r\n    const enhancedMoves = evaluatedMoves.map(move => ({\r\n      ...move,\r\n      enhancedScore: this.calculateEnhancedScore(gameState, move, player),\r\n    }));\r\n\r\n    // Sort by enhanced score\r\n    enhancedMoves.sort((a, b) => b.enhancedScore - a.enhancedScore);\r\n\r\n    // Consider top candidates with similar scores\r\n    const bestScore = enhancedMoves[0]!.enhancedScore;\r\n    const threshold = bestScore * 0.9; // Within 10% of best\r\n    const topCandidates = enhancedMoves.filter(move => move.enhancedScore >= threshold);\r\n\r\n    // Add some randomization among top candidates to avoid predictability\r\n    const selectedMove = AIUtils.selectWeightedRandom(\r\n      topCandidates.map(move => ({ ...move, score: move.enhancedScore })),\r\n      2.0, // Temperature for selection\r\n    );\r\n\r\n    // Simulate thinking time\r\n    const targetThinkingTime = Math.min(600 + Math.random() * 400, timeLimit * 0.9);\r\n    const remainingTime = targetThinkingTime - (Date.now() - startTime);\r\n\r\n    if (remainingTime > 0) {\r\n      await new Promise(resolve => setTimeout(resolve, remainingTime));\r\n    }\r\n\r\n    const confidence = this.calculateEnhancedConfidence(topCandidates, selectedMove);\r\n\r\n    return {\r\n      position: selectedMove.position,\r\n      confidence,\r\n      evaluation: selectedMove.enhancedScore,\r\n      thinkingTime: Date.now() - startTime,\r\n      depth: 1,\r\n      nodesEvaluated: evaluatedMoves.length,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate enhanced score with additional heuristics\r\n   */\r\n  private calculateEnhancedScore(\r\n    gameState: GameState,\r\n    move: { position: BoardPosition; score: any; flippedPositions: BoardPosition[] },\r\n    player: PlayerColor,\r\n  ): number {\r\n    let score = move.score.points;\r\n\r\n    // Game phase consideration\r\n    const gamePhase = AIUtils.getGamePhase(gameState);\r\n\r\n    if (gamePhase > 0.7) {\r\n      // Endgame: prioritize flipped pieces over position\r\n      score += move.flippedPositions.length * 2;\r\n    } else if (gamePhase < 0.3) {\r\n      // Early game: be more careful about dangerous positions\r\n      if (AIUtils.isDangerousPosition(move.position)) {\r\n        score -= 5;\r\n      }\r\n    }\r\n\r\n    // Stability consideration\r\n    const stability = AIUtils.evaluatePositionStability(gameState, move.position, player);\r\n    score += stability;\r\n\r\n    // Mobility preservation (don't give opponent too many options)\r\n    const opponent = player === PlayerColor.BLACK ? PlayerColor.WHITE : PlayerColor.BLACK;\r\n    const currentMobility = AIUtils.calculateMobility(gameState, opponent);\r\n\r\n    // Slightly prefer moves that don't dramatically increase opponent mobility\r\n    if (currentMobility < 3) {\r\n      score += 2; // Bonus for limiting opponent when they're already constrained\r\n    }\r\n\r\n    return score;\r\n  }\r\n\r\n  /**\r\n   * Calculate confidence for enhanced AI\r\n   */\r\n  private calculateEnhancedConfidence(\r\n    topCandidates: any[],\r\n    selectedMove: any,\r\n  ): number {\r\n    let confidence = 0.6; // Base confidence for enhanced greedy\r\n\r\n    // Confidence increases if we have fewer but stronger candidates\r\n    if (topCandidates.length === 1) {\r\n      confidence = 0.9;\r\n    } else if (topCandidates.length <= 3) {\r\n      confidence = 0.8;\r\n    }\r\n\r\n    // Adjust based on selected move grade\r\n    if (selectedMove.score?.grade) {\r\n      switch (selectedMove.score.grade) {\r\n        case Grade.S:\r\n          confidence = Math.max(confidence, 0.9);\r\n          break;\r\n        case Grade.A:\r\n          confidence = Math.max(confidence, 0.75);\r\n          break;\r\n        case Grade.B:\r\n          confidence = Math.max(confidence, 0.6);\r\n          break;\r\n      }\r\n    }\r\n\r\n    return Math.max(0.2, Math.min(0.95, confidence));\r\n  }\r\n}\r\n\r\n/**\r\n * Adaptive Greedy AI that adjusts strategy based on game situation\r\n */\r\nexport class AdaptiveGreedyAI extends AIStrategyBase {\r\n  public readonly difficulty = AIDifficulty.GREEDY;\r\n  public readonly name = 'Adaptive Greedy AI';\r\n  public readonly description = 'Greedy AI that adapts strategy to game phase and score';\r\n\r\n  protected async selectMoveImpl(\r\n    gameState: GameState,\r\n    player: PlayerColor,\r\n    timeLimit: number,\r\n  ): Promise<AIMoveResult> {\r\n    const startTime = Date.now();\r\n\r\n    const evaluatedMoves = evaluateAllMoves(gameState.board as Uint8Array, new Map(gameState.validMoves), player);\r\n\r\n    if (evaluatedMoves.length === 0) {\r\n      throw new Error('No valid moves available');\r\n    }\r\n\r\n    // Determine strategy based on game situation\r\n    const strategy = this.determineStrategy(gameState, player);\r\n\r\n    // Apply strategy-specific evaluation\r\n    const strategicMoves = evaluatedMoves.map(move => ({\r\n      ...move,\r\n      strategicScore: this.calculateStrategicScore(gameState, move, player, strategy),\r\n    }));\r\n\r\n    strategicMoves.sort((a, b) => b.strategicScore - a.strategicScore);\r\n\r\n    // Select best move with some randomization based on strategy\r\n    const selectionTemperature = this.getSelectionTemperature(strategy);\r\n    const topMoves = strategicMoves.slice(0, Math.min(5, strategicMoves.length));\r\n\r\n    const selectedMove = AIUtils.selectWeightedRandom(\r\n      topMoves.map(move => ({ ...move, score: move.strategicScore })),\r\n      selectionTemperature,\r\n    );\r\n\r\n    // Adaptive thinking time based on situation complexity\r\n    const adaptiveThinkingTime = this.calculateAdaptiveThinkingTime(\r\n      gameState,\r\n      evaluatedMoves.length,\r\n      strategy,\r\n      timeLimit,\r\n    );\r\n\r\n    const remainingTime = adaptiveThinkingTime - (Date.now() - startTime);\r\n    if (remainingTime > 0) {\r\n      await new Promise(resolve => setTimeout(resolve, remainingTime));\r\n    }\r\n\r\n    return {\r\n      position: selectedMove.position,\r\n      confidence: this.calculateAdaptiveConfidence(strategy, selectedMove, topMoves),\r\n      evaluation: selectedMove.strategicScore,\r\n      thinkingTime: Date.now() - startTime,\r\n      depth: 1,\r\n      nodesEvaluated: evaluatedMoves.length,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Determine strategy based on game situation\r\n   */\r\n  private determineStrategy(gameState: GameState, player: PlayerColor): string {\r\n    const gamePhase = AIUtils.getGamePhase(gameState);\r\n    const myScore = player === PlayerColor.BLACK ? gameState.scores.black : gameState.scores.white;\r\n    const opponentScore = player === PlayerColor.BLACK ? gameState.scores.white : gameState.scores.black;\r\n    const scoreDifference = myScore - opponentScore;\r\n    const mobility = gameState.validMoves.size;\r\n\r\n    // Endgame strategy\r\n    if (gamePhase > 0.8) {\r\n      return scoreDifference > 0 ? 'endgame_ahead' : 'endgame_behind';\r\n    }\r\n\r\n    // Mid-game strategies\r\n    if (gamePhase > 0.4) {\r\n      if (scoreDifference > 5) {return 'consolidate';}\r\n      if (scoreDifference < -5) {return 'aggressive';}\r\n      if (mobility < 3) {return 'careful';}\r\n      return 'balanced';\r\n    }\r\n\r\n    // Early game strategies\r\n    if (mobility > 8) {return 'opportunistic';}\r\n    return 'cautious';\r\n  }\r\n\r\n  private calculateStrategicScore(\r\n    gameState: GameState,\r\n    move: any,\r\n    player: PlayerColor,\r\n    strategy: string,\r\n  ): number {\r\n    let score = move.score.points;\r\n    AIUtils.getGamePhase(gameState);\r\n\r\n    switch (strategy) {\r\n      case 'endgame_ahead':\r\n        // When ahead in endgame, maximize piece count\r\n        score += move.flippedPositions.length * 3;\r\n        break;\r\n\r\n      case 'endgame_behind':\r\n        // When behind in endgame, take risks for big gains\r\n        score += move.flippedPositions.length * 4;\r\n        if (move.score.grade === Grade.A || move.score.grade === Grade.S) {\r\n          score += 10;\r\n        }\r\n        break;\r\n\r\n      case 'aggressive':\r\n        // Prioritize high-scoring moves when behind\r\n        if (move.score.grade === Grade.A || move.score.grade === Grade.S) {\r\n          score += 8;\r\n        }\r\n        score += move.flippedPositions.length * 2;\r\n        break;\r\n\r\n      case 'consolidate':\r\n        // Play safely when ahead\r\n        if ([0, 7, 56, 63].includes(move.position)) {\r\n          score += 10; // Corner bonus\r\n        }\r\n        if (AIUtils.isDangerousPosition(move.position)) {\r\n          score -= 8; // Avoid risk\r\n        }\r\n        break;\r\n\r\n      case 'careful':\r\n        // Low mobility - be extra careful\r\n        if (AIUtils.isDangerousPosition(move.position)) {\r\n          score -= 15;\r\n        }\r\n        score += AIUtils.evaluatePositionStability(gameState, move.position, player) * 2;\r\n        break;\r\n\r\n      case 'opportunistic':\r\n        // High mobility - can take some risks for rewards\r\n        if (move.score.grade === Grade.S) {\r\n          score += 15;\r\n        }\r\n        break;\r\n\r\n      case 'cautious':\r\n        // Early game caution\r\n        if (AIUtils.isDangerousPosition(move.position)) {\r\n          score -= 10;\r\n        }\r\n        break;\r\n\r\n      default: // 'balanced'\r\n        // Standard evaluation\r\n        break;\r\n    }\r\n\r\n    return score;\r\n  }\r\n\r\n  private getSelectionTemperature(strategy: string): number {\r\n    switch (strategy) {\r\n      case 'aggressive':\r\n      case 'endgame_behind':\r\n        return 1.5; // More randomization when desperate\r\n      case 'careful':\r\n      case 'consolidate':\r\n        return 3.0; // Less randomization when being careful\r\n      default:\r\n        return 2.0; // Moderate randomization\r\n    }\r\n  }\r\n\r\n  private calculateAdaptiveThinkingTime(\r\n    _gameState: GameState,\r\n    moveCount: number,\r\n    strategy: string,\r\n    timeLimit: number,\r\n  ): number {\r\n    let baseTime = 400;\r\n\r\n    // More thinking for complex situations\r\n    if (moveCount > 8) {baseTime += 200;}\r\n    if (moveCount < 3) {baseTime += 100;} // Think more when few options\r\n\r\n    // Strategy-based adjustments\r\n    switch (strategy) {\r\n      case 'endgame_ahead':\r\n      case 'endgame_behind':\r\n        baseTime += 300; // Endgame needs more thought\r\n        break;\r\n      case 'careful':\r\n        baseTime += 200; // Be more careful\r\n        break;\r\n      case 'opportunistic':\r\n        baseTime -= 100; // Can be quicker with many options\r\n        break;\r\n    }\r\n\r\n    // Add randomization\r\n    baseTime += Math.random() * 200;\r\n\r\n    return Math.min(baseTime, timeLimit * 0.9);\r\n  }\r\n\r\n  private calculateAdaptiveConfidence(strategy: string, selectedMove: any, topMoves: any[]): number {\r\n    let confidence = 0.7; // Base confidence\r\n\r\n    // Strategy-based confidence\r\n    switch (strategy) {\r\n      case 'consolidate':\r\n      case 'endgame_ahead':\r\n        confidence = 0.8; // More confident when ahead\r\n        break;\r\n      case 'aggressive':\r\n      case 'endgame_behind':\r\n        confidence = 0.6; // Less confident when taking risks\r\n        break;\r\n      case 'careful':\r\n        confidence = 0.75; // Moderate confidence in careful play\r\n        break;\r\n    }\r\n\r\n    // Adjust based on move quality\r\n    if (selectedMove.score?.grade === Grade.S) {\r\n      confidence = Math.min(0.95, confidence + 0.15);\r\n    } else if (selectedMove.score?.grade === Grade.A) {\r\n      confidence = Math.min(0.9, confidence + 0.1);\r\n    }\r\n\r\n    // Reduce confidence if many similar options\r\n    if (topMoves.length > 4) {\r\n      confidence -= 0.1;\r\n    }\r\n\r\n    return Math.max(0.2, confidence);\r\n  }\r\n}\r\n\r\n/**\r\n * Factory function to create greedy AI variants\r\n */\r\nexport const createGreedyAI = {\r\n  /**\r\n   * Standard greedy AI\r\n   */\r\n  standard(): GreedyAI {\r\n    return new GreedyAI();\r\n  },\r\n\r\n  /**\r\n   * Enhanced greedy with additional heuristics\r\n   */\r\n  enhanced(): EnhancedGreedyAI {\r\n    return new EnhancedGreedyAI();\r\n  },\r\n\r\n  /**\r\n   * Adaptive greedy that changes strategy based on game state\r\n   */\r\n  adaptive(): AdaptiveGreedyAI {\r\n    return new AdaptiveGreedyAI();\r\n  },\r\n};","/**\n * Advanced Position Evaluation System\n *\n * Sophisticated evaluation function for Minimax AI that considers:\n * - Position value and stability\n * - Mobility and potential moves\n * - Corner and edge control\n * - Game phase awareness\n * - Parity and timing\n */\n\nimport {\n  BoardPosition,\n  PlayerColor,\n  positionToCoords,\n  isCorner,\n  isEdge,\n  isXSquare,\n  isCSquare,\n  BOARD_SIZE,\n} from '@/types/game-types';\nimport type { GameState } from '@/core/models/GameState';\n\n/**\n * Comprehensive position evaluation weights\n */\nconst EVALUATION_WEIGHTS = {\n  POSITION_VALUE: 1.0,\n  MOBILITY: 2.0,\n  STABILITY: 3.0,\n  CORNER_CONTROL: 5.0,\n  EDGE_CONTROL: 1.5,\n  POTENTIAL_MOBILITY: 1.0,\n  PARITY: 0.5,\n  ENDGAME_MATERIAL: 10.0,\n} as const;\n\n/**\n * Static position values for advanced evaluation\n */\nconst ADVANCED_POSITION_VALUES = [\n  100, -20,  10,   5,   5,  10, -20, 100,\n  -20, -50,  -2,  -2,  -2,  -2, -50, -20,\n   10,  -2,  16,   2,   2,  16,  -2,  10,\n    5,  -2,   2,   1,   1,   2,  -2,   5,\n    5,  -2,   2,   1,   1,   2,  -2,   5,\n   10,  -2,  16,   2,   2,  16,  -2,  10,\n  -20, -50,  -2,  -2,  -2,  -2, -50, -20,\n  100, -20,  10,   5,   5,  10, -20, 100,\n] as const;\n\n/**\n * Stability values for each position\n */\nconst STABILITY_VALUES = [\n  4, 0, 3, 2, 2, 3, 0, 4,\n  0, 0, 1, 1, 1, 1, 0, 0,\n  3, 1, 2, 1, 1, 2, 1, 3,\n  2, 1, 1, 1, 1, 1, 1, 2,\n  2, 1, 1, 1, 1, 1, 1, 2,\n  3, 1, 2, 1, 1, 2, 1, 3,\n  0, 0, 1, 1, 1, 1, 0, 0,\n  4, 0, 3, 2, 2, 3, 0, 4,\n] as const;\n\n/**\n * Result of position evaluation\n */\nexport interface EvaluationResult {\n  readonly totalScore: number;\n  readonly breakdown: {\n    readonly positionValue: number;\n    readonly mobility: number;\n    readonly stability: number;\n    readonly cornerControl: number;\n    readonly edgeControl: number;\n    readonly potentialMobility: number;\n    readonly parity: number;\n    readonly material: number;\n  };\n}\n\n/**\n * Advanced position evaluator for AI strategies\n */\nexport class AdvancedEvaluator {\n  /**\n   * Evaluate position for a specific player\n   */\n  static evaluatePosition(gameState: GameState, player: PlayerColor): EvaluationResult {\n    const board = gameState.board as Uint8Array;\n    const opponent = player === PlayerColor.BLACK ? PlayerColor.WHITE : PlayerColor.BLACK;\n\n    // Calculate individual evaluation components\n    const positionValue = this.evaluatePositionValue(board, player, opponent);\n    const mobility = this.evaluateMobility(gameState, player, opponent);\n    const stability = this.evaluateStability(board, player, opponent);\n    const cornerControl = this.evaluateCornerControl(board, player, opponent);\n    const edgeControl = this.evaluateEdgeControl(board, player, opponent);\n    const potentialMobility = this.evaluatePotentialMobility(board, player, opponent);\n    const parity = this.evaluateParity(board, player, opponent);\n    const material = this.evaluateMaterial(board, player, opponent);\n\n    // Calculate weighted total score\n    const totalScore =\n      positionValue * EVALUATION_WEIGHTS.POSITION_VALUE +\n      mobility * EVALUATION_WEIGHTS.MOBILITY +\n      stability * EVALUATION_WEIGHTS.STABILITY +\n      cornerControl * EVALUATION_WEIGHTS.CORNER_CONTROL +\n      edgeControl * EVALUATION_WEIGHTS.EDGE_CONTROL +\n      potentialMobility * EVALUATION_WEIGHTS.POTENTIAL_MOBILITY +\n      parity * EVALUATION_WEIGHTS.PARITY +\n      material * EVALUATION_WEIGHTS.ENDGAME_MATERIAL;\n\n    return {\n      totalScore,\n      breakdown: {\n        positionValue,\n        mobility,\n        stability,\n        cornerControl,\n        edgeControl,\n        potentialMobility,\n        parity,\n        material,\n      },\n    };\n  }\n\n  /**\n   * Evaluate position values of pieces on board\n   */\n  private static evaluatePositionValue(\n    board: Uint8Array,\n    player: PlayerColor,\n    opponent: PlayerColor,\n  ): number {\n    let score = 0;\n\n    for (let position = 0; position < 64; position++) {\n      const piece = board[position];\n      if (piece === player) {\n        score += ADVANCED_POSITION_VALUES[position] ?? 0;\n      } else if (piece === opponent) {\n        score -= ADVANCED_POSITION_VALUES[position] ?? 0;\n      }\n    }\n\n    return score;\n  }\n\n  /**\n   * Evaluate current mobility (number of valid moves)\n   */\n  private static evaluateMobility(\n    gameState: GameState,\n    player: PlayerColor,\n    opponent: PlayerColor,\n  ): number {\n    const playerMobility = gameState.currentPlayer === player ? gameState.validMoves.size : 0;\n    const opponentMobility = gameState.currentPlayer === opponent ? gameState.validMoves.size : 0;\n\n    // More mobility is better, but avoid division by zero\n    if (playerMobility + opponentMobility === 0) return 0;\n\n    return ((playerMobility - opponentMobility) / (playerMobility + opponentMobility)) * 100;\n  }\n\n  /**\n   * Evaluate stability of pieces (how hard they are to flip)\n   */\n  private static evaluateStability(\n    board: Uint8Array,\n    player: PlayerColor,\n    opponent: PlayerColor,\n  ): number {\n    let playerStability = 0;\n    let opponentStability = 0;\n\n    for (let position = 0; position < 64; position++) {\n      const piece = board[position];\n      const stabilityValue = this.calculatePieceStability(board, position);\n\n      if (piece === player) {\n        playerStability += stabilityValue;\n      } else if (piece === opponent) {\n        opponentStability += stabilityValue;\n      }\n    }\n\n    return playerStability - opponentStability;\n  }\n\n  /**\n   * Calculate stability of a single piece\n   */\n  private static calculatePieceStability(board: Uint8Array, position: BoardPosition): number {\n    const piece = board[position];\n    if (piece === PlayerColor.EMPTY || piece === undefined) return 0;\n\n    let stability = STABILITY_VALUES[position] ?? 0;\n\n    // Corner pieces are completely stable\n    if (isCorner(position)) {\n      return stability + 10;\n    }\n\n    // Check stability in all 8 directions\n    const directions = [-9, -8, -7, -1, 1, 7, 8, 9];\n    let stableDirections = 0;\n\n    for (const dir of directions) {\n      if (this.isDirectionStable(board, position, dir, piece)) {\n        stableDirections++;\n      }\n    }\n\n    return stability + stableDirections;\n  }\n\n  /**\n   * Check if a piece is stable in a specific direction\n   */\n  private static isDirectionStable(\n    board: Uint8Array,\n    position: BoardPosition,\n    direction: number,\n    piece: PlayerColor,\n  ): boolean {\n    const pos1 = position + direction;\n    const pos2 = position - direction;\n\n    // Check bounds\n    if (pos1 < 0 || pos1 >= 64 || pos2 < 0 || pos2 >= 64) return true;\n\n    // Both directions should have same color or edge\n    return board[pos1] === piece || board[pos2] === piece;\n  }\n\n  /**\n   * Evaluate corner control\n   */\n  private static evaluateCornerControl(\n    board: Uint8Array,\n    player: PlayerColor,\n    opponent: PlayerColor,\n  ): number {\n    const corners = [0, 7, 56, 63];\n    let playerCorners = 0;\n    let opponentCorners = 0;\n\n    for (const corner of corners) {\n      if (board[corner] === player) {\n        playerCorners++;\n      } else if (board[corner] === opponent) {\n        opponentCorners++;\n      }\n    }\n\n    return (playerCorners - opponentCorners) * 25;\n  }\n\n  /**\n   * Evaluate edge control\n   */\n  private static evaluateEdgeControl(\n    board: Uint8Array,\n    player: PlayerColor,\n    opponent: PlayerColor,\n  ): number {\n    let playerEdges = 0;\n    let opponentEdges = 0;\n\n    for (let position = 0; position < 64; position++) {\n      if (isEdge(position) && !isCorner(position)) {\n        if (board[position] === player) {\n          playerEdges++;\n        } else if (board[position] === opponent) {\n          opponentEdges++;\n        }\n      }\n    }\n\n    return playerEdges - opponentEdges;\n  }\n\n  /**\n   * Evaluate potential mobility (empty squares adjacent to opponent pieces)\n   */\n  private static evaluatePotentialMobility(\n    board: Uint8Array,\n    player: PlayerColor,\n    opponent: PlayerColor,\n  ): number {\n    let playerPotential = 0;\n    let opponentPotential = 0;\n\n    for (let position = 0; position < 64; position++) {\n      if (board[position] === PlayerColor.EMPTY) {\n        const adjacentToPlayer = this.isAdjacentToColor(board, position, player);\n        const adjacentToOpponent = this.isAdjacentToColor(board, position, opponent);\n\n        if (adjacentToPlayer) playerPotential++;\n        if (adjacentToOpponent) opponentPotential++;\n      }\n    }\n\n    return playerPotential - opponentPotential;\n  }\n\n  /**\n   * Check if a position is adjacent to pieces of a specific color\n   */\n  private static isAdjacentToColor(\n    board: Uint8Array,\n    position: BoardPosition,\n    color: PlayerColor,\n  ): boolean {\n    const directions = [-9, -8, -7, -1, 1, 7, 8, 9];\n\n    for (const dir of directions) {\n      const adjacent = position + dir;\n      if (adjacent >= 0 && adjacent < 64 && board[adjacent] === color) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Evaluate parity (who gets the last move)\n   */\n  private static evaluateParity(\n    board: Uint8Array,\n    player: PlayerColor,\n    opponent: PlayerColor,\n  ): number {\n    let emptySquares = 0;\n\n    for (let i = 0; i < 64; i++) {\n      if (board[i] === PlayerColor.EMPTY) {\n        emptySquares++;\n      }\n    }\n\n    // If odd number of empty squares, current player has advantage\n    return emptySquares % 2 === 1 ? 1 : -1;\n  }\n\n  /**\n   * Evaluate material balance (piece count) - important in endgame\n   */\n  private static evaluateMaterial(\n    board: Uint8Array,\n    player: PlayerColor,\n    opponent: PlayerColor,\n  ): number {\n    let playerPieces = 0;\n    let opponentPieces = 0;\n    let emptySquares = 0;\n\n    for (let i = 0; i < 64; i++) {\n      const piece = board[i];\n      if (piece === player) {\n        playerPieces++;\n      } else if (piece === opponent) {\n        opponentPieces++;\n      } else {\n        emptySquares++;\n      }\n    }\n\n    // Material evaluation is more important in endgame\n    const endgameWeight = emptySquares < 16 ? 2.0 : 0.1;\n\n    return (playerPieces - opponentPieces) * endgameWeight;\n  }\n\n  /**\n   * Quick evaluation for move ordering (faster version)\n   */\n  static quickEvaluate(\n    board: Uint8Array,\n    position: BoardPosition,\n    player: PlayerColor,\n    flippedPositions: BoardPosition[],\n  ): number {\n    let score = 0;\n\n    // Position value\n    score += ADVANCED_POSITION_VALUES[position] ?? 0;\n\n    // Flipped pieces count\n    score += flippedPositions.length * 5;\n\n    // Corner bonus\n    if (isCorner(position)) {\n      score += 50;\n    }\n\n    // Avoid X-squares early\n    if (isXSquare(position)) {\n      score -= 25;\n    }\n\n    return score;\n  }\n\n  /**\n   * Game phase detection\n   */\n  static getGamePhase(board: Uint8Array): 'opening' | 'midgame' | 'endgame' {\n    let emptySquares = 0;\n\n    for (let i = 0; i < 64; i++) {\n      if (board[i] === PlayerColor.EMPTY) {\n        emptySquares++;\n      }\n    }\n\n    if (emptySquares > 40) return 'opening';\n    if (emptySquares > 16) return 'midgame';\n    return 'endgame';\n  }\n}\n\n/**\n * Export convenience functions\n */\nexport const evaluatePosition = AdvancedEvaluator.evaluatePosition;\nexport const quickEvaluate = AdvancedEvaluator.quickEvaluate;\nexport const getGamePhase = AdvancedEvaluator.getGamePhase;","/**\n * Game State Simulator\n *\n * Provides efficient game state simulation for AI search algorithms.\n * Creates new game states without modifying the original for minimax search.\n */\n\nimport { PlayerColor, BoardPosition, BOARD_SIZE, GameStatus } from '@/types/game-types';\nimport type { GameState } from '@/core/models/GameState';\nimport { getValidMoves } from '@/core/utils/move-validator';\n\n/**\n * Simulated game state for AI search\n */\nexport interface SimulatedGameState {\n  readonly board: Uint8Array;\n  readonly currentPlayer: PlayerColor;\n  readonly validMoves: Map<BoardPosition, readonly BoardPosition[]>;\n  readonly scores: {\n    readonly black: number;\n    readonly white: number;\n  };\n  readonly gameOver: boolean;\n  readonly consecutivePasses: number;\n}\n\n/**\n * Game state simulator for AI algorithms\n */\nexport class GameSimulator {\n  /**\n   * Convert a GameState to SimulatedGameState\n   */\n  static fromGameState(gameState: GameState): SimulatedGameState {\n    // Check if game is over based on game status\n    const gameOver = gameState.gameStatus === GameStatus.GAME_OVER ||\n                     (gameState as any).gameOver === true ||\n                     gameState.validMoves.size === 0;\n\n    return {\n      board: new Uint8Array(gameState.board),\n      currentPlayer: gameState.currentPlayer,\n      validMoves: new Map(gameState.validMoves),\n      scores: { ...gameState.scores },\n      gameOver,\n      consecutivePasses: (gameState as any).consecutivePasses || 0,\n    };\n  }\n\n  /**\n   * Make a move and return new simulated game state\n   */\n  static makeMove(\n    state: SimulatedGameState,\n    position: BoardPosition,\n  ): SimulatedGameState | null {\n    // Validate move\n    const flippedPositions = state.validMoves.get(position);\n    if (!flippedPositions) {\n      return null;\n    }\n\n    // Create new board\n    const newBoard = new Uint8Array(state.board);\n\n    // Place the piece\n    newBoard[position] = state.currentPlayer;\n\n    // Flip pieces\n    for (const flippedPos of flippedPositions) {\n      newBoard[flippedPos] = state.currentPlayer;\n    }\n\n    // Switch player\n    const nextPlayer = state.currentPlayer === PlayerColor.BLACK\n      ? PlayerColor.WHITE\n      : PlayerColor.BLACK;\n\n    // Calculate new scores\n    const newScores = this.calculateScores(newBoard);\n\n    // Find valid moves for next player\n    const nextValidMoves = getValidMoves(newBoard, nextPlayer);\n\n    // Check for consecutive passes\n    let newConsecutivePasses = 0;\n    let gameOver = false;\n\n    if (nextValidMoves.size === 0) {\n      // Next player has no moves, switch back\n      const afterPassPlayer = nextPlayer === PlayerColor.BLACK\n        ? PlayerColor.WHITE\n        : PlayerColor.BLACK;\n\n      const afterPassMoves = getValidMoves(newBoard, afterPassPlayer);\n\n      if (afterPassMoves.size === 0) {\n        // Game over - both players have no moves\n        gameOver = true;\n        newConsecutivePasses = 2;\n      } else {\n        // Switch back to original player\n        newConsecutivePasses = 1;\n        return {\n          board: newBoard,\n          currentPlayer: afterPassPlayer,\n          validMoves: afterPassMoves,\n          scores: newScores,\n          gameOver: false,\n          consecutivePasses: newConsecutivePasses,\n        };\n      }\n    }\n\n    return {\n      board: newBoard,\n      currentPlayer: nextPlayer,\n      validMoves: nextValidMoves,\n      scores: newScores,\n      gameOver,\n      consecutivePasses: newConsecutivePasses,\n    };\n  }\n\n  /**\n   * Make a pass (skip turn) and return new game state\n   */\n  static makePass(state: SimulatedGameState): SimulatedGameState {\n    const nextPlayer = state.currentPlayer === PlayerColor.BLACK\n      ? PlayerColor.WHITE\n      : PlayerColor.BLACK;\n\n    const nextValidMoves = getValidMoves(state.board, nextPlayer);\n    const newConsecutivePasses = state.consecutivePasses + 1;\n\n    return {\n      board: state.board, // Board unchanged\n      currentPlayer: nextPlayer,\n      validMoves: nextValidMoves,\n      scores: state.scores, // Scores unchanged\n      gameOver: newConsecutivePasses >= 2 || nextValidMoves.size === 0,\n      consecutivePasses: newConsecutivePasses,\n    };\n  }\n\n  /**\n   * Calculate scores from board state\n   */\n  private static calculateScores(board: Uint8Array): { black: number; white: number } {\n    let black = 0;\n    let white = 0;\n\n    for (let i = 0; i < board.length; i++) {\n      if (board[i] === PlayerColor.BLACK) {\n        black++;\n      } else if (board[i] === PlayerColor.WHITE) {\n        white++;\n      }\n    }\n\n    return { black, white };\n  }\n\n  /**\n   * Get all possible moves with their resulting states\n   */\n  static getAllPossibleMoves(\n    state: SimulatedGameState,\n  ): Array<{ move: BoardPosition; newState: SimulatedGameState }> {\n    const moves: Array<{ move: BoardPosition; newState: SimulatedGameState }> = [];\n\n    for (const move of state.validMoves.keys()) {\n      const newState = this.makeMove(state, move);\n      if (newState) {\n        moves.push({ move, newState });\n      }\n    }\n\n    return moves;\n  }\n\n  /**\n   * Check if game is in endgame phase\n   */\n  static isEndgame(state: SimulatedGameState): boolean {\n    let emptySquares = 0;\n    for (let i = 0; i < state.board.length; i++) {\n      if (state.board[i] === PlayerColor.EMPTY) {\n        emptySquares++;\n      }\n    }\n    return emptySquares <= 16;\n  }\n\n  /**\n   * Check if game is in opening phase\n   */\n  static isOpening(state: SimulatedGameState): boolean {\n    let occupiedSquares = 0;\n    for (let i = 0; i < state.board.length; i++) {\n      if (state.board[i] !== PlayerColor.EMPTY) {\n        occupiedSquares++;\n      }\n    }\n    return occupiedSquares <= 12; // First 8 moves after initial setup\n  }\n\n  /**\n   * Get game phase as a ratio (0 = start, 1 = end)\n   */\n  static getGamePhaseRatio(state: SimulatedGameState): number {\n    let occupiedSquares = 0;\n    for (let i = 0; i < state.board.length; i++) {\n      if (state.board[i] !== PlayerColor.EMPTY) {\n        occupiedSquares++;\n      }\n    }\n    return Math.min(1.0, (occupiedSquares - 4) / 60); // Start counting after initial 4 pieces\n  }\n\n  /**\n   * Generate a hash key for the game state (for transposition tables)\n   */\n  static getStateHash(state: SimulatedGameState): string {\n    // Create a hash based on board state and current player\n    const boardHash = Array.from(state.board).join('');\n    return `${boardHash}_${state.currentPlayer}_${state.consecutivePasses}`;\n  }\n\n  /**\n   * Check if two states are equivalent\n   */\n  static statesEqual(state1: SimulatedGameState, state2: SimulatedGameState): boolean {\n    if (state1.currentPlayer !== state2.currentPlayer) return false;\n    if (state1.consecutivePasses !== state2.consecutivePasses) return false;\n\n    for (let i = 0; i < state1.board.length; i++) {\n      if (state1.board[i] !== state2.board[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Copy a simulated game state\n   */\n  static copyState(state: SimulatedGameState): SimulatedGameState {\n    return {\n      board: new Uint8Array(state.board),\n      currentPlayer: state.currentPlayer,\n      validMoves: new Map(state.validMoves),\n      scores: { ...state.scores },\n      gameOver: state.gameOver,\n      consecutivePasses: state.consecutivePasses,\n    };\n  }\n\n  /**\n   * Get detailed state information for debugging\n   */\n  static getStateInfo(state: SimulatedGameState): {\n    pieceCount: { black: number; white: number; empty: number };\n    gamePhase: 'opening' | 'midgame' | 'endgame';\n    mobilityCount: number;\n  } {\n    let black = 0, white = 0, empty = 0;\n\n    for (let i = 0; i < state.board.length; i++) {\n      switch (state.board[i]) {\n        case PlayerColor.BLACK: black++; break;\n        case PlayerColor.WHITE: white++; break;\n        case PlayerColor.EMPTY: empty++; break;\n      }\n    }\n\n    let gamePhase: 'opening' | 'midgame' | 'endgame';\n    if (empty > 40) gamePhase = 'opening';\n    else if (empty > 16) gamePhase = 'midgame';\n    else gamePhase = 'endgame';\n\n    return {\n      pieceCount: { black, white, empty },\n      gamePhase,\n      mobilityCount: state.validMoves.size,\n    };\n  }\n\n  /**\n   * Validate that a simulated state is consistent\n   */\n  static validateState(state: SimulatedGameState): boolean {\n    try {\n      // Check board size\n      if (state.board.length !== 64) return false;\n\n      // Check player colors are valid\n      if (state.currentPlayer !== PlayerColor.BLACK &&\n          state.currentPlayer !== PlayerColor.WHITE) return false;\n\n      // Check scores match board\n      const calculatedScores = this.calculateScores(state.board);\n      if (calculatedScores.black !== state.scores.black ||\n          calculatedScores.white !== state.scores.white) return false;\n\n      // Check valid moves are actually valid\n      for (const [position, flips] of state.validMoves.entries()) {\n        if (position < 0 || position >= 64) return false;\n        if (state.board[position] !== PlayerColor.EMPTY) return false;\n        // Additional validation could check if flips are correct\n      }\n\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n}\n\n/**\n * Export convenience functions\n */\nexport const fromGameState = GameSimulator.fromGameState;\nexport const makeMove = GameSimulator.makeMove;\nexport const makePass = GameSimulator.makePass;\nexport const getAllPossibleMoves = GameSimulator.getAllPossibleMoves;","/**\n * Minimax AI Strategy with Alpha-Beta Pruning\n *\n * Advanced AI implementation using minimax algorithm with:\n * - Alpha-beta pruning for performance optimization\n * - Iterative deepening for time management\n * - Move ordering for better pruning\n * - Transposition table for cached results\n * - Configurable search depth and time limits\n */\n\nimport { AIDifficulty, PlayerColor, BoardPosition } from '@/types/game-types';\nimport type { GameState } from '@/core/models/GameState';\nimport { AIStrategyBase, type AIMoveResult, AIUtils } from '../ai-strategy-base';\nimport { evaluateAllMoves } from '@/core/utils/move-evaluator';\nimport { AdvancedEvaluator, quickEvaluate } from './evaluation';\nimport { GameSimulator, type SimulatedGameState } from '../game-simulator';\n\n/**\n * Minimax AI configuration\n */\nexport interface MinimaxConfig {\n  maxDepth: number;\n  maxTime: number;\n  useIterativeDeepening: boolean;\n  useTranspositionTable: boolean;\n  useMoveOrdering: boolean;\n  aspirationWindow?: number;\n}\n\n/**\n * Transposition table entry\n */\ninterface TranspositionEntry {\n  depth: number;\n  score: number;\n  flag: 'exact' | 'lower' | 'upper';\n  bestMove?: BoardPosition;\n  timestamp: number;\n}\n\n/**\n * Search result from minimax\n */\ninterface SearchResult {\n  score: number;\n  bestMove: BoardPosition;\n  depth: number;\n  nodesEvaluated: number;\n  timeElapsed: number;\n  terminated: boolean;\n}\n\n/**\n * Minimax AI Strategy Implementation\n */\nexport class MinimaxAI extends AIStrategyBase {\n  public readonly difficulty = AIDifficulty.MINIMAX;\n  public readonly name = 'Minimax AI';\n  public readonly description = 'Advanced AI using minimax with alpha-beta pruning';\n\n  private _config: MinimaxConfig;\n  private _transpositionTable = new Map<string, TranspositionEntry>();\n  private _killerMoves: BoardPosition[][] = [];\n  private _historyTable = new Map<string, number>();\n  private _nodesEvaluated = 0;\n  private _startTime = 0;\n\n  constructor(config: Partial<MinimaxConfig> = {}) {\n    super();\n    this._config = {\n      maxDepth: 6,\n      maxTime: 3000,\n      useIterativeDeepening: true,\n      useTranspositionTable: true,\n      useMoveOrdering: true,\n      aspirationWindow: 50,\n      ...config,\n    };\n\n    // Initialize killer moves table\n    for (let depth = 0; depth <= this._config.maxDepth; depth++) {\n      this._killerMoves[depth] = [];\n    }\n  }\n\n  protected async selectMoveImpl(\n    gameState: GameState,\n    player: PlayerColor,\n    timeLimit: number,\n  ): Promise<AIMoveResult> {\n    this._startTime = Date.now();\n    this._nodesEvaluated = 0;\n    const effectiveTimeLimit = Math.min(timeLimit, this._config.maxTime);\n\n    const validMoves = Array.from(gameState.validMoves.keys());\n\n    if (validMoves.length === 0) {\n      throw new Error('No valid moves available');\n    }\n\n    if (validMoves.length === 1) {\n      // Only one move available\n      return {\n        position: validMoves[0]!,\n        confidence: 1.0,\n        evaluation: 0,\n        thinkingTime: Date.now() - this._startTime,\n        depth: 0,\n        nodesEvaluated: 1,\n      };\n    }\n\n    let searchResult: SearchResult;\n\n    if (this._config.useIterativeDeepening) {\n      searchResult = await this.iterativeDeepening(gameState, player, effectiveTimeLimit);\n    } else {\n      searchResult = await this.search(gameState, player, this._config.maxDepth, effectiveTimeLimit);\n    }\n\n    const confidence = this.calculateConfidence(searchResult, validMoves.length);\n\n    return {\n      position: searchResult.bestMove,\n      confidence,\n      evaluation: searchResult.score,\n      thinkingTime: searchResult.timeElapsed,\n      depth: searchResult.depth,\n      nodesEvaluated: searchResult.nodesEvaluated,\n    };\n  }\n\n  /**\n   * Iterative deepening search\n   */\n  private async iterativeDeepening(\n    gameState: GameState,\n    player: PlayerColor,\n    timeLimit: number,\n  ): Promise<SearchResult> {\n    let bestResult: SearchResult = {\n      score: -Infinity,\n      bestMove: Array.from(gameState.validMoves.keys())[0]!,\n      depth: 1,\n      nodesEvaluated: 0,\n      timeElapsed: 0,\n      terminated: false,\n    };\n\n    let lastScore = 0;\n    let aspirationAlpha = -Infinity;\n    let aspirationBeta = Infinity;\n\n    for (let depth = 1; depth <= this._config.maxDepth; depth++) {\n      const depthStartTime = Date.now();\n\n      // Check time limit\n      if (Date.now() - this._startTime >= timeLimit * 0.9) {\n        break;\n      }\n\n      // Set aspiration window if available and enabled\n      if (this._config.aspirationWindow && depth > 2) {\n        aspirationAlpha = lastScore - this._config.aspirationWindow;\n        aspirationBeta = lastScore + this._config.aspirationWindow;\n      }\n\n      try {\n        const result = await this.minimaxSearch(\n          gameState,\n          depth,\n          aspirationAlpha,\n          aspirationBeta,\n          true,\n          player,\n          timeLimit,\n        );\n\n        // If search completed successfully, update best result\n        if (result.score > -Infinity) {\n          bestResult = {\n            score: result.score,\n            bestMove: result.bestMove!,\n            depth,\n            nodesEvaluated: this._nodesEvaluated,\n            timeElapsed: Date.now() - this._startTime,\n            terminated: false,\n          };\n          lastScore = result.score;\n        }\n\n        // Research with wider window if aspiration search failed\n        if (this._config.aspirationWindow &&\n            (result.score <= aspirationAlpha || result.score >= aspirationBeta)) {\n          const widerResult = await this.minimaxSearch(\n            gameState,\n            depth,\n            -Infinity,\n            Infinity,\n            true,\n            player,\n            timeLimit,\n          );\n\n          if (widerResult.score > -Infinity) {\n            bestResult = {\n              score: widerResult.score,\n              bestMove: widerResult.bestMove!,\n              depth,\n              nodesEvaluated: this._nodesEvaluated,\n              timeElapsed: Date.now() - this._startTime,\n              terminated: false,\n            };\n          }\n        }\n\n      } catch (error) {\n        // Time limit reached, return best result so far\n        break;\n      }\n\n      // Early termination for quick wins/losses\n      if (Math.abs(bestResult.score) > 1000) {\n        break;\n      }\n    }\n\n    return bestResult;\n  }\n\n  /**\n   * Single depth search\n   */\n  private async search(\n    gameState: GameState,\n    player: PlayerColor,\n    depth: number,\n    timeLimit: number,\n  ): Promise<SearchResult> {\n    const result = await this.minimaxSearch(\n      gameState,\n      depth,\n      -Infinity,\n      Infinity,\n      true,\n      player,\n      timeLimit,\n    );\n\n    return {\n      score: result.score,\n      bestMove: result.bestMove!,\n      depth,\n      nodesEvaluated: this._nodesEvaluated,\n      timeElapsed: Date.now() - this._startTime,\n      terminated: result.score === -Infinity,\n    };\n  }\n\n  /**\n   * Minimax search with alpha-beta pruning\n   */\n  private async minimaxSearch(\n    gameState: GameState | SimulatedGameState,\n    depth: number,\n    alpha: number,\n    beta: number,\n    isMaximizing: boolean,\n    originalPlayer: PlayerColor,\n    timeLimit: number,\n  ): Promise<{ score: number; bestMove?: BoardPosition }> {\n    this._nodesEvaluated++;\n\n    // Check time limit\n    if (Date.now() - this._startTime >= timeLimit) {\n      return { score: -Infinity };\n    }\n\n    // Check transposition table\n    if (this._config.useTranspositionTable) {\n      const ttEntry = this.lookupTransposition(gameState, depth);\n      if (ttEntry) {\n        if (ttEntry.flag === 'exact') {\n          return { score: ttEntry.score, bestMove: ttEntry.bestMove };\n        } else if (ttEntry.flag === 'lower' && ttEntry.score >= beta) {\n          return { score: ttEntry.score, bestMove: ttEntry.bestMove };\n        } else if (ttEntry.flag === 'upper' && ttEntry.score <= alpha) {\n          return { score: ttEntry.score, bestMove: ttEntry.bestMove };\n        }\n      }\n    }\n\n    // Terminal node evaluation\n    if (depth === 0 || gameState.validMoves.size === 0) {\n      // Convert to simulated state if needed for evaluation\n      const simState = 'board' in gameState && 'scores' in gameState && 'currentPlayer' in gameState\n        ? gameState as SimulatedGameState\n        : GameSimulator.fromGameState(gameState as GameState);\n\n      // Create a GameState-like object for the evaluator\n      const evalState = {\n        board: simState.board,\n        currentPlayer: simState.currentPlayer,\n        validMoves: simState.validMoves,\n        scores: simState.scores,\n        gameOver: simState.gameOver,\n      } as unknown as GameState;\n\n      const evaluation = AdvancedEvaluator.evaluatePosition(evalState, originalPlayer);\n      return { score: evaluation.totalScore };\n    }\n\n    // Get and order moves\n    const moves = this.getOrderedMoves(gameState, depth, originalPlayer);\n    let bestMove: BoardPosition | undefined;\n    let bestScore = isMaximizing ? -Infinity : Infinity;\n\n    for (const move of moves) {\n      // Make the move\n      const newGameState = this.makeMove(gameState, move);\n\n      if (!newGameState) continue;\n\n      // Recursive search\n      const result = await this.minimaxSearch(\n        newGameState,\n        depth - 1,\n        alpha,\n        beta,\n        !isMaximizing,\n        originalPlayer,\n        timeLimit,\n      );\n\n      // Update best score and move\n      if (isMaximizing) {\n        if (result.score > bestScore) {\n          bestScore = result.score;\n          bestMove = move;\n        }\n        alpha = Math.max(alpha, bestScore);\n      } else {\n        if (result.score < bestScore) {\n          bestScore = result.score;\n          bestMove = move;\n        }\n        beta = Math.min(beta, bestScore);\n      }\n\n      // Alpha-beta pruning\n      if (beta <= alpha) {\n        // Update killer moves\n        this.updateKillerMoves(move, depth);\n        break;\n      }\n    }\n\n    // Store in transposition table\n    if (this._config.useTranspositionTable) {\n      this.storeTransposition(gameState, depth, bestScore, bestMove, alpha, beta);\n    }\n\n    return { score: bestScore, bestMove };\n  }\n\n  /**\n   * Get ordered moves for better alpha-beta pruning\n   */\n  private getOrderedMoves(\n    gameState: GameState | SimulatedGameState,\n    depth: number,\n    player: PlayerColor,\n  ): BoardPosition[] {\n    const validMoves = Array.from(gameState.validMoves.keys());\n\n    if (!this._config.useMoveOrdering) {\n      return validMoves;\n    }\n\n    // Evaluate moves for ordering\n    const evaluatedMoves = validMoves.map(move => {\n      const flippedPositions = gameState.validMoves.get(move) || [];\n      const score = quickEvaluate(gameState.board as Uint8Array, move, player, [...flippedPositions]);\n\n      // Bonus for killer moves\n      let bonus = 0;\n      if (this._killerMoves[depth] && this._killerMoves[depth].includes(move)) {\n        bonus += 1000;\n      }\n\n      // History table bonus\n      const historyKey = `${move}_${player}`;\n      const historyScore = this._historyTable.get(historyKey) || 0;\n      bonus += historyScore;\n\n      return { move, score: score + bonus };\n    });\n\n    // Sort by score descending (best moves first)\n    evaluatedMoves.sort((a, b) => b.score - a.score);\n\n    return evaluatedMoves.map(item => item.move);\n  }\n\n  /**\n   * Make a move and return new game state\n   */\n  private makeMove(gameState: GameState | SimulatedGameState, move: BoardPosition): SimulatedGameState | null {\n    const simState = 'board' in gameState && 'validMoves' in gameState && 'currentPlayer' in gameState\n      ? gameState as SimulatedGameState\n      : GameSimulator.fromGameState(gameState as GameState);\n\n    return GameSimulator.makeMove(simState, move);\n  }\n\n  /**\n   * Update killer moves heuristic\n   */\n  private updateKillerMoves(move: BoardPosition, depth: number): void {\n    if (!this._killerMoves[depth]) {\n      this._killerMoves[depth] = [];\n    }\n\n    const killers = this._killerMoves[depth];\n    if (!killers.includes(move)) {\n      killers.unshift(move);\n      // Keep only top 2 killer moves per depth\n      if (killers.length > 2) {\n        killers.pop();\n      }\n    }\n  }\n\n  /**\n   * Lookup transposition table\n   */\n  private lookupTransposition(gameState: GameState | SimulatedGameState, depth: number): TranspositionEntry | null {\n    const key = this.getTranspositionKey(gameState);\n    const entry = this._transpositionTable.get(key);\n\n    if (entry && entry.depth >= depth) {\n      return entry;\n    }\n\n    return null;\n  }\n\n  /**\n   * Store result in transposition table\n   */\n  private storeTransposition(\n    gameState: GameState | SimulatedGameState,\n    depth: number,\n    score: number,\n    bestMove: BoardPosition | undefined,\n    alpha: number,\n    beta: number,\n  ): void {\n    const key = this.getTranspositionKey(gameState);\n\n    let flag: 'exact' | 'lower' | 'upper';\n    if (score <= alpha) {\n      flag = 'upper';\n    } else if (score >= beta) {\n      flag = 'lower';\n    } else {\n      flag = 'exact';\n    }\n\n    this._transpositionTable.set(key, {\n      depth,\n      score,\n      flag,\n      bestMove,\n      timestamp: Date.now(),\n    });\n\n    // Limit table size\n    if (this._transpositionTable.size > 100000) {\n      this.cleanupTranspositionTable();\n    }\n  }\n\n  /**\n   * Generate transposition table key\n   */\n  private getTranspositionKey(gameState: GameState | SimulatedGameState): string {\n    // Simple hash based on board state and current player\n    return `${Array.from(gameState.board).join('')}_${gameState.currentPlayer}`;\n  }\n\n  /**\n   * Cleanup old transposition table entries\n   */\n  private cleanupTranspositionTable(): void {\n    const now = Date.now();\n    const cutoff = now - 300000; // 5 minutes\n\n    for (const [key, entry] of this._transpositionTable.entries()) {\n      if (entry.timestamp < cutoff) {\n        this._transpositionTable.delete(key);\n      }\n    }\n  }\n\n  /**\n   * Calculate confidence based on search result\n   */\n  private calculateConfidence(result: SearchResult, moveCount: number): number {\n    let confidence = 0.7; // Base confidence\n\n    // Higher confidence for deeper searches\n    confidence += Math.min(result.depth / 10, 0.2);\n\n    // Lower confidence if search was terminated early\n    if (result.terminated) {\n      confidence -= 0.3;\n    }\n\n    // Higher confidence for clear wins/losses\n    if (Math.abs(result.score) > 500) {\n      confidence += 0.2;\n    }\n\n    // Lower confidence with many moves available\n    if (moveCount > 8) {\n      confidence -= 0.1;\n    }\n\n    return Math.max(0.1, Math.min(0.95, confidence));\n  }\n\n  /**\n   * Get configuration\n   */\n  getConfig(): MinimaxConfig {\n    return { ...this._config };\n  }\n\n  /**\n   * Update configuration\n   */\n  setConfig(config: Partial<MinimaxConfig>): void {\n    this._config = { ...this._config, ...config };\n  }\n\n  /**\n   * Clear caches\n   */\n  clearCaches(): void {\n    this._transpositionTable.clear();\n    this._historyTable.clear();\n    for (let depth = 0; depth <= this._config.maxDepth; depth++) {\n      this._killerMoves[depth] = [];\n    }\n  }\n}\n\n/**\n * Factory functions for creating minimax AI variants\n */\nexport const createMinimaxAI = {\n  /**\n   * Basic minimax with moderate depth\n   */\n  basic(): MinimaxAI {\n    return new MinimaxAI({\n      maxDepth: 4,\n      maxTime: 2000,\n      useIterativeDeepening: true,\n    });\n  },\n\n  /**\n   * Intermediate minimax with more depth\n   */\n  intermediate(): MinimaxAI {\n    return new MinimaxAI({\n      maxDepth: 6,\n      maxTime: 3000,\n      useIterativeDeepening: true,\n      useTranspositionTable: true,\n    });\n  },\n\n  /**\n   * Advanced minimax with full features\n   */\n  advanced(): MinimaxAI {\n    return new MinimaxAI({\n      maxDepth: 8,\n      maxTime: 5000,\n      useIterativeDeepening: true,\n      useTranspositionTable: true,\n      useMoveOrdering: true,\n      aspirationWindow: 50,\n    });\n  },\n\n  /**\n   * Custom minimax configuration\n   */\n  custom(config: Partial<MinimaxConfig>): MinimaxAI {\n    return new MinimaxAI(config);\n  },\n};","/**\n * Opening Book System\n *\n * Stores and retrieves optimal opening moves for Reversi/Othello.\n * Contains theory-based opening sequences and proven lines.\n */\n\nimport { BoardPosition, PlayerColor } from '@/types/game-types';\nimport type { GameState } from '@/core/models/GameState';\n\n/**\n * Opening book entry\n */\nexport interface OpeningEntry {\n  readonly position: BoardPosition;\n  readonly score: number;        // Theoretical evaluation\n  readonly frequency: number;    // How often this move is played\n  readonly winRate: number;      // Success rate (0-1)\n  readonly depth: number;        // How deep into the opening this is\n  readonly comment?: string;     // Human-readable description\n  readonly variations?: OpeningEntry[]; // Follow-up moves\n}\n\n/**\n * Opening book key (board position hash)\n */\ntype OpeningKey = string;\n\n/**\n * Named opening sequence\n */\nexport interface OpeningSequence {\n  readonly name: string;\n  readonly description: string;\n  readonly moves: BoardPosition[];\n  readonly evaluation: number;\n  readonly isMainLine: boolean;\n}\n\n/**\n * Opening Book Database\n */\nexport class OpeningBook {\n  private readonly _entries = new Map<OpeningKey, OpeningEntry[]>();\n  private readonly _sequences: OpeningSequence[] = [];\n  private readonly _maxDepth: number;\n\n  constructor(maxDepth = 12) {\n    this._maxDepth = maxDepth;\n    this.initializeOpeningDatabase();\n  }\n\n  /**\n   * Get the best move from opening book\n   */\n  getOpeningMove(gameState: GameState): BoardPosition | null {\n    const key = this.generateKey(gameState);\n    const entries = this._entries.get(key);\n\n    if (!entries || entries.length === 0) {\n      return null;\n    }\n\n    // Filter valid moves\n    const validEntries = entries.filter(entry =>\n      gameState.validMoves.has(entry.position)\n    );\n\n    if (validEntries.length === 0) {\n      return null;\n    }\n\n    // Select best move based on score and win rate\n    const bestEntry = validEntries.reduce((best, current) => {\n      const bestValue = best.score * 0.7 + best.winRate * 0.3;\n      const currentValue = current.score * 0.7 + current.winRate * 0.3;\n      return currentValue > bestValue ? current : best;\n    });\n\n    return bestEntry.position;\n  }\n\n  /**\n   * Get all opening moves with scores\n   */\n  getOpeningMoves(gameState: GameState): OpeningEntry[] {\n    const key = this.generateKey(gameState);\n    const entries = this._entries.get(key) || [];\n\n    return entries.filter(entry =>\n      gameState.validMoves.has(entry.position)\n    );\n  }\n\n  /**\n   * Check if position is in opening book\n   */\n  hasOpeningMove(gameState: GameState): boolean {\n    const key = this.generateKey(gameState);\n    const entries = this._entries.get(key);\n    return entries ? entries.some(entry => gameState.validMoves.has(entry.position)) : false;\n  }\n\n  /**\n   * Get opening depth (how many moves into theory we are)\n   */\n  getOpeningDepth(gameState: GameState): number {\n    let depth = 0;\n    const totalPieces = gameState.scores.black + gameState.scores.white;\n    const moveCount = totalPieces - 4; // Subtract initial 4 pieces\n\n    return Math.min(moveCount, this._maxDepth);\n  }\n\n  /**\n   * Get opening sequence by name\n   */\n  getSequence(name: string): OpeningSequence | null {\n    return this._sequences.find(seq => seq.name === name) || null;\n  }\n\n  /**\n   * Get all available sequences\n   */\n  getAllSequences(): OpeningSequence[] {\n    return [...this._sequences];\n  }\n\n  /**\n   * Initialize the opening database with known theory\n   */\n  private initializeOpeningDatabase(): void {\n    // Standard starting position: Black plays first after initial setup\n    // Initial board: center 4 squares occupied, Black to move\n\n    // Move 1: Black's first move options\n    this.addOpening('eeeeeeeeeeeeeeeeeeeeeeeeeeee12212100eeeeeeeeeeeeeeeeeeeeeeeeeeee', [\n      { pos: 19, score: 0, freq: 0.3, win: 0.52, comment: 'Tiger' },      // d3\n      { pos: 26, score: 0, freq: 0.25, win: 0.51, comment: 'Rabbit' },    // c4\n      { pos: 37, score: 0, freq: 0.25, win: 0.51, comment: 'Cat' },       // f5\n      { pos: 44, score: 0, freq: 0.2, win: 0.50, comment: 'Ox' },         // e6\n    ]);\n\n    // Tiger opening (d3): Most aggressive\n    this.addOpening('eeeeeeeeeeeeeeeeeeee1eeeeee12111100eeeeeeeeeeeeeeeeeeeeeeeeeeee', [\n      { pos: 18, score: 2, freq: 0.4, win: 0.53, comment: 'Tiger main line' }, // c3\n      { pos: 20, score: 0, freq: 0.3, win: 0.52, comment: 'Tiger solid' },     // e3\n      { pos: 11, score: -1, freq: 0.2, win: 0.49, comment: 'Tiger passive' },  // d2\n      { pos: 34, score: 1, freq: 0.1, win: 0.51, comment: 'Tiger counter' },   // c5\n    ]);\n\n    // Rabbit opening (c4): Balanced\n    this.addOpening('eeeeeeeeeeeeeeeeeeeeeeeeeeee11112100eeeeeeeeeeeeeeeeeeeeeeeeeeee', [\n      { pos: 18, score: 1, freq: 0.35, win: 0.52, comment: 'Rabbit main' },    // c3\n      { pos: 19, score: 1, freq: 0.35, win: 0.52, comment: 'Rabbit parallel' }, // d3\n      { pos: 25, score: 0, freq: 0.2, win: 0.50, comment: 'Rabbit edge' },     // b4\n      { pos: 33, score: -1, freq: 0.1, win: 0.48, comment: 'Rabbit weak' },    // b5\n    ]);\n\n    // Cat opening (f5): Solid\n    this.addOpening('eeeeeeeeeeeeeeeeeeeeeeeeeeee12211100eeeee1eeeeeeeeeeeeeeeeeeeeee', [\n      { pos: 45, score: 2, freq: 0.4, win: 0.54, comment: 'Cat main line' },   // f6\n      { pos: 43, score: 1, freq: 0.3, win: 0.52, comment: 'Cat solid' },       // d6\n      { pos: 29, score: 0, freq: 0.2, win: 0.50, comment: 'Cat transpose' },   // f4\n      { pos: 52, score: -1, freq: 0.1, win: 0.48, comment: 'Cat edge' },       // e7\n    ]);\n\n    // Ox opening (e6): Defensive\n    this.addOpening('eeeeeeeeeeeeeeeeeeeeeeeeeeee12211100eeeeeeeeeeee1eeeeeeeeeeeeeee', [\n      { pos: 43, score: 1, freq: 0.4, win: 0.52, comment: 'Ox main' },         // d6\n      { pos: 45, score: 1, freq: 0.3, win: 0.52, comment: 'Ox symmetric' },    // f6\n      { pos: 37, score: 0, freq: 0.2, win: 0.50, comment: 'Ox transpose' },    // f5\n      { pos: 52, score: -1, freq: 0.1, win: 0.48, comment: 'Ox passive' },     // e7\n    ]);\n\n    // Add deeper sequences for main lines\n    this.addDeepSequences();\n\n    // Add named sequences\n    this.addNamedSequences();\n  }\n\n  /**\n   * Add deeper opening sequences (6-12 moves)\n   */\n  private addDeepSequences(): void {\n    // Tiger main line continuation\n    this.addOpening('eeeeeeeeeeeeeeeeee11eeeeeee11111100eeeeeeeeeeeeeeeeeeeeeeeeeeee', [\n      { pos: 10, score: 3, freq: 0.5, win: 0.55, comment: 'Tiger sharp' },     // c2\n      { pos: 12, score: 2, freq: 0.3, win: 0.53, comment: 'Tiger solid' },     // e2\n      { pos: 25, score: 1, freq: 0.2, win: 0.51, comment: 'Tiger positional' }, // b4\n    ]);\n\n    // Advanced middle game transitions\n    this.addOpening('eeeeeeee11eeeeeeee11eeeeeee11111100eeeeeeeeeeeeeeeeeeeeeeeeeeee', [\n      { pos: 9, score: 2, freq: 0.4, win: 0.54, comment: 'Advanced tiger' },   // b2\n      { pos: 17, score: 2, freq: 0.3, win: 0.53, comment: 'Edge control' },    // b3\n      { pos: 24, score: 1, freq: 0.3, win: 0.52, comment: 'Center play' },     // a4\n    ]);\n  }\n\n  /**\n   * Add named opening sequences\n   */\n  private addNamedSequences(): void {\n    this._sequences.push(\n      {\n        name: 'Tiger Opening',\n        description: 'Aggressive opening focusing on quick development',\n        moves: [19, 18, 10], // d3, c3, c2\n        evaluation: 2,\n        isMainLine: true,\n      },\n      {\n        name: 'Rabbit Opening',\n        description: 'Balanced opening with flexible development',\n        moves: [26, 18, 19], // c4, c3, d3\n        evaluation: 1,\n        isMainLine: true,\n      },\n      {\n        name: 'Cat Defense',\n        description: 'Solid defensive setup',\n        moves: [37, 45, 43], // f5, f6, d6\n        evaluation: 1,\n        isMainLine: true,\n      },\n      {\n        name: 'Ox System',\n        description: 'Conservative approach with emphasis on stability',\n        moves: [44, 43, 45], // e6, d6, f6\n        evaluation: 0,\n        isMainLine: true,\n      },\n      {\n        name: 'Buffalo Opening',\n        description: 'Hypermodern approach delaying central confrontation',\n        moves: [19, 20, 12], // d3, e3, e2\n        evaluation: 1,\n        isMainLine: false,\n      },\n      {\n        name: 'Snake Variation',\n        description: 'Provocative opening leading to complex positions',\n        moves: [26, 25, 33], // c4, b4, b5\n        evaluation: 0,\n        isMainLine: false,\n      }\n    );\n  }\n\n  /**\n   * Helper method to add opening positions\n   */\n  private addOpening(\n    boardString: string,\n    moves: Array<{ pos: number; score: number; freq: number; win: number; comment?: string }>\n  ): void {\n    const entries: OpeningEntry[] = moves.map(move => ({\n      position: move.pos,\n      score: move.score,\n      frequency: move.freq,\n      winRate: move.win,\n      depth: this.calculateDepth(boardString),\n      comment: move.comment,\n    }));\n\n    this._entries.set(boardString, entries);\n  }\n\n  /**\n   * Generate position key from game state\n   */\n  private generateKey(gameState: GameState): string {\n    // Convert board to string representation\n    // 'e' = empty, '1' = black, '2' = white\n    return Array.from(gameState.board).map(cell => {\n      switch (cell) {\n        case PlayerColor.EMPTY: return 'e';\n        case PlayerColor.BLACK: return '1';\n        case PlayerColor.WHITE: return '2';\n        default: return 'e';\n      }\n    }).join('');\n  }\n\n  /**\n   * Calculate opening depth from board string\n   */\n  private calculateDepth(boardString: string): number {\n    const pieceCount = boardString.split('').filter(c => c !== 'e').length;\n    return Math.max(0, pieceCount - 4); // Subtract initial 4 pieces\n  }\n\n  /**\n   * Export opening statistics\n   */\n  getStatistics(): {\n    totalPositions: number;\n    maxDepth: number;\n    averageWinRate: number;\n    sequenceCount: number;\n  } {\n    const totalPositions = this._entries.size;\n    let totalWinRate = 0;\n    let entryCount = 0;\n\n    for (const entries of this._entries.values()) {\n      for (const entry of entries) {\n        totalWinRate += entry.winRate;\n        entryCount++;\n      }\n    }\n\n    return {\n      totalPositions,\n      maxDepth: this._maxDepth,\n      averageWinRate: entryCount > 0 ? totalWinRate / entryCount : 0,\n      sequenceCount: this._sequences.length,\n    };\n  }\n\n  /**\n   * Validate opening book integrity\n   */\n  validateBook(): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    // Check for duplicate entries\n    for (const [key, entries] of this._entries.entries()) {\n      const positions = new Set<BoardPosition>();\n      for (const entry of entries) {\n        if (positions.has(entry.position)) {\n          errors.push(`Duplicate position ${entry.position} in key ${key}`);\n        }\n        positions.add(entry.position);\n\n        // Validate entry values\n        if (entry.frequency < 0 || entry.frequency > 1) {\n          errors.push(`Invalid frequency for position ${entry.position}: ${entry.frequency}`);\n        }\n        if (entry.winRate < 0 || entry.winRate > 1) {\n          errors.push(`Invalid win rate for position ${entry.position}: ${entry.winRate}`);\n        }\n      }\n    }\n\n    // Validate sequences\n    for (const sequence of this._sequences) {\n      if (sequence.moves.length === 0) {\n        errors.push(`Empty sequence: ${sequence.name}`);\n      }\n      for (const move of sequence.moves) {\n        if (move < 0 || move >= 64) {\n          errors.push(`Invalid move ${move} in sequence ${sequence.name}`);\n        }\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n    };\n  }\n}\n\n/**\n * Default opening book instance\n */\nexport const defaultOpeningBook = new OpeningBook();\n\n/**\n * Factory functions for creating opening books\n */\nexport const createOpeningBook = {\n  /**\n   * Create standard opening book\n   */\n  standard(): OpeningBook {\n    return new OpeningBook(12);\n  },\n\n  /**\n   * Create extended opening book with deeper analysis\n   */\n  extended(): OpeningBook {\n    return new OpeningBook(16);\n  },\n\n  /**\n   * Create minimal opening book for faster lookup\n   */\n  minimal(): OpeningBook {\n    return new OpeningBook(8);\n  },\n};","/**\n * Endgame Solver\n *\n * Provides perfect play in endgame positions using:\n * - Exact minimax search when few squares remain\n * - Efficient move generation and evaluation\n * - Parity analysis for optimal timing\n * - Transposition tables for performance\n */\n\nimport { PlayerColor, BoardPosition } from '@/types/game-types';\nimport type { SimulatedGameState } from '../game-simulator';\nimport { GameSimulator } from '../game-simulator';\n\n/**\n * Endgame search result\n */\nexport interface EndgameResult {\n  readonly bestMove: BoardPosition;\n  readonly exactScore: number;      // Exact final score difference\n  readonly movesToEnd: number;      // Number of moves until game end\n  readonly isWin: boolean;          // True if position is winning\n  readonly nodesSearched: number;   // Performance metric\n  readonly timeElapsed: number;     // Time taken for calculation\n  readonly confidence: number;      // Always 1.0 for exact solutions\n}\n\n/**\n * Endgame solver configuration\n */\nexport interface EndgameSolverConfig {\n  maxEmptySquares: number;          // Solve when <= this many empty squares\n  useTranspositionTable: boolean;   // Cache results\n  useMoveOrdering: boolean;         // Order moves for better pruning\n  maxTimeMs: number;               // Maximum solving time\n  enableParity: boolean;           // Use parity analysis\n}\n\n/**\n * Endgame transposition table entry\n */\ninterface EndgameTransposition {\n  exactScore: number;\n  depth: number;\n  bestMove?: BoardPosition;\n  flag: 'exact' | 'lower' | 'upper';\n  timestamp: number;\n}\n\n/**\n * Endgame Solver Implementation\n */\nexport class EndgameSolver {\n  private readonly _config: EndgameSolverConfig;\n  private readonly _transpositionTable = new Map<string, EndgameTransposition>();\n  private _nodesSearched = 0;\n  private _startTime = 0;\n  private _timeLimit = 0;\n\n  constructor(config: Partial<EndgameSolverConfig> = {}) {\n    this._config = {\n      maxEmptySquares: 16,\n      useTranspositionTable: true,\n      useMoveOrdering: true,\n      maxTimeMs: 30000, // 30 seconds max\n      enableParity: true,\n      ...config,\n    };\n  }\n\n  /**\n   * Solve endgame position exactly\n   */\n  async solvePosition(\n    gameState: SimulatedGameState,\n    player: PlayerColor,\n    timeLimit?: number,\n  ): Promise<EndgameResult> {\n    this._startTime = Date.now();\n    this._timeLimit = timeLimit || this._config.maxTimeMs;\n    this._nodesSearched = 0;\n\n    // Verify this is an endgame position\n    const emptySquares = this.countEmptySquares(gameState.board);\n    if (emptySquares > this._config.maxEmptySquares) {\n      throw new Error(`Position has ${emptySquares} empty squares, exceeds maximum of ${this._config.maxEmptySquares}`);\n    }\n\n    const result = await this.exactSearch(gameState, player, emptySquares, -64, 64);\n\n    const timeElapsed = Date.now() - this._startTime;\n\n    if (!result.bestMove && result.bestMove !== 0) {\n      throw new Error('No valid move found in endgame position');\n    }\n\n    return {\n      bestMove: result.bestMove,\n      exactScore: result.score,\n      movesToEnd: emptySquares,\n      isWin: result.score > 0,\n      nodesSearched: this._nodesSearched,\n      timeElapsed,\n      confidence: 1.0, // Exact solution\n    };\n  }\n\n  /**\n   * Check if position qualifies for endgame solving\n   */\n  canSolve(gameState: SimulatedGameState): boolean {\n    const emptySquares = this.countEmptySquares(gameState.board);\n    return emptySquares <= this._config.maxEmptySquares;\n  }\n\n  /**\n   * Exact minimax search for endgame\n   */\n  private async exactSearch(\n    gameState: SimulatedGameState,\n    originalPlayer: PlayerColor,\n    depth: number,\n    alpha: number,\n    beta: number,\n  ): Promise<{ score: number; bestMove?: BoardPosition }> {\n    this._nodesSearched++;\n\n    // Check time limit\n    if (Date.now() - this._startTime >= this._timeLimit) {\n      throw new Error('Endgame solver timeout');\n    }\n\n    // Check transposition table\n    if (this._config.useTranspositionTable) {\n      const ttResult = this.lookupTransposition(gameState, depth);\n      if (ttResult) {\n        return { score: ttResult.exactScore, bestMove: ttResult.bestMove };\n      }\n    }\n\n    // Terminal position - calculate exact final score\n    if (gameState.gameOver || gameState.validMoves.size === 0) {\n      const finalScore = this.calculateFinalScore(gameState, originalPlayer);\n      return { score: finalScore };\n    }\n\n    // Get ordered moves\n    const moves = this.getOrderedMoves(gameState);\n    let bestMove: BoardPosition | undefined;\n    let bestScore = gameState.currentPlayer === originalPlayer ? -64 : 64;\n\n    for (const move of moves) {\n      const newState = GameSimulator.makeMove(gameState, move);\n      if (!newState) continue;\n\n      // Handle pass if no valid moves for next player\n      let nextState = newState;\n      if (nextState.validMoves.size === 0 && !nextState.gameOver) {\n        nextState = GameSimulator.makePass(nextState);\n      }\n\n      const result = await this.exactSearch(\n        nextState,\n        originalPlayer,\n        depth - 1,\n        alpha,\n        beta,\n      );\n\n      // Update best score and alpha-beta bounds\n      if (gameState.currentPlayer === originalPlayer) {\n        // Maximizing player\n        if (result.score > bestScore) {\n          bestScore = result.score;\n          bestMove = move;\n        }\n        alpha = Math.max(alpha, bestScore);\n      } else {\n        // Minimizing player\n        if (result.score < bestScore) {\n          bestScore = result.score;\n          bestMove = move;\n        }\n        beta = Math.min(beta, bestScore);\n      }\n\n      // Alpha-beta pruning\n      if (beta <= alpha) {\n        break;\n      }\n    }\n\n    // Store in transposition table\n    if (this._config.useTranspositionTable) {\n      this.storeTransposition(gameState, depth, bestScore, bestMove, alpha, beta);\n    }\n\n    return { score: bestScore, bestMove };\n  }\n\n  /**\n   * Calculate exact final score (difference in piece count)\n   */\n  private calculateFinalScore(gameState: SimulatedGameState, originalPlayer: PlayerColor): number {\n    let playerPieces = 0;\n    let opponentPieces = 0;\n    let emptySquares = 0;\n\n    for (let i = 0; i < gameState.board.length; i++) {\n      const piece = gameState.board[i];\n      if (piece === originalPlayer) {\n        playerPieces++;\n      } else if (piece !== PlayerColor.EMPTY) {\n        opponentPieces++;\n      } else {\n        emptySquares++;\n      }\n    }\n\n    // In endgame, empty squares go to the player who made the last move\n    if (emptySquares > 0) {\n      // Use parity to determine who gets the empty squares\n      if (this._config.enableParity) {\n        const parityAdvantage = this.calculateParity(gameState, originalPlayer);\n        if (parityAdvantage > 0) {\n          playerPieces += emptySquares;\n        } else {\n          opponentPieces += emptySquares;\n        }\n      } else {\n        // Simple heuristic: current player gets remaining squares\n        if (gameState.currentPlayer === originalPlayer) {\n          playerPieces += emptySquares;\n        } else {\n          opponentPieces += emptySquares;\n        }\n      }\n    }\n\n    return playerPieces - opponentPieces;\n  }\n\n  /**\n   * Calculate parity advantage (who is likely to get the last move)\n   */\n  private calculateParity(gameState: SimulatedGameState, player: PlayerColor): number {\n    const emptySquares = this.countEmptySquares(gameState.board);\n    const currentPlayerAdvantage = gameState.currentPlayer === player ? 1 : -1;\n\n    // In positions with odd number of empty squares, current player has advantage\n    if (emptySquares % 2 === 1) {\n      return currentPlayerAdvantage;\n    } else {\n      return -currentPlayerAdvantage;\n    }\n  }\n\n  /**\n   * Get ordered moves for better alpha-beta pruning\n   */\n  private getOrderedMoves(gameState: SimulatedGameState): BoardPosition[] {\n    const moves = Array.from(gameState.validMoves.keys());\n\n    if (!this._config.useMoveOrdering) {\n      return moves;\n    }\n\n    // Order moves by strategic value in endgame\n    const scoredMoves = moves.map(move => {\n      let score = 0;\n\n      // Prioritize corner moves\n      if ([0, 7, 56, 63].includes(move)) {\n        score += 1000;\n      }\n\n      // Prioritize edge moves\n      const row = Math.floor(move / 8);\n      const col = move % 8;\n      if (row === 0 || row === 7 || col === 0 || col === 7) {\n        score += 100;\n      }\n\n      // Prioritize moves that flip more pieces\n      const flippedCount = gameState.validMoves.get(move)?.length || 0;\n      score += flippedCount * 10;\n\n      // Avoid X-squares unless necessary\n      if ([9, 14, 49, 54].includes(move)) {\n        score -= 500;\n      }\n\n      return { move, score };\n    });\n\n    // Sort by score descending\n    scoredMoves.sort((a, b) => b.score - a.score);\n\n    return scoredMoves.map(item => item.move);\n  }\n\n  /**\n   * Count empty squares on board\n   */\n  private countEmptySquares(board: Uint8Array): number {\n    let count = 0;\n    for (let i = 0; i < board.length; i++) {\n      if (board[i] === PlayerColor.EMPTY) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Generate transposition table key\n   */\n  private generateTranspositionKey(gameState: SimulatedGameState): string {\n    return Array.from(gameState.board).join('') + '_' + gameState.currentPlayer;\n  }\n\n  /**\n   * Lookup transposition table\n   */\n  private lookupTransposition(\n    gameState: SimulatedGameState,\n    depth: number,\n  ): EndgameTransposition | null {\n    const key = this.generateTranspositionKey(gameState);\n    const entry = this._transpositionTable.get(key);\n\n    if (entry && entry.depth >= depth) {\n      return entry;\n    }\n\n    return null;\n  }\n\n  /**\n   * Store result in transposition table\n   */\n  private storeTransposition(\n    gameState: SimulatedGameState,\n    depth: number,\n    score: number,\n    bestMove: BoardPosition | undefined,\n    alpha: number,\n    beta: number,\n  ): void {\n    const key = this.generateTranspositionKey(gameState);\n\n    let flag: 'exact' | 'lower' | 'upper';\n    if (score <= alpha) {\n      flag = 'upper';\n    } else if (score >= beta) {\n      flag = 'lower';\n    } else {\n      flag = 'exact';\n    }\n\n    this._transpositionTable.set(key, {\n      exactScore: score,\n      depth,\n      bestMove,\n      flag,\n      timestamp: Date.now(),\n    });\n\n    // Limit table size\n    if (this._transpositionTable.size > 50000) {\n      this.cleanupTranspositionTable();\n    }\n  }\n\n  /**\n   * Clean up old transposition table entries\n   */\n  private cleanupTranspositionTable(): void {\n    const cutoff = Date.now() - 600000; // 10 minutes\n    for (const [key, entry] of this._transpositionTable.entries()) {\n      if (entry.timestamp < cutoff) {\n        this._transpositionTable.delete(key);\n      }\n    }\n  }\n\n  /**\n   * Get solver statistics\n   */\n  getStatistics(): {\n    transpositionEntries: number;\n    maxEmptySquares: number;\n    averageNodesPerSecond: number;\n  } {\n    const timeElapsed = Date.now() - this._startTime;\n    const nodesPerSecond = timeElapsed > 0 ? (this._nodesSearched / timeElapsed) * 1000 : 0;\n\n    return {\n      transpositionEntries: this._transpositionTable.size,\n      maxEmptySquares: this._config.maxEmptySquares,\n      averageNodesPerSecond: nodesPerSecond,\n    };\n  }\n\n  /**\n   * Clear all caches\n   */\n  clearCaches(): void {\n    this._transpositionTable.clear();\n  }\n\n  /**\n   * Update configuration\n   */\n  setConfig(config: Partial<EndgameSolverConfig>): void {\n    Object.assign(this._config, config);\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): EndgameSolverConfig {\n    return { ...this._config };\n  }\n}\n\n/**\n * Default endgame solver instance\n */\nexport const defaultEndgameSolver = new EndgameSolver();\n\n/**\n * Factory functions for creating endgame solvers\n */\nexport const createEndgameSolver = {\n  /**\n   * Fast solver for quick endgames\n   */\n  fast(): EndgameSolver {\n    return new EndgameSolver({\n      maxEmptySquares: 12,\n      maxTimeMs: 5000,\n      useMoveOrdering: true,\n    });\n  },\n\n  /**\n   * Deep solver for thorough analysis\n   */\n  deep(): EndgameSolver {\n    return new EndgameSolver({\n      maxEmptySquares: 20,\n      maxTimeMs: 60000,\n      useTranspositionTable: true,\n      useMoveOrdering: true,\n      enableParity: true,\n    });\n  },\n\n  /**\n   * Tournament solver for competitive play\n   */\n  tournament(): EndgameSolver {\n    return new EndgameSolver({\n      maxEmptySquares: 16,\n      maxTimeMs: 30000,\n      useTranspositionTable: true,\n      useMoveOrdering: true,\n      enableParity: true,\n    });\n  },\n\n  /**\n   * Custom configuration\n   */\n  custom(config: Partial<EndgameSolverConfig>): EndgameSolver {\n    return new EndgameSolver(config);\n  },\n};","/**\n * Advanced AI Strategy\n *\n * Master-level AI that combines multiple techniques:\n * - Opening book for theoretical play\n * - Minimax with alpha-beta pruning for midgame\n * - Endgame solver for perfect endplay\n * - Adaptive time management\n * - Monte Carlo Tree Search for complex positions\n */\n\nimport { AIDifficulty, PlayerColor, BoardPosition } from '@/types/game-types';\nimport type { GameState } from '@/core/models/GameState';\nimport { AIStrategyBase, type AIMoveResult } from '../ai-strategy-base';\nimport { MinimaxAI, type MinimaxConfig } from './minimax-ai';\nimport { OpeningBook, defaultOpeningBook } from './opening-book';\nimport { EndgameSolver, defaultEndgameSolver } from './endgame-solver';\nimport { GameSimulator, type SimulatedGameState } from '../game-simulator';\nimport { AdvancedEvaluator } from './evaluation';\n\n/**\n * Advanced AI configuration\n */\nexport interface AdvancedAIConfig {\n  // Opening book settings\n  useOpeningBook: boolean;\n  openingBookDepth: number;\n\n  // Midgame minimax settings\n  minimaxDepth: number;\n  minimaxTimeLimit: number;\n  useIterativeDeepening: boolean;\n\n  // Endgame solver settings\n  useEndgameSolver: boolean;\n  endgameThreshold: number; // Empty squares to trigger endgame\n  endgameTimeLimit: number;\n\n  // Adaptive settings\n  adaptiveTimeManagement: boolean;\n  thinkingTimeBase: number; // Base thinking time in ms\n  thinkingTimeMax: number;  // Maximum thinking time in ms\n\n  // Advanced features\n  useMonteCarlo: boolean;\n  monteCarloSamples: number;\n  useAspirationWindows: boolean;\n}\n\n/**\n * Game phase detection\n */\ntype GamePhase = 'opening' | 'midgame' | 'endgame';\n\n/**\n * Advanced AI Strategy Implementation\n */\nexport class AdvancedAI extends AIStrategyBase {\n  public readonly difficulty = AIDifficulty.ADVANCED;\n  public readonly name = 'Advanced AI';\n  public readonly description = 'Master-level AI combining opening book, minimax, and endgame solver';\n\n  private readonly _config: AdvancedAIConfig;\n  private readonly _openingBook: OpeningBook;\n  private readonly _endgameSolver: EndgameSolver;\n  private _minimaxAI: MinimaxAI;\n\n  // Performance tracking\n  private _phaseStats = {\n    opening: { moves: 0, totalTime: 0 },\n    midgame: { moves: 0, totalTime: 0 },\n    endgame: { moves: 0, totalTime: 0 },\n  };\n\n  constructor(config: Partial<AdvancedAIConfig> = {}) {\n    super();\n\n    this._config = {\n      // Opening book\n      useOpeningBook: true,\n      openingBookDepth: 12,\n\n      // Midgame minimax\n      minimaxDepth: 8,\n      minimaxTimeLimit: 5000,\n      useIterativeDeepening: true,\n\n      // Endgame solver\n      useEndgameSolver: true,\n      endgameThreshold: 16,\n      endgameTimeLimit: 30000,\n\n      // Adaptive time management\n      adaptiveTimeManagement: true,\n      thinkingTimeBase: 1000,\n      thinkingTimeMax: 10000,\n\n      // Advanced features\n      useMonteCarlo: false, // Disabled for now\n      monteCarloSamples: 1000,\n      useAspirationWindows: true,\n\n      ...config,\n    };\n\n    this._openingBook = defaultOpeningBook;\n    this._endgameSolver = defaultEndgameSolver;\n\n    // Configure minimax AI\n    const minimaxConfig: Partial<MinimaxConfig> = {\n      maxDepth: this._config.minimaxDepth,\n      maxTime: this._config.minimaxTimeLimit,\n      useIterativeDeepening: this._config.useIterativeDeepening,\n      useTranspositionTable: true,\n      useMoveOrdering: true,\n      aspirationWindow: this._config.useAspirationWindows ? 50 : undefined,\n    };\n\n    this._minimaxAI = new MinimaxAI(minimaxConfig);\n  }\n\n  protected async selectMoveImpl(\n    gameState: GameState,\n    player: PlayerColor,\n    timeLimit: number,\n  ): Promise<AIMoveResult> {\n    const startTime = Date.now();\n    const phase = this.detectGamePhase(gameState);\n    const adaptiveTimeLimit = this.calculateAdaptiveTimeLimit(gameState, timeLimit, phase);\n\n    let result: AIMoveResult;\n\n    try {\n      switch (phase) {\n        case 'opening':\n          result = await this.handleOpening(gameState, player, adaptiveTimeLimit);\n          break;\n\n        case 'midgame':\n          result = await this.handleMidgame(gameState, player, adaptiveTimeLimit);\n          break;\n\n        case 'endgame':\n          result = await this.handleEndgame(gameState, player, adaptiveTimeLimit);\n          break;\n\n        default:\n          result = await this.handleMidgame(gameState, player, adaptiveTimeLimit);\n      }\n\n      // Update performance statistics\n      const actualTime = Date.now() - startTime;\n      this._phaseStats[phase].moves++;\n      this._phaseStats[phase].totalTime += actualTime;\n\n      // Enhance result with phase information\n      return {\n        ...result,\n        thinkingTime: actualTime,\n      };\n\n    } catch (error) {\n      // Fallback to minimax if any component fails\n      console.warn(`Advanced AI ${phase} phase failed, falling back to minimax:`, error);\n      return this._minimaxAI.selectMove(gameState, player, adaptiveTimeLimit);\n    }\n  }\n\n  /**\n   * Handle opening phase using opening book\n   */\n  private async handleOpening(\n    gameState: GameState,\n    player: PlayerColor,\n    timeLimit: number,\n  ): Promise<AIMoveResult> {\n    if (this._config.useOpeningBook && this._openingBook.hasOpeningMove(gameState)) {\n      const openingMove = this._openingBook.getOpeningMove(gameState);\n\n      if (openingMove !== null) {\n        // Simulate thinking time for opening book moves\n        const thinkingTime = 200 + Math.random() * 300; // 200-500ms\n        await new Promise(resolve => setTimeout(resolve, thinkingTime));\n\n        return {\n          position: openingMove,\n          confidence: 0.9, // High confidence in opening theory\n          evaluation: 0, // Opening moves are theoretical\n          thinkingTime,\n          depth: this._openingBook.getOpeningDepth(gameState),\n          nodesEvaluated: 1,\n        };\n      }\n    }\n\n    // Fall back to minimax if no opening book move\n    return this._minimaxAI.selectMove(gameState, player, timeLimit);\n  }\n\n  /**\n   * Handle midgame using minimax with advanced evaluation\n   */\n  private async handleMidgame(\n    gameState: GameState,\n    player: PlayerColor,\n    timeLimit: number,\n  ): Promise<AIMoveResult> {\n    // Use the full minimax AI for midgame\n    return this._minimaxAI.selectMove(gameState, player, timeLimit);\n  }\n\n  /**\n   * Handle endgame using exact solver\n   */\n  private async handleEndgame(\n    gameState: GameState,\n    player: PlayerColor,\n    timeLimit: number,\n  ): Promise<AIMoveResult> {\n    if (!this._config.useEndgameSolver) {\n      return this._minimaxAI.selectMove(gameState, player, timeLimit);\n    }\n\n    const simState = GameSimulator.fromGameState(gameState);\n\n    if (this._endgameSolver.canSolve(simState)) {\n      try {\n        const endgameResult = await this._endgameSolver.solvePosition(\n          simState,\n          player,\n          Math.min(timeLimit, this._config.endgameTimeLimit),\n        );\n\n        return {\n          position: endgameResult.bestMove,\n          confidence: endgameResult.confidence,\n          evaluation: endgameResult.exactScore,\n          thinkingTime: endgameResult.timeElapsed,\n          depth: endgameResult.movesToEnd,\n          nodesEvaluated: endgameResult.nodesSearched,\n        };\n      } catch (error) {\n        console.warn('Endgame solver failed, falling back to minimax:', error);\n      }\n    }\n\n    // Fall back to deep minimax search\n    const deepMinimaxConfig = {\n      maxDepth: this._config.minimaxDepth + 2, // Extra depth for endgame\n      maxTime: timeLimit,\n      useIterativeDeepening: true,\n    };\n\n    const deepMinimax = new MinimaxAI(deepMinimaxConfig);\n    return deepMinimax.selectMove(gameState, player, timeLimit);\n  }\n\n  /**\n   * Detect current game phase\n   */\n  private detectGamePhase(gameState: GameState): GamePhase {\n    const totalPieces = gameState.scores.black + gameState.scores.white;\n    const emptySquares = 64 - totalPieces;\n\n    // Opening phase: first 8-12 moves\n    if (totalPieces <= 12) {\n      return 'opening';\n    }\n\n    // Endgame phase: 16 or fewer empty squares\n    if (emptySquares <= this._config.endgameThreshold) {\n      return 'endgame';\n    }\n\n    // Everything else is midgame\n    return 'midgame';\n  }\n\n  /**\n   * Calculate adaptive thinking time based on position complexity\n   */\n  private calculateAdaptiveTimeLimit(\n    gameState: GameState,\n    baseTimeLimit: number,\n    phase: GamePhase,\n  ): number {\n    if (!this._config.adaptiveTimeManagement) {\n      return baseTimeLimit;\n    }\n\n    const moveCount = gameState.validMoves.size;\n    const complexity = this.assessPositionComplexity(gameState);\n\n    let timeMultiplier = 1.0;\n\n    // Phase-based adjustments\n    switch (phase) {\n      case 'opening':\n        timeMultiplier = 0.3; // Quick opening moves\n        break;\n      case 'midgame':\n        timeMultiplier = 1.0; // Standard time\n        break;\n      case 'endgame':\n        timeMultiplier = 2.0; // More time for critical endgame\n        break;\n    }\n\n    // Complexity adjustments\n    timeMultiplier *= (1.0 + complexity * 0.5);\n\n    // Move count adjustments (more time when many options)\n    if (moveCount > 10) {\n      timeMultiplier *= 1.3;\n    } else if (moveCount < 3) {\n      timeMultiplier *= 0.7;\n    }\n\n    const adaptiveTime = Math.min(\n      this._config.thinkingTimeMax,\n      Math.max(\n        this._config.thinkingTimeBase * timeMultiplier,\n        baseTimeLimit * 0.5, // Don't go below 50% of base time\n      ),\n    );\n\n    return Math.min(adaptiveTime, baseTimeLimit);\n  }\n\n  /**\n   * Assess position complexity for time allocation\n   */\n  private assessPositionComplexity(gameState: GameState): number {\n    let complexity = 0;\n\n    // More moves = higher complexity\n    complexity += Math.min(gameState.validMoves.size / 15, 1.0);\n\n    // Score difference affects complexity\n    const scoreDiff = Math.abs(gameState.scores.black - gameState.scores.white);\n    complexity += Math.min(scoreDiff / 20, 0.5);\n\n    // Corner and edge availability\n    const corners = [0, 7, 56, 63];\n    const availableCorners = corners.filter(pos => gameState.board[pos] === PlayerColor.EMPTY);\n    complexity += availableCorners.length * 0.1;\n\n    return Math.min(complexity, 1.0);\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): AdvancedAIConfig {\n    return { ...this._config };\n  }\n\n  /**\n   * Update configuration\n   */\n  setConfig(config: Partial<AdvancedAIConfig>): void {\n    Object.assign(this._config, config);\n\n    // Update minimax configuration\n    const minimaxConfig: Partial<MinimaxConfig> = {\n      maxDepth: this._config.minimaxDepth,\n      maxTime: this._config.minimaxTimeLimit,\n      useIterativeDeepening: this._config.useIterativeDeepening,\n      aspirationWindow: this._config.useAspirationWindows ? 50 : undefined,\n    };\n\n    this._minimaxAI.setConfig(minimaxConfig);\n  }\n\n  /**\n   * Get performance statistics\n   */\n  getPerformanceStats(): {\n    opening: { moves: number; avgTime: number };\n    midgame: { moves: number; avgTime: number };\n    endgame: { moves: number; avgTime: number };\n    totalMoves: number;\n    overallAvgTime: number;\n  } {\n    const opening = {\n      moves: this._phaseStats.opening.moves,\n      avgTime: this._phaseStats.opening.moves > 0\n        ? this._phaseStats.opening.totalTime / this._phaseStats.opening.moves\n        : 0,\n    };\n\n    const midgame = {\n      moves: this._phaseStats.midgame.moves,\n      avgTime: this._phaseStats.midgame.moves > 0\n        ? this._phaseStats.midgame.totalTime / this._phaseStats.midgame.moves\n        : 0,\n    };\n\n    const endgame = {\n      moves: this._phaseStats.endgame.moves,\n      avgTime: this._phaseStats.endgame.moves > 0\n        ? this._phaseStats.endgame.totalTime / this._phaseStats.endgame.moves\n        : 0,\n    };\n\n    const totalMoves = opening.moves + midgame.moves + endgame.moves;\n    const totalTime = this._phaseStats.opening.totalTime +\n                      this._phaseStats.midgame.totalTime +\n                      this._phaseStats.endgame.totalTime;\n\n    return {\n      opening,\n      midgame,\n      endgame,\n      totalMoves,\n      overallAvgTime: totalMoves > 0 ? totalTime / totalMoves : 0,\n    };\n  }\n\n  /**\n   * Reset performance statistics\n   */\n  resetStats(): void {\n    this._phaseStats = {\n      opening: { moves: 0, totalTime: 0 },\n      midgame: { moves: 0, totalTime: 0 },\n      endgame: { moves: 0, totalTime: 0 },\n    };\n  }\n\n  /**\n   * Clear all caches\n   */\n  clearCaches(): void {\n    this._minimaxAI.clearCaches();\n    this._endgameSolver.clearCaches();\n  }\n}\n\n/**\n * Factory functions for creating advanced AI variants\n */\nexport const createAdvancedAI = {\n  /**\n   * Tournament-level AI with balanced settings\n   */\n  tournament(): AdvancedAI {\n    const isMobile = this.isMobileDevice();\n\n    if (isMobile) {\n      console.log('📱 Creating mobile-optimized Tournament AI');\n      return new AdvancedAI({\n        useOpeningBook: true,\n        openingBookDepth: 10,\n        minimaxDepth: 6,\n        useEndgameSolver: false, // Disable for mobile\n        endgameThreshold: 14,\n        adaptiveTimeManagement: true,\n        thinkingTimeBase: 1500,\n        thinkingTimeMax: 6000,\n      });\n    }\n\n    return new AdvancedAI({\n      useOpeningBook: true,\n      openingBookDepth: 12,\n      minimaxDepth: 8,\n      useEndgameSolver: true,\n      endgameThreshold: 16,\n      adaptiveTimeManagement: true,\n      thinkingTimeBase: 2000,\n      thinkingTimeMax: 15000,\n    });\n  },\n\n  /**\n   * Master-level AI with maximum strength\n   */\n  master(): AdvancedAI {\n    // Detect if running on mobile device\n    const isMobile = this.isMobileDevice();\n\n    if (isMobile) {\n      console.log('📱 Creating mobile-optimized Master AI');\n      return new AdvancedAI({\n        useOpeningBook: true,\n        openingBookDepth: 12,\n        minimaxDepth: 6,\n        useEndgameSolver: false, // Disable for mobile performance\n        endgameThreshold: 16,\n        adaptiveTimeManagement: true,\n        thinkingTimeBase: 2000,\n        thinkingTimeMax: 8000,\n        useAspirationWindows: false, // Disable for mobile\n      });\n    }\n\n    return new AdvancedAI({\n      useOpeningBook: true,\n      openingBookDepth: 16,\n      minimaxDepth: 10,\n      useEndgameSolver: true,\n      endgameThreshold: 20,\n      adaptiveTimeManagement: true,\n      thinkingTimeBase: 3000,\n      thinkingTimeMax: 30000,\n      useAspirationWindows: true,\n    });\n  },\n\n  /**\n   * Mobile device detection utility\n   */\n  isMobileDevice(): boolean {\n    const userAgent = navigator.userAgent.toLowerCase();\n    const mobileKeywords = ['mobile', 'android', 'iphone', 'ipad', 'ipod', 'blackberry', 'windows phone'];\n    const isMobileUA = mobileKeywords.some(keyword => userAgent.includes(keyword));\n    const isSmallScreen = window.innerWidth < 768;\n    const hasTouchSupport = 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n    return isMobileUA || (isSmallScreen && hasTouchSupport);\n  },\n\n  /**\n   * Fast AI for quick games\n   */\n  blitz(): AdvancedAI {\n    return new AdvancedAI({\n      useOpeningBook: true,\n      openingBookDepth: 8,\n      minimaxDepth: 6,\n      useEndgameSolver: true,\n      endgameThreshold: 12,\n      adaptiveTimeManagement: false,\n      thinkingTimeBase: 500,\n      thinkingTimeMax: 2000,\n    });\n  },\n\n  /**\n   * Custom advanced AI\n   */\n  custom(config: Partial<AdvancedAIConfig>): AdvancedAI {\n    return new AdvancedAI(config);\n  },\n};","/**\r\n * AI Strategy Manager\r\n *\r\n * Central manager for AI strategies that handles:\r\n * - Strategy selection based on difficulty\r\n * - AI move generation\r\n * - Performance monitoring\r\n * - Strategy switching and management\r\n */\r\n\r\nimport { AIDifficulty, PlayerColor } from '@/types/game-types';\r\nimport type { GameState } from '@/core/models/GameState';\r\nimport type { IAIStrategy, AIMoveResult, AIPerformanceMetrics } from './ai-strategy-base';\r\n\r\n// Import AI strategy implementations\r\nimport { createRandomAI } from './strategies/random-ai';\r\nimport { createGreedyAI } from './strategies/greedy-ai';\r\nimport { createMinimaxAI } from './strategies/minimax-ai';\r\nimport { createAdvancedAI } from './strategies/advanced-ai';\r\n\r\n/**\r\n * AI strategy registry entry\r\n */\r\ninterface StrategyRegistryEntry {\r\n  difficulty: AIDifficulty;\r\n  name: string;\r\n  description: string;\r\n  factory: () => IAIStrategy;\r\n  isDefault: boolean;\r\n}\r\n\r\n/**\r\n * AI Manager configuration options\r\n */\r\nexport interface AIManagerOptions {\r\n  defaultDifficulty?: AIDifficulty;\r\n  enablePerformanceLogging?: boolean;\r\n  maxConcurrentThinking?: number;\r\n  fallbackOnTimeout?: boolean;\r\n}\r\n\r\n/**\r\n * AI thinking status\r\n */\r\nexport interface AIThinkingStatus {\r\n  isThinking: boolean;\r\n  difficulty: AIDifficulty;\r\n  strategyName: string;\r\n  startTime: number;\r\n  timeLimit: number;\r\n  player: PlayerColor;\r\n  gameState?: GameState;\r\n}\r\n\r\n/**\r\n * AI move request\r\n */\r\nexport interface AIMoveRequest {\r\n  gameState: GameState;\r\n  player: PlayerColor;\r\n  difficulty: AIDifficulty;\r\n  timeLimit?: number;\r\n  priority?: number; // 0-10, higher = more priority\r\n}\r\n\r\n/**\r\n * AI Strategy Manager implementation\r\n */\r\nexport class AIStrategyManager {\r\n  private _strategies = new Map<string, IAIStrategy>();\r\n  private _strategyRegistry = new Map<AIDifficulty, StrategyRegistryEntry[]>();\r\n  private _currentThinking: AIThinkingStatus | null = null;\r\n  private _performanceHistory = new Map<AIDifficulty, AIPerformanceMetrics[]>();\r\n  private _options: AIManagerOptions;\r\n  private _worker: Worker | null = null;\r\n  private _pendingWorkerRequests = new Map<string, { resolve: (result: AIMoveResult) => void; reject: (error: Error) => void }>();\r\n  private _customSettings: any = null;\r\n\r\n  constructor(options: AIManagerOptions = {}) {\r\n    this._options = {\r\n      defaultDifficulty: AIDifficulty.GREEDY,\r\n      enablePerformanceLogging: true,\r\n      maxConcurrentThinking: 1,\r\n      fallbackOnTimeout: true,\r\n      ...options,\r\n    };\r\n\r\n    this.registerDefaultStrategies();\r\n  }\r\n\r\n  /**\r\n   * Register default AI strategies\r\n   */\r\n  private registerDefaultStrategies(): void {\r\n    // Random AI variants\r\n    this.registerStrategy({\r\n      difficulty: AIDifficulty.RANDOM,\r\n      name: 'Pure Random',\r\n      description: 'Completely random move selection',\r\n      factory: () => createRandomAI.pure(),\r\n      isDefault: false,\r\n    });\r\n\r\n    this.registerStrategy({\r\n      difficulty: AIDifficulty.RANDOM,\r\n      name: 'Smart Random',\r\n      description: 'Random moves but avoids obviously bad positions',\r\n      factory: () => createRandomAI.smart(),\r\n      isDefault: true, // Default for RANDOM difficulty\r\n    });\r\n\r\n    // Greedy AI variants\r\n    this.registerStrategy({\r\n      difficulty: AIDifficulty.GREEDY,\r\n      name: 'Standard Greedy',\r\n      description: 'Selects highest immediate score',\r\n      factory: () => createGreedyAI.standard(),\r\n      isDefault: false,\r\n    });\r\n\r\n    this.registerStrategy({\r\n      difficulty: AIDifficulty.GREEDY,\r\n      name: 'Enhanced Greedy',\r\n      description: 'Greedy with additional heuristics',\r\n      factory: () => createGreedyAI.enhanced(),\r\n      isDefault: false,\r\n    });\r\n\r\n    this.registerStrategy({\r\n      difficulty: AIDifficulty.GREEDY,\r\n      name: 'Adaptive Greedy',\r\n      description: 'Greedy that adapts to game situation',\r\n      factory: () => createGreedyAI.adaptive(),\r\n      isDefault: true, // Default for GREEDY difficulty\r\n    });\r\n\r\n    // Minimax AI variants\r\n    this.registerStrategy({\r\n      difficulty: AIDifficulty.MINIMAX,\r\n      name: 'Standard Minimax',\r\n      description: 'Minimax with alpha-beta pruning (depth 6)',\r\n      factory: () => createMinimaxAI.intermediate(),\r\n      isDefault: true, // Default for MINIMAX difficulty\r\n    });\r\n\r\n    this.registerStrategy({\r\n      difficulty: AIDifficulty.MINIMAX_EASY,\r\n      name: 'Easy Minimax',\r\n      description: 'Minimax with moderate depth (depth 4)',\r\n      factory: () => createMinimaxAI.basic(),\r\n      isDefault: true,\r\n    });\r\n\r\n    this.registerStrategy({\r\n      difficulty: AIDifficulty.MINIMAX_HARD,\r\n      name: 'Hard Minimax',\r\n      description: 'Minimax with deep search (depth 8)',\r\n      factory: () => createMinimaxAI.advanced(),\r\n      isDefault: true,\r\n    });\r\n\r\n    // Advanced AI variants\r\n    this.registerStrategy({\r\n      difficulty: AIDifficulty.ADVANCED,\r\n      name: 'Tournament AI',\r\n      description: 'Opening book + minimax + endgame solver',\r\n      factory: () => createAdvancedAI.tournament(),\r\n      isDefault: true, // Default for ADVANCED difficulty\r\n    });\r\n\r\n    this.registerStrategy({\r\n      difficulty: AIDifficulty.MASTER,\r\n      name: 'Master AI',\r\n      description: 'Maximum strength with deep analysis',\r\n      factory: () => createAdvancedAI.master(),\r\n      isDefault: true,\r\n    });\r\n\r\n    this.registerStrategy({\r\n      difficulty: AIDifficulty.BLITZ,\r\n      name: 'Blitz AI',\r\n      description: 'Fast advanced AI for quick games',\r\n      factory: () => createAdvancedAI.blitz(),\r\n      isDefault: true,\r\n    });\r\n\r\n    // Custom variants (can be configured by user)\r\n    this.registerStrategy({\r\n      difficulty: AIDifficulty.CUSTOM,\r\n      name: 'Custom Minimax',\r\n      description: 'User-configurable minimax AI',\r\n      factory: () => createMinimaxAI.custom({}),\r\n      isDefault: false,\r\n    });\r\n\r\n    this.registerStrategy({\r\n      difficulty: AIDifficulty.CUSTOM,\r\n      name: 'Custom Advanced',\r\n      description: 'User-configurable advanced AI',\r\n      factory: () => createAdvancedAI.custom({}),\r\n      isDefault: true,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Register a new AI strategy\r\n   */\r\n  registerStrategy(entry: StrategyRegistryEntry): void {\r\n    if (!this._strategyRegistry.has(entry.difficulty)) {\r\n      this._strategyRegistry.set(entry.difficulty, []);\r\n    }\r\n\r\n    const strategies = this._strategyRegistry.get(entry.difficulty)!;\r\n\r\n    // If this is marked as default, unmark others\r\n    if (entry.isDefault) {\r\n      strategies.forEach(s => s.isDefault = false);\r\n    }\r\n\r\n    strategies.push(entry);\r\n  }\r\n\r\n  /**\r\n   * Get or create strategy instance\r\n   */\r\n  private getStrategy(difficulty: AIDifficulty, strategyName?: string): IAIStrategy {\r\n    const key = `${difficulty}_${strategyName || 'default'}`;\r\n\r\n    if (!this._strategies.has(key)) {\r\n      const strategies = this._strategyRegistry.get(difficulty);\r\n\r\n      if (!strategies || strategies.length === 0) {\r\n        throw new Error(`No strategies registered for difficulty: ${difficulty}`);\r\n      }\r\n\r\n      let strategy: StrategyRegistryEntry;\r\n\r\n      if (strategyName) {\r\n        const found = strategies.find(s => s.name === strategyName);\r\n        if (!found) {\r\n          throw new Error(`Strategy '${strategyName}' not found for difficulty: ${difficulty}`);\r\n        }\r\n        strategy = found;\r\n      } else {\r\n        // Find default strategy\r\n        const defaultStrategy = strategies.find(s => s.isDefault);\r\n        if (!defaultStrategy) {\r\n          throw new Error(`No default strategy found for difficulty: ${difficulty}`);\r\n        }\r\n        strategy = defaultStrategy;\r\n      }\r\n\r\n      this._strategies.set(key, strategy.factory());\r\n    }\r\n\r\n    return this._strategies.get(key)!;\r\n  }\r\n\r\n  /**\r\n   * Request AI move\r\n   */\r\n  async requestMove(request: AIMoveRequest): Promise<AIMoveResult> {\r\n    // Check if already thinking\r\n    if (this._currentThinking && this._options.maxConcurrentThinking! <= 1) {\r\n      throw new Error('AI is already thinking. Wait for current move or stop thinking first.');\r\n    }\r\n\r\n    const timeLimit = request.timeLimit || 1000;\r\n\r\n    // Set thinking status\r\n    this._currentThinking = {\r\n      isThinking: true,\r\n      difficulty: request.difficulty,\r\n      strategyName: this.getStrategyName(request.difficulty),\r\n      startTime: Date.now(),\r\n      timeLimit,\r\n      player: request.player,\r\n      gameState: request.gameState,\r\n    };\r\n\r\n    try {\r\n      // For strong AI, use Web Worker to prevent main thread blocking\r\n      if (this.shouldUseWorker(request.difficulty)) {\r\n        return await this.requestMoveViaWorker(request);\r\n      }\r\n\r\n      // For simple AI, run on main thread (fast enough)\r\n      return await this.requestMoveOnMainThread(request);\r\n\r\n    } catch (error) {\r\n      // Handle timeout or other errors\r\n      if (this._options.fallbackOnTimeout && error instanceof Error) {\r\n        return this.getFallbackMove(request);\r\n      }\r\n      throw error;\r\n    } finally {\r\n      this._currentThinking = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get fallback move when primary strategy fails\r\n   */\r\n  private async getFallbackMove(request: AIMoveRequest): Promise<AIMoveResult> {\r\n    // Use simple random fallback\r\n    const fallbackStrategy = createRandomAI.pure();\r\n\r\n    return await fallbackStrategy.selectMove(\r\n      request.gameState,\r\n      request.player,\r\n      100, // Very quick fallback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update custom AI configuration\r\n   */\r\n  updateCustomAIConfig(customSettings: any): void {\r\n    // Store custom settings for worker use\r\n    this._customSettings = customSettings;\r\n\r\n    // Update custom minimax strategy\r\n    this.registerStrategy({\r\n      difficulty: AIDifficulty.CUSTOM,\r\n      name: 'Custom Minimax',\r\n      description: 'User-configurable minimax AI',\r\n      factory: () => createMinimaxAI.custom({\r\n        maxDepth: customSettings.searchDepth,\r\n        maxTime: customSettings.thinkingTime * 1000,\r\n        useIterativeDeepening: customSettings.iterativeDeepening,\r\n        useTranspositionTable: customSettings.useTranspositionTable,\r\n      }),\r\n      isDefault: false,\r\n    });\r\n\r\n    // Update custom advanced strategy\r\n    this.registerStrategy({\r\n      difficulty: AIDifficulty.CUSTOM,\r\n      name: 'Custom Advanced',\r\n      description: 'User-configurable advanced AI',\r\n      factory: () => createAdvancedAI.custom({\r\n        minimaxDepth: customSettings.searchDepth,\r\n        minimaxTimeLimit: customSettings.thinkingTime * 1000,\r\n        thinkingTimeBase: customSettings.thinkingTime * 1000,\r\n        thinkingTimeMax: customSettings.thinkingTime * 2000,\r\n        useOpeningBook: customSettings.useOpeningBook,\r\n        useEndgameSolver: customSettings.useEndgameSolver,\r\n        adaptiveTimeManagement: customSettings.adaptiveTime,\r\n        useIterativeDeepening: customSettings.iterativeDeepening,\r\n      }),\r\n      isDefault: true,\r\n    });\r\n\r\n    // Clear cached strategies to force recreation with new config\r\n    this._strategies.delete(`${AIDifficulty.CUSTOM}_Custom Minimax`);\r\n    this._strategies.delete(`${AIDifficulty.CUSTOM}_Custom Advanced`);\r\n  }\r\n\r\n  /**\r\n   * Determine if AI should use Web Worker\r\n   */\r\n  private shouldUseWorker(difficulty: AIDifficulty): boolean {\r\n    // Use worker for AI with search depth >= 4 to prevent main thread blocking\r\n    return [\r\n      AIDifficulty.MINIMAX_EASY,    // depth 4\r\n      AIDifficulty.MINIMAX,         // depth 6\r\n      AIDifficulty.MINIMAX_HARD,    // depth 8\r\n      AIDifficulty.ADVANCED,        // depth 8+\r\n      AIDifficulty.MASTER,          // depth 10+\r\n      AIDifficulty.BLITZ,           // depth 6+\r\n      AIDifficulty.CUSTOM,          // variable depth\r\n    ].includes(difficulty);\r\n  }\r\n\r\n  /**\r\n   * Get strategy name for difficulty\r\n   */\r\n  private getStrategyName(difficulty: AIDifficulty): string {\r\n    const strategies = this._strategyRegistry.get(difficulty);\r\n    if (strategies && strategies.length > 0) {\r\n      const defaultStrategy = strategies.find(s => s.isDefault) || strategies[0];\r\n      return defaultStrategy!.name;\r\n    }\r\n    return 'Unknown Strategy';\r\n  }\r\n\r\n  /**\r\n   * Request move via Web Worker (for strong AI)\r\n   */\r\n  private async requestMoveViaWorker(request: AIMoveRequest): Promise<AIMoveResult> {\r\n    return new Promise((resolve, reject) => {\r\n      let timeoutId: number | null = null;\r\n      let hasResolved = false;\r\n\r\n      const cleanup = () => {\r\n        if (timeoutId) {\r\n          clearTimeout(timeoutId);\r\n          timeoutId = null;\r\n        }\r\n      };\r\n\r\n      const safeResolve = (result: AIMoveResult) => {\r\n        if (!hasResolved) {\r\n          hasResolved = true;\r\n          cleanup();\r\n          resolve(result);\r\n        }\r\n      };\r\n\r\n      const safeReject = (error: Error) => {\r\n        if (!hasResolved) {\r\n          hasResolved = true;\r\n          cleanup();\r\n          reject(error);\r\n        }\r\n      };\r\n\r\n      // Create worker if not exists\r\n      if (!this._worker) {\r\n        try {\r\n          this._worker = new Worker(new URL('../../workers/ai-worker.ts', import.meta.url), {\r\n            type: 'module',\r\n          });\r\n\r\n          this._worker.addEventListener('message', (event) => {\r\n            this.handleWorkerMessage(event, safeResolve, safeReject);\r\n          });\r\n\r\n          this._worker.addEventListener('error', (error) => {\r\n            console.error('AI Worker error:', error);\r\n            console.log('Falling back to chunked processing on main thread');\r\n            // Fallback to chunked processing\r\n            this.requestMoveWithChunking(request).then(safeResolve).catch(safeReject);\r\n          });\r\n        } catch (error) {\r\n          console.error('Failed to create AI Worker:', error);\r\n          console.log('Falling back to chunked processing on main thread');\r\n          // Fallback to chunked processing\r\n          this.requestMoveWithChunking(request).then(safeResolve).catch(safeReject);\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Generate unique request ID\r\n      const requestId = Date.now().toString() + '_' + Math.random().toString(36).substr(2, 9);\r\n      this._pendingWorkerRequests.set(requestId, { resolve: safeResolve, reject: safeReject });\r\n\r\n      try {\r\n        // Send request to worker\r\n        this._worker.postMessage({\r\n          type: 'CALCULATE_MOVE',\r\n          payload: {\r\n            id: requestId,\r\n            gameState: request.gameState,\r\n            player: request.player,\r\n            difficulty: request.difficulty,\r\n            timeLimit: request.timeLimit || 1000,\r\n            customConfig: this.getCustomConfig(request.difficulty),\r\n          },\r\n        });\r\n\r\n        // Set timeout for worker request with improved handling\r\n        const maxTimeout = Math.max((request.timeLimit || 1000) * 2, 5000); // At least 5 seconds\r\n        timeoutId = window.setTimeout(() => {\r\n          if (this._pendingWorkerRequests.has(requestId)) {\r\n            console.warn(`AI Worker timeout after ${maxTimeout}ms, falling back to chunked processing`);\r\n            this._pendingWorkerRequests.delete(requestId);\r\n\r\n            // Terminate and recreate worker if it's stuck\r\n            if (this._worker) {\r\n              this._worker.terminate();\r\n              this._worker = null;\r\n              this._pendingWorkerRequests.clear();\r\n            }\r\n\r\n            // Fallback to chunked processing\r\n            this.requestMoveWithChunking(request).then(safeResolve).catch(safeReject);\r\n          }\r\n        }, maxTimeout);\r\n\r\n      } catch (error) {\r\n        console.error('Failed to send message to AI Worker:', error);\r\n        this._pendingWorkerRequests.delete(requestId);\r\n        // Fallback to chunked processing\r\n        this.requestMoveWithChunking(request).then(safeResolve).catch(safeReject);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Request move on main thread (for simple AI)\r\n   */\r\n  private async requestMoveOnMainThread(request: AIMoveRequest): Promise<AIMoveResult> {\r\n    const strategy = this.getStrategy(request.difficulty);\r\n    const timeLimit = request.timeLimit || 1000;\r\n\r\n    // Request move from strategy\r\n    const result = await strategy.selectMove(\r\n      request.gameState,\r\n      request.player,\r\n      timeLimit,\r\n    );\r\n\r\n    // Log performance if enabled\r\n    if (this._options.enablePerformanceLogging) {\r\n      this.logPerformance(request.difficulty, strategy.getPerformanceMetrics());\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Handle worker message response\r\n   */\r\n  private handleWorkerMessage(\r\n    event: MessageEvent,\r\n    resolve: (result: AIMoveResult) => void,\r\n    reject: (error: Error) => void,\r\n  ): void {\r\n    const { type, payload } = event.data;\r\n\r\n    if (type === 'MOVE_RESULT') {\r\n      const { id, result } = payload;\r\n      const pending = this._pendingWorkerRequests.get(id);\r\n\r\n      if (pending) {\r\n        this._pendingWorkerRequests.delete(id);\r\n        resolve(result);\r\n      }\r\n    } else if (type === 'ERROR') {\r\n      const { id, error } = payload;\r\n      const pending = this._pendingWorkerRequests.get(id);\r\n\r\n      if (pending) {\r\n        this._pendingWorkerRequests.delete(id);\r\n        reject(new Error(error));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Request move with chunked processing (fallback for Web Worker issues)\r\n   */\r\n  private async requestMoveWithChunking(request: AIMoveRequest): Promise<AIMoveResult> {\r\n    console.log('🔄 Using chunked processing for AI calculation');\r\n\r\n    // Use a simpler/faster AI for chunked processing to reduce blocking\r\n    let fallbackDifficulty = request.difficulty;\r\n\r\n    // Reduce complexity for main thread processing\r\n    switch (request.difficulty) {\r\n      case AIDifficulty.MINIMAX_HARD:\r\n      case AIDifficulty.MASTER:\r\n        fallbackDifficulty = AIDifficulty.MINIMAX_EASY; // Use easy instead of hard/master\r\n        break;\r\n      case AIDifficulty.ADVANCED:\r\n      case AIDifficulty.MINIMAX:\r\n        fallbackDifficulty = AIDifficulty.GREEDY; // Use greedy for faster processing\r\n        break;\r\n      case AIDifficulty.BLITZ:\r\n        fallbackDifficulty = AIDifficulty.GREEDY; // Use greedy for blitz mode\r\n        break;\r\n      default:\r\n        // Keep original difficulty for easier ones\r\n        break;\r\n    }\r\n\r\n    const strategy = this.getStrategy(fallbackDifficulty);\r\n    // Aggressive time limit to prevent blocking - max 1 second for main thread\r\n    const timeLimit = Math.min(request.timeLimit || 1000, 1000);\r\n\r\n    console.log(`🔄 Chunked processing: ${request.difficulty} → ${fallbackDifficulty} (${timeLimit}ms limit)`);\r\n\r\n    // Add strict timeout to prevent hanging\r\n    const startTime = Date.now();\r\n    const maxProcessingTime = 2000; // Absolute maximum 2 seconds\r\n\r\n    try {\r\n      // Add yielding to prevent complete blocking\r\n      const result = await Promise.race([\r\n        this.executeWithYielding(async () => {\r\n          return await strategy.selectMove(\r\n            request.gameState,\r\n            request.player,\r\n            timeLimit,\r\n          );\r\n        }),\r\n        new Promise<AIMoveResult>((_, reject) => {\r\n          setTimeout(() => {\r\n            reject(new Error('Chunked processing timeout'));\r\n          }, maxProcessingTime);\r\n        })\r\n      ]);\r\n\r\n      const actualTime = Date.now() - startTime;\r\n      console.log(`🔄 Chunked processing completed in ${actualTime}ms`);\r\n\r\n      // Log performance if enabled\r\n      if (this._options.enablePerformanceLogging) {\r\n        this.logPerformance(fallbackDifficulty, strategy.getPerformanceMetrics());\r\n      }\r\n\r\n      return result;\r\n\r\n    } catch (error) {\r\n      console.warn('Chunked processing failed, using emergency fallback:', error);\r\n\r\n      // Emergency fallback to pure random move\r\n      const emergencyStrategy = createRandomAI.pure();\r\n      return await emergencyStrategy.selectMove(\r\n        request.gameState,\r\n        request.player,\r\n        100, // Very quick emergency move\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute function with periodic yielding to prevent UI blocking\r\n   */\r\n  private async executeWithYielding<T>(fn: () => Promise<T>): Promise<T> {\r\n    return new Promise((resolve, reject) => {\r\n      // Yield control to browser every 100ms\r\n      const yieldInterval = 100;\r\n      let lastYield = Date.now();\r\n\r\n      const originalSetTimeout = global.setTimeout;\r\n\r\n      // Override setTimeout to add yielding\r\n      global.setTimeout = ((callback: Function, delay: number) => {\r\n        const now = Date.now();\r\n        if (now - lastYield > yieldInterval) {\r\n          lastYield = now;\r\n          // Yield control to browser\r\n          return originalSetTimeout(() => {\r\n            originalSetTimeout(callback, delay);\r\n          }, 0);\r\n        }\r\n        return originalSetTimeout(callback, delay);\r\n      }) as any;\r\n\r\n      fn().then(result => {\r\n        global.setTimeout = originalSetTimeout;\r\n        resolve(result);\r\n      }).catch(error => {\r\n        global.setTimeout = originalSetTimeout;\r\n        reject(error);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get custom configuration for difficulty\r\n   */\r\n  private getCustomConfig(difficulty: AIDifficulty): any {\r\n    if (difficulty === AIDifficulty.CUSTOM && this._customSettings) {\r\n      return this._customSettings;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Stop current AI thinking\r\n   */\r\n  stopThinking(): void {\r\n    if (this._currentThinking) {\r\n      if (this.shouldUseWorker(this._currentThinking.difficulty)) {\r\n        // Terminate worker to stop calculation\r\n        if (this._worker) {\r\n          this._worker.terminate();\r\n          this._worker = null;\r\n          this._pendingWorkerRequests.clear();\r\n        }\r\n      } else {\r\n        // Stop main thread strategy\r\n        const strategy = this.getStrategy(\r\n          this._currentThinking.difficulty,\r\n          this._currentThinking.strategyName,\r\n        );\r\n        strategy.stopThinking();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current thinking status\r\n   */\r\n  getThinkingStatus(): AIThinkingStatus | null {\r\n    return this._currentThinking ? { ...this._currentThinking } : null;\r\n  }\r\n\r\n  /**\r\n   * Check if AI is currently thinking\r\n   */\r\n  isThinking(): boolean {\r\n    return this._currentThinking !== null;\r\n  }\r\n\r\n  /**\r\n   * Get available strategies for a difficulty level\r\n   */\r\n  getAvailableStrategies(difficulty: AIDifficulty): StrategyRegistryEntry[] {\r\n    return this._strategyRegistry.get(difficulty) || [];\r\n  }\r\n\r\n  /**\r\n   * Get all supported difficulty levels\r\n   */\r\n  getSupportedDifficulties(): AIDifficulty[] {\r\n    return Array.from(this._strategyRegistry.keys());\r\n  }\r\n\r\n  /**\r\n   * Get strategy performance metrics\r\n   */\r\n  getStrategyMetrics(difficulty: AIDifficulty, strategyName?: string): AIPerformanceMetrics {\r\n    const strategy = this.getStrategy(difficulty, strategyName);\r\n    return strategy.getPerformanceMetrics();\r\n  }\r\n\r\n  /**\r\n   * Reset strategy metrics\r\n   */\r\n  resetStrategyMetrics(difficulty: AIDifficulty, strategyName?: string): void {\r\n    const strategy = this.getStrategy(difficulty, strategyName);\r\n    strategy.resetMetrics();\r\n  }\r\n\r\n  /**\r\n   * Get performance history for a difficulty level\r\n   */\r\n  getPerformanceHistory(difficulty: AIDifficulty): AIPerformanceMetrics[] {\r\n    return this._performanceHistory.get(difficulty) || [];\r\n  }\r\n\r\n  /**\r\n   * Log performance metrics\r\n   */\r\n  private logPerformance(difficulty: AIDifficulty, metrics: AIPerformanceMetrics): void {\r\n    if (!this._performanceHistory.has(difficulty)) {\r\n      this._performanceHistory.set(difficulty, []);\r\n    }\r\n\r\n    const history = this._performanceHistory.get(difficulty)!;\r\n    history.push({ ...metrics });\r\n\r\n    // Keep only last 100 entries per difficulty\r\n    if (history.length > 100) {\r\n      history.shift();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get aggregate performance statistics\r\n   */\r\n  getAggregateStats(difficulty: AIDifficulty): {\r\n    totalGames: number;\r\n    averageThinkingTime: number;\r\n    averageAccuracy: number;\r\n    timeoutRate: number;\r\n  } {\r\n    const history = this._performanceHistory.get(difficulty) || [];\r\n\r\n    if (history.length === 0) {\r\n      return {\r\n        totalGames: 0,\r\n        averageThinkingTime: 0,\r\n        averageAccuracy: 0,\r\n        timeoutRate: 0,\r\n      };\r\n    }\r\n\r\n    const totalMoves = history.reduce((sum, h) => sum + h.movesPlayed, 0);\r\n    const totalTime = history.reduce((sum, h) => sum + h.averageThinkingTime * h.movesPlayed, 0);\r\n    const totalTimeouts = history.reduce((sum, h) => sum + h.timeoutCount, 0);\r\n    const totalAccuracy = history.reduce((sum, h) => sum + h.accuracy * h.movesPlayed, 0);\r\n\r\n    return {\r\n      totalGames: history.length,\r\n      averageThinkingTime: totalMoves > 0 ? totalTime / totalMoves : 0,\r\n      averageAccuracy: totalMoves > 0 ? totalAccuracy / totalMoves : 0,\r\n      timeoutRate: totalMoves > 0 ? totalTimeouts / totalMoves : 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Clear all cached strategies (forces recreation)\r\n   */\r\n  clearCache(): void {\r\n    // Stop any current thinking\r\n    this.stopThinking();\r\n\r\n    // Clear cached strategies\r\n    this._strategies.clear();\r\n  }\r\n\r\n  /**\r\n   * Set AI manager options\r\n   */\r\n  setOptions(options: Partial<AIManagerOptions>): void {\r\n    this._options = { ...this._options, ...options };\r\n  }\r\n\r\n  /**\r\n   * Get current options\r\n   */\r\n  getOptions(): AIManagerOptions {\r\n    return { ...this._options };\r\n  }\r\n}\r\n\r\n/**\r\n * Default AI Strategy Manager instance\r\n */\r\nexport const defaultAIManager = new AIStrategyManager({\r\n  defaultDifficulty: AIDifficulty.GREEDY,\r\n  enablePerformanceLogging: true,\r\n  fallbackOnTimeout: true,\r\n});\r\n\r\n/**\r\n * Factory functions for creating AI managers\r\n */\r\nexport const createAIManager = {\r\n  /**\r\n   * Create manager with default settings\r\n   */\r\n  default(): AIStrategyManager {\r\n    return new AIStrategyManager();\r\n  },\r\n\r\n  /**\r\n   * Create manager optimized for fast games\r\n   */\r\n  fast(): AIStrategyManager {\r\n    return new AIStrategyManager({\r\n      defaultDifficulty: AIDifficulty.RANDOM,\r\n      enablePerformanceLogging: false,\r\n      fallbackOnTimeout: true,\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Create manager optimized for competitive play\r\n   */\r\n  competitive(): AIStrategyManager {\r\n    return new AIStrategyManager({\r\n      defaultDifficulty: AIDifficulty.GREEDY,\r\n      enablePerformanceLogging: true,\r\n      fallbackOnTimeout: false, // No fallbacks in competitive mode\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Create manager with custom options\r\n   */\r\n  custom(options: AIManagerOptions): AIStrategyManager {\r\n    return new AIStrategyManager(options);\r\n  },\r\n};","/**\r\n * Super Reversi - Complete Game Implementation with Particle Effects\r\n *\r\n * Full working version with game logic, AI, animations, and particle effects\r\n */\r\n\r\nimport './style.css';\r\nimport { ParticleSystem, type Grade, type SpecialEffect } from './particle-system';\r\nimport { t, setLanguage, applyTranslations, type Language } from './i18n/index';\r\nimport { ComboSystem, type ComboEvent } from './effects/combo-system';\r\nimport { SpecialMoveDetector } from './effects/special-moves';\r\nimport { UIManager } from './ui/ui-manager';\r\nimport { ScreenType, MenuAction } from './types/ui-types';\r\nimport { ModalService } from './ui/modal-service';\r\nimport { defaultAIManager, type AIMoveRequest } from './core/ai/ai-strategy-manager';\r\nimport { AIDifficulty, PlayerColor } from './types/game-types';\r\nimport type { GameState as CoreGameState } from './core/models/GameState';\r\n\r\n// Constants\r\nconst BOARD_SIZE = 8;\r\nconst EMPTY = 0;\r\nconst BLACK = 1;\r\nconst WHITE = 2;\r\nconst DIRECTIONS: [number, number][] = [\r\n  [-1, -1], [-1, 0], [-1, 1],\r\n  [0, -1],           [0, 1],\r\n  [1, -1],  [1, 0],  [1, 1],\r\n];\r\n\r\n// Game State\r\ninterface GameState {\r\n  board: number[];\r\n  currentPlayer: number;\r\n  blackScore: number;\r\n  whiteScore: number;\r\n  gameMode: 'pvp' | 'pvc';\r\n  isGameOver: boolean;\r\n  validMoves: Set<number>;\r\n  moveHistory: Array<{position: number, player: number, flipped: number[]}>;\r\n  aiDifficulty: AIDifficulty;\r\n  consecutivePasses?: number;\r\n}\r\n\r\nclass SuperReversiGame {\r\n  private container: HTMLElement | null = null;\r\n  private currentScreen: 'menu' | 'game' | 'help' | 'settings' | 'difficulty' = 'menu';\r\n  private selectedAI: AIDifficulty | null = null;\r\n  private customSettings: any = null;\r\n  private gameState: GameState | null = null;\r\n  private isProcessingMove = false;\r\n  private aiThinking = false;\r\n  private particleSystem: ParticleSystem;\r\n  private comboSystem: ComboSystem;\r\n  private uiManager: UIManager | null = null;\r\n  private modalService: ModalService | null = null;\r\n\r\n  // 戰鬥UI元素\r\n  private comboDisplay: HTMLElement | null = null;\r\n  private specialMoveDisplay: HTMLElement | null = null;\r\n\r\n  constructor() {\r\n    console.log('🎮 Super Reversi Battle Enhanced - Initializing...');\r\n    this.particleSystem = new ParticleSystem();\r\n    this.comboSystem = new ComboSystem();\r\n\r\n    // 監聽連擊事件\r\n    this.comboSystem.addEventListener((comboEvent: ComboEvent) => {\r\n      this.handleComboEvent(comboEvent);\r\n    });\r\n  }\r\n\r\n  async initialize(container: HTMLElement): Promise<void> {\r\n    this.container = container;\r\n    const settings = this.getSettings();\r\n    const lang = (settings.language as Language) || 'en';\r\n    setLanguage(lang);\r\n    applyTranslations();\r\n    this.setupUI();\r\n\r\n    // Initialize UI Manager and Modal Service - commented out to avoid conflicts with setupUI\r\n    // this.uiManager = new UIManager();\r\n    // this.uiManager.initialize(container);\r\n    // this.modalService = new ModalService(this.uiManager);\r\n\r\n    // Initialize particle system\r\n    this.particleSystem.initialize(container);\r\n\r\n    // Set particle system enabled state based on settings\r\n    this.particleSystem.setEnabled(settings.animations);\r\n\r\n    this.showMenu();\r\n    console.log('✅ Super Reversi ready!');\r\n  }\r\n\r\n  private setupUI(): void {\r\n    if (!this.container) {return;}\r\n\r\n    this.container.innerHTML = `\r\n      <div class=\"super-reversi-app\">\r\n        <div class=\"game-header\" id=\"game-header\">\r\n          <button class=\"header-back-btn\" id=\"header-back-btn\" style=\"display: none;\">⬅️</button>\r\n          <h1 data-i18n=\"app.title\">${t('app.title')}</h1>\r\n        </div>\r\n\r\n        <!-- Shared Health Bar System -->\r\n        <div class=\"shared-health-bar-container\" id=\"shared-health-bar-container\" style=\"display: none;\">\r\n          <!-- Left Player Section (Black) -->\r\n          <div class=\"player-section left\">\r\n            <div class=\"player-info\">\r\n              <div class=\"player-icon\">⚫</div>\r\n              <div class=\"player-name\">${t('game.black')}</div>\r\n            </div>\r\n            <div class=\"piece-count\" id=\"black-count\">2</div>\r\n          </div>\r\n\r\n          <!-- Shared Health Bar -->\r\n          <div class=\"shared-health-bar\">\r\n            <div class=\"health-fill-black\" id=\"black-fill\"></div>\r\n            <div class=\"health-fill-white\" id=\"white-fill\"></div>\r\n            <div class=\"vs-divider\" id=\"vs-divider\">\r\n              <span class=\"vs-text\">VS</span>\r\n              <div class=\"turn-indicator\" id=\"turn-indicator-shared\">\r\n                <span id=\"current-turn-shared\">${t('game.black')}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Right Player Section (White) -->\r\n          <div class=\"player-section right\">\r\n            <div class=\"piece-count\" id=\"white-count\">2</div>\r\n            <div class=\"player-info\">\r\n              <div class=\"player-name\">${t('game.white')}</div>\r\n              <div class=\"player-icon\">⚪</div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Damage Numbers Container -->\r\n          <div class=\"damage-numbers\" id=\"damage-numbers\"></div>\r\n        </div>\r\n        <!-- 戰鬥UI覆蓋層 -->\r\n        <div class=\"battle-overlay\" id=\"battle-overlay\">\r\n          <div id=\"combo-display\" class=\"combo-display hidden\">\r\n            <div class=\"combo-count\"></div>\r\n            <div class=\"combo-text\"></div>\r\n            <div class=\"combo-multiplier\"></div>\r\n          </div>\r\n          <div id=\"special-move-display\" class=\"special-move-display hidden\">\r\n            <div class=\"special-move-title\"></div>\r\n            <div class=\"special-move-subtitle\"></div>\r\n          </div>\r\n        </div>\r\n\r\n        <div id=\"screen-container\" class=\"screen-container\">\r\n          <!-- Screens render here -->\r\n        </div>\r\n\r\n        <!-- Simple Modal -->\r\n        <div id=\"simple-modal\" class=\"modal-backdrop\" style=\"display: none;\">\r\n          <div class=\"dialog modal\">\r\n            <div class=\"dialog-content\">\r\n              <h3 class=\"dialog-title\" id=\"modal-title\" data-i18n=\"modal.confirm.title\">${t('modal.confirm.title')}</h3>\r\n              <p class=\"dialog-message\" id=\"modal-message\" data-i18n=\"messages.quitConfirm\">${t('messages.quitConfirm')}</p>\r\n              <div class=\"dialog-buttons\">\r\n                <button class=\"dialog-btn primary\" id=\"modal-confirm\" data-i18n=\"modal.confirm\">${t('modal.confirm')}</button>\r\n                <button class=\"dialog-btn secondary\" id=\"modal-cancel\" data-i18n=\"modal.cancel\">${t('modal.cancel')}</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n    // 緩存戰鬥UI元素\r\n    this.comboDisplay = this.container.querySelector('#combo-display');\r\n    this.specialMoveDisplay = this.container.querySelector('#special-move-display');\r\n\r\n    // 設置統一返回按鈕事件\r\n    const headerBackBtn = document.getElementById('header-back-btn');\r\n    if (headerBackBtn) {\r\n      headerBackBtn.addEventListener('click', () => {\r\n        if (this.currentScreen === 'game') {\r\n          this.showSimpleConfirm(\r\n            t('messages.quitConfirm'),\r\n            t('modal.quitConfirm.title'),\r\n          ).then(confirmed => {\r\n            if (confirmed) {\r\n              // Clean up AI state before showing menu\r\n              this.cleanupGameState();\r\n              this.showMenu();\r\n            }\r\n          });\r\n        } else {\r\n          this.showMenu();\r\n        }\r\n      });\r\n    }\r\n\r\n    this.addStyles();\r\n\r\n    // Setup header button event listeners\r\n    this.setupHeaderEvents();\r\n  }\r\n\r\n  private setupHeaderEvents(): void {\r\n    // Header settings button\r\n    document.getElementById('header-settings-btn')?.addEventListener('click', () => {\r\n      this.showSettings();\r\n    });\r\n\r\n    // Header back button\r\n    document.getElementById('header-back-btn')?.addEventListener('click', () => {\r\n      this.handleBackButton();\r\n    });\r\n  }\r\n\r\n  private async handleBackButton(): Promise<void> {\r\n    // Handle back button based on current screen\r\n    switch (this.currentScreen) {\r\n      case 'settings':\r\n      case 'help':\r\n        this.showMenu();\r\n        break;\r\n      case 'difficulty':\r\n        this.showMenu();\r\n        break;\r\n      case 'game':\r\n        // Show confirmation before leaving game\r\n        if (this.gameState && !this.gameState.isGameOver) {\r\n          const confirmed = await this.showSimpleConfirm(\r\n            t('messages.leaveGame')\r\n          );\r\n          if (confirmed) {\r\n            // Clean up AI state before showing menu\r\n            this.cleanupGameState();\r\n            this.showMenu();\r\n          }\r\n        } else {\r\n          // Clean up AI state before showing menu\r\n          this.cleanupGameState();\r\n          this.showMenu();\r\n        }\r\n        break;\r\n      default:\r\n        this.showMenu();\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 處理連擊事件\r\n   */\r\n  private handleComboEvent(event: ComboEvent): void {\r\n    console.log(`🔥 戰鬥: 連擊事件 - ${event.type}, 計數: ${event.comboCount}, 玩家: ${event.player}`);\r\n\r\n    if (event.type === 'combo_started' || event.type === 'combo_continued') {\r\n      // 🎆 顯示視覺化連擊UI\r\n      this.showComboUI(event.comboCount, event.player, event.comboType);\r\n\r\n      // 顯示舊版訊息作為備用\r\n      this.showMessage(`🔥 ${event.comboCount} 連擊！`);\r\n\r\n      // 觸發螢幕中央鏈鎖效果\r\n      if (this.container) {\r\n        const rect = this.container.getBoundingClientRect();\r\n        const centerX = rect.width / 2;\r\n        const centerY = rect.height / 2;\r\n        this.particleSystem.createChainEffect(centerX, centerY);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清理遊戲狀態和AI相關標誌\r\n   */\r\n  private cleanupGameState(): void {\r\n    // Reset AI state\r\n    this.aiThinking = false;\r\n    this.isProcessingMove = false;\r\n\r\n    // Stop any ongoing AI thinking\r\n    if (defaultAIManager.isThinking()) {\r\n      console.log('🛑 Stopping AI Manager during cleanup');\r\n      defaultAIManager.stopThinking();\r\n    }\r\n\r\n    // Clear AI status display\r\n    const aiStatus = document.getElementById('ai-status');\r\n    if (aiStatus) {\r\n      aiStatus.textContent = '';\r\n    }\r\n\r\n    // Reset game state if needed\r\n    if (this.gameState) {\r\n      this.gameState = null;\r\n    }\r\n\r\n    console.log('🧹 Game state cleaned up');\r\n  }\r\n\r\n  /**\r\n   * 顯示視覺化連擊UI\r\n   */\r\n  private showComboUI(count: number, player: number, comboType: string): void {\r\n    if (!this.comboDisplay) {return;}\r\n\r\n    console.log(`🔥 UI: 顯示連擊UI - ${count} 連擊 (${comboType}) for player ${player}`);\r\n\r\n    const countElement = this.comboDisplay.querySelector('.combo-count') as HTMLElement;\r\n    const textElement = this.comboDisplay.querySelector('.combo-text') as HTMLElement;\r\n    const multiplierElement = this.comboDisplay.querySelector('.combo-multiplier') as HTMLElement;\r\n\r\n    if (countElement) {countElement.textContent = count.toString();}\r\n    if (textElement) {textElement.textContent = t('combo.counter', { count });}\r\n    // 隱藏倍率顯示\r\n    if (multiplierElement) {multiplierElement.style.display = 'none';}\r\n\r\n    // 根據連擊數設定顏色\r\n    const colors = {\r\n      2: '#90ee90',\r\n      3: '#ffa500',\r\n      4: '#ff6347',\r\n      5: '#ff1493',\r\n      6: '#9932cc',\r\n      7: '#ffd700',\r\n    } as const;\r\n    const color = colors[Math.min(count, 7) as keyof typeof colors] || '#ffd700';\r\n    this.comboDisplay.style.background = `linear-gradient(135deg, ${color}, ${color}aa)`;\r\n\r\n    // 顯示動畫\r\n    this.comboDisplay.classList.remove('hidden');\r\n    this.comboDisplay.classList.add('combo-animation');\r\n\r\n    // 3秒後隱藏\r\n    setTimeout(() => {\r\n      this.comboDisplay?.classList.add('hidden');\r\n      this.comboDisplay?.classList.remove('combo-animation');\r\n    }, 3000);\r\n  }\r\n\r\n  /**\r\n   * 檢測並處理特殊招式\r\n   */\r\n  private detectSpecialMoves(position: number, flippedPositions: number[], currentScore: number, opponentScore: number): void {\r\n    console.log(`🔍 檢測特殊招式: 位置=${position}, 翻轉=${flippedPositions.length}個, 分數差=${currentScore - opponentScore}`);\r\n\r\n    const specialMoves = SpecialMoveDetector.detectSpecialMove(\r\n      position,\r\n      flippedPositions, // 傳遞實際的翻轉位置陣列\r\n      currentScore,\r\n      opponentScore,\r\n      this.gameState?.moveHistory.length || 0,\r\n      60,\r\n    );\r\n\r\n    console.log(`✨ 檢測結果: ${specialMoves.length > 0 ? specialMoves.join(', ') : '無特殊招式'}`);\r\n\r\n    if (specialMoves.length > 0) {\r\n      specialMoves.forEach((moveType, index) => {\r\n        setTimeout(() => {\r\n          const title = t(`special.${moveType}`);\r\n\r\n          // 🎆 顯示視覺化特殊招式UI\r\n          this.showSpecialMoveUI(title, moveType);\r\n\r\n          // 顯示舊版訊息作為備用\r\n          this.showMessage(`⚡ ${title}`);\r\n          console.log(`⚡ 特殊招式: ${title}`);\r\n        }, index * 1000);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 顯示視覺化特殊招式UI\r\n   */\r\n  private showSpecialMoveUI(title: string, moveType: string): void {\r\n    if (!this.specialMoveDisplay) {\r\n      console.warn('⚡ UI: specialMoveDisplay 元素不存在');\r\n      return;\r\n    }\r\n\r\n    console.log(`⚡ UI: 顯示特殊招式UI - ${title} (${moveType})`);\r\n\r\n    const titleElement = this.specialMoveDisplay.querySelector('.special-move-title') as HTMLElement;\r\n    const subtitleElement = this.specialMoveDisplay.querySelector('.special-move-subtitle') as HTMLElement;\r\n\r\n    if (titleElement) {\r\n      titleElement.textContent = title;\r\n      console.log(`⚡ UI: 設置標題文字 - ${title}`);\r\n    } else {\r\n      console.warn('⚡ UI: 找不到 .special-move-title 元素');\r\n    }\r\n\r\n    if (subtitleElement) {\r\n      const subtitle = t(`special.${moveType}.subtitle`);\r\n      subtitleElement.textContent = subtitle;\r\n      console.log(`⚡ UI: 設置副標題文字 - ${subtitle}`);\r\n    } else {\r\n      console.warn('⚡ UI: 找不到 .special-move-subtitle 元素');\r\n    }\r\n\r\n    // 根據招式類型設定不同顏色\r\n    const effectColors = {\r\n      corner_master: '#ffd700',\r\n      mega_flip: '#ff4500',\r\n      phoenix_rise: '#ff69b4',\r\n      domination: '#9932cc',\r\n      time_warp: '#8b00ff',\r\n    };\r\n\r\n    const color = effectColors[moveType as keyof typeof effectColors] || '#ffd700';\r\n    if (titleElement) {\r\n      // 直接設置文字顏色而非背景\r\n      titleElement.style.color = color;\r\n      titleElement.style.textShadow = `\r\n        0 0 20px ${color}88,\r\n        0 0 40px ${color}66,\r\n        0 4px 8px rgba(0, 0, 0, 0.8)\r\n      `;\r\n      console.log(`⚡ UI: 設置顏色 - ${color}`);\r\n    }\r\n\r\n    // 顯示動畫\r\n    this.specialMoveDisplay.classList.remove('hidden');\r\n    this.specialMoveDisplay.classList.add('special-move-animation');\r\n    console.log('⚡ UI: 顯示動畫已啟動');\r\n\r\n    // 2.5秒後隱藏\r\n    setTimeout(() => {\r\n      this.specialMoveDisplay?.classList.add('hidden');\r\n      this.specialMoveDisplay?.classList.remove('special-move-animation');\r\n    }, 2500);\r\n  }\r\n\r\n  private refreshUI(): void {\r\n    switch (this.currentScreen) {\r\n      case 'menu':\r\n        this.showMenu();\r\n        break;\r\n      case 'settings':\r\n        this.showSettings();\r\n        break;\r\n      case 'help':\r\n        this.showHelp();\r\n        break;\r\n      case 'game':\r\n        this.showGameScreen();\r\n        this.updateDisplay();\r\n        break;\r\n    }\r\n  }\r\n\r\n  private addStyles(): void {\r\n    const style = document.createElement('style');\r\n    style.textContent = `\r\n      body, html {\r\n        margin: 0;\r\n        padding: 0;\r\n        height: 100%;\r\n        overflow: hidden;\r\n      }\r\n      \r\n      #app {\r\n        width: 100%;\r\n        min-height: 100vh;\r\n        height: 100dvh;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);\r\n      }\r\n      \r\n      #game-container {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        width: 100%;\r\n        height: 100%;\r\n      }\r\n      \r\n      .super-reversi-app {\r\n        width: 100%;\r\n        height: 100%;\r\n        max-width: 75rem;\r\n        max-height: 56.25rem;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        justify-content: center;\r\n        padding: 0.5rem;\r\n        font-family: 'Segoe UI', Arial, sans-serif;\r\n        box-sizing: border-box;\r\n      }\r\n      \r\n      .game-header {\r\n        width: 100%;\r\n        max-width: 50rem;\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        padding: 1.25rem;\r\n        background: rgba(42, 42, 42, 0.9);\r\n        border-radius: 0.75rem;\r\n        margin-bottom: 1.25rem;\r\n        box-shadow: 0 0.25rem 0.75rem rgba(0,0,0,0.3);\r\n        position: relative;\r\n      }\r\n\r\n      .header-back-btn {\r\n        position: absolute;\r\n        left: 1rem;\r\n        top: 50%;\r\n        transform: translateY(-50%);\r\n        width: 40px;\r\n        height: 40px;\r\n        background: rgba(102, 102, 102, 0.9);\r\n        border: none;\r\n        border-radius: 50%;\r\n        font-size: 20px;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        cursor: pointer;\r\n        transition: all 0.3s ease;\r\n        z-index: 10;\r\n      }\r\n\r\n      .header-back-btn:hover {\r\n        background: rgba(119, 119, 119, 0.9);\r\n        transform: translateY(-50%) scale(1.1);\r\n      }\r\n      \r\n      .game-header h1 {\r\n        color: #00ff7f;\r\n        margin: 0;\r\n        font-size: 1.75rem;\r\n        text-shadow: 0 0 0.625rem rgba(0,255,127,0.5);\r\n      }\r\n      \r\n      /* Shared Health Bar System */\r\n      .shared-health-bar-container {\r\n        width: 100%;\r\n        max-width: 50rem;\r\n        padding: 1rem 1.25rem;\r\n        background: rgba(42, 42, 42, 0.9);\r\n        border-radius: 0.75rem;\r\n        margin-bottom: 1rem;\r\n        box-shadow: 0 0.25rem 0.75rem rgba(0,0,0,0.3);\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        gap: 1rem;\r\n        position: relative;\r\n      }\r\n\r\n      .player-section {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        gap: 0.5rem;\r\n        min-width: 5rem;\r\n      }\r\n\r\n      .player-section.left {\r\n        align-items: flex-start;\r\n      }\r\n\r\n      .player-section.right {\r\n        align-items: flex-end;\r\n      }\r\n\r\n      .player-info {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 0.5rem;\r\n        color: white;\r\n        font-weight: bold;\r\n      }\r\n\r\n      .player-section.right .player-info {\r\n        flex-direction: row-reverse;\r\n      }\r\n\r\n      .player-name {\r\n        font-size: 0.875rem;\r\n        text-shadow: 0 0 0.5rem rgba(255,255,255,0.3);\r\n      }\r\n\r\n      .player-icon {\r\n        font-size: 1.125rem;\r\n        filter: drop-shadow(0 0 0.5rem rgba(255,255,255,0.3));\r\n      }\r\n\r\n      .piece-count {\r\n        font-size: 1.125rem;\r\n        font-weight: bold;\r\n        color: white;\r\n        text-shadow: 0 0 0.5rem rgba(255,255,255,0.5);\r\n        padding: 0.25rem 0.5rem;\r\n        background: rgba(0,0,0,0.3);\r\n        border-radius: 0.375rem;\r\n        min-width: 2rem;\r\n        text-align: center;\r\n      }\r\n\r\n      /* Shared Health Bar */\r\n      .shared-health-bar {\r\n        position: relative;\r\n        flex: 1;\r\n        height: 32px;\r\n        background: rgba(0,0,0,0.6);\r\n        border-radius: 16px;\r\n        border: 2px solid rgba(255,255,255,0.3);\r\n        overflow: hidden;\r\n        box-shadow: inset 0 2px 4px rgba(0,0,0,0.3);\r\n      }\r\n\r\n      .health-fill-black {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        height: 100%;\r\n        width: 50%;\r\n        background: linear-gradient(90deg, #ff4444 0%, #cc0000 100%);\r\n        box-shadow: 0 0 0.5rem rgba(255,68,68,0.6);\r\n        transition: width 0.5s ease, box-shadow 0.3s ease;\r\n        border-radius: 14px 0 0 14px;\r\n      }\r\n\r\n      .health-fill-white {\r\n        position: absolute;\r\n        top: 0;\r\n        right: 0;\r\n        height: 100%;\r\n        width: 50%;\r\n        background: linear-gradient(270deg, #4488ff 0%, #0044cc 100%);\r\n        box-shadow: 0 0 0.5rem rgba(68,136,255,0.6);\r\n        transition: width 0.5s ease, box-shadow 0.3s ease;\r\n        border-radius: 0 14px 14px 0;\r\n      }\r\n\r\n      /* VS Divider */\r\n      .vs-divider {\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        gap: 0.125rem;\r\n        z-index: 10;\r\n        transition: left 0.5s ease;\r\n        background: rgba(42, 42, 42, 0.9);\r\n        padding: 0.25rem 0.5rem;\r\n        border-radius: 0.375rem;\r\n        border: 1px solid rgba(255,255,255,0.2);\r\n      }\r\n\r\n      .vs-text {\r\n        color: #ffd700;\r\n        font-size: 0.75rem;\r\n        font-weight: bold;\r\n        text-shadow: 0 0 0.5rem rgba(255,215,0,0.5);\r\n        line-height: 1;\r\n      }\r\n\r\n      .turn-indicator {\r\n        font-size: 0.625rem;\r\n        color: #ccc;\r\n        text-align: center;\r\n        line-height: 1;\r\n      }\r\n\r\n      .turn-indicator span {\r\n        color: #ffd700;\r\n        font-weight: bold;\r\n      }\r\n\r\n      /* Damage Numbers Animation */\r\n      .damage-numbers {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        pointer-events: none;\r\n        z-index: 10;\r\n      }\r\n\r\n      .damage-number {\r\n        position: absolute;\r\n        font-weight: bold;\r\n        font-size: 1.25rem;\r\n        color: #fff;\r\n        text-shadow: 2px 2px 4px rgba(0,0,0,0.8);\r\n        animation: damageFloat 1s ease-out forwards;\r\n        pointer-events: none;\r\n      }\r\n\r\n      .damage-number.positive {\r\n        color: #00ff7f;\r\n      }\r\n\r\n      .damage-number.negative {\r\n        color: #ff4444;\r\n      }\r\n\r\n      @keyframes damageFloat {\r\n        0% {\r\n          opacity: 1;\r\n          transform: translateY(0) scale(1);\r\n        }\r\n        50% {\r\n          opacity: 1;\r\n          transform: translateY(-20px) scale(1.2);\r\n        }\r\n        100% {\r\n          opacity: 0;\r\n          transform: translateY(-40px) scale(0.8);\r\n        }\r\n      }\r\n\r\n      /* Special Effects */\r\n      .health-bar.critical {\r\n        animation: criticalFlash 0.5s ease-in-out infinite alternate;\r\n      }\r\n\r\n      @keyframes criticalFlash {\r\n        0% {\r\n          box-shadow: 0 0 0.75rem rgba(255,68,68,0.3), inset 0 2px 4px rgba(0,0,0,0.3);\r\n        }\r\n        100% {\r\n          box-shadow: 0 0 1.5rem rgba(255,68,68,0.8), inset 0 2px 4px rgba(0,0,0,0.3);\r\n        }\r\n      }\r\n\r\n      .health-bar.shake {\r\n        animation: healthShake 0.3s ease-in-out;\r\n      }\r\n\r\n      @keyframes healthShake {\r\n        0%, 100% { transform: translateX(0); }\r\n        25% { transform: translateX(-3px); }\r\n        75% { transform: translateX(3px); }\r\n      }\r\n\r\n      /* Special Effects for Shared Health Bar */\r\n      .health-fill-black.critical {\r\n        animation: criticalPulse 1s ease-in-out infinite alternate;\r\n      }\r\n\r\n      .health-fill-white.critical {\r\n        animation: criticalPulse 1s ease-in-out infinite alternate;\r\n      }\r\n\r\n      @keyframes criticalPulse {\r\n        0% { opacity: 0.8; }\r\n        100% { opacity: 1; }\r\n      }\r\n\r\n      .health-fill-black.dominant {\r\n        box-shadow: 0 0 1rem rgba(255,68,68,0.8);\r\n      }\r\n\r\n      .health-fill-white.dominant {\r\n        box-shadow: 0 0 1rem rgba(68,136,255,0.8);\r\n      }\r\n\r\n      .shared-health-bar.shake {\r\n        animation: healthShake 0.3s ease-in-out;\r\n      }\r\n\r\n      .shared-health-bar.balanced {\r\n        box-shadow: 0 0 0.5rem rgba(255,215,0,0.6);\r\n        animation: balancedBreathing 2s ease-in-out infinite alternate;\r\n      }\r\n\r\n      .shared-health-bar.dramatic-shift {\r\n        animation: dramaticShift 0.5s ease-in-out;\r\n      }\r\n\r\n      .health-fill-black.pulsing,\r\n      .health-fill-white.pulsing {\r\n        animation: dominantPulse 1s ease-in-out infinite alternate;\r\n      }\r\n\r\n      @keyframes balancedBreathing {\r\n        0% { box-shadow: 0 0 0.5rem rgba(255,215,0,0.6); }\r\n        100% { box-shadow: 0 0 1rem rgba(255,215,0,0.8); }\r\n      }\r\n\r\n      @keyframes dramaticShift {\r\n        0% { transform: scale(1); }\r\n        50% { transform: scale(1.02); }\r\n        100% { transform: scale(1); }\r\n      }\r\n\r\n      @keyframes dominantPulse {\r\n        0% { opacity: 0.9; }\r\n        100% { opacity: 1; }\r\n      }\r\n\r\n      /* Responsive Design for Shared Health Bar */\r\n      @media (max-width: 768px) {\r\n        .shared-health-bar-container {\r\n          width: 100%;\r\n          max-width: 100%;\r\n          margin: 0 0 0.5rem;\r\n          padding: 0 0.5rem;\r\n          z-index: 100;\r\n        }\r\n      }\r\n\r\n      @media (max-width: 480px) {\r\n        .shared-health-bar-container {\r\n          width: 100%;\r\n          max-width: 100%;\r\n          margin: 0 0 0.25rem;\r\n          padding: 0 0.25rem;\r\n          z-index: 100;\r\n        }\r\n      }\r\n\r\n      @media (min-width: 1200px) {\r\n        .shared-health-bar {\r\n          height: 36px;\r\n        }\r\n\r\n        .player-name {\r\n          font-size: 1rem;\r\n        }\r\n\r\n        .piece-count {\r\n          font-size: 1.25rem;\r\n        }\r\n\r\n        .vs-text {\r\n          font-size: 0.875rem;\r\n        }\r\n\r\n        .turn-indicator {\r\n          font-size: 0.75rem;\r\n        }\r\n      }\r\n\r\n      .header-right {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 1rem;\r\n      }\r\n\r\n      .language-select {\r\n        display: block;\r\n        margin: 0 auto;\r\n        padding: 0.5rem 1rem;\r\n        font-size: 1rem;\r\n        text-align: center;\r\n        border-radius: 0.5rem;\r\n        border: 1px solid #666;\r\n        background: #333;\r\n        color: white;\r\n      }\r\n\r\n      .screen-container {\r\n        width: 100%;\r\n        max-width: min(90vw, 56.25rem);\r\n        height: auto;\r\n        flex: 1;\r\n        background: rgba(26, 26, 26, 0.95);\r\n        border-radius: 0.75rem;\r\n        padding: 1rem;\r\n        box-shadow: 0 0.5rem 1.5rem rgba(0,0,0,0.4);\r\n        box-sizing: border-box;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n        overflow: hidden;\r\n      }\r\n      \r\n      .menu-screen {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        justify-content: center;\r\n        gap: 1.25rem;\r\n        padding: 2.5rem;\r\n        animation: fadeIn 0.5s ease;\r\n        height: 100%;\r\n        width: 100%;\r\n        max-width: 600px;\r\n        margin: 0 auto;\r\n      }\r\n      \r\n      @keyframes fadeIn {\r\n        from { opacity: 0; transform: translateY(1.25rem); }\r\n        to { opacity: 1; transform: translateY(0); }\r\n      }\r\n      \r\n      .menu-title {\r\n        font-size: 2.25rem;\r\n        color: #00ff7f;\r\n        margin-bottom: 1.25rem;\r\n        text-align: center;\r\n        text-shadow: 0 0 1.25rem rgba(0,255,127,0.5);\r\n      }\r\n      \r\n      .menu-button {\r\n        display: block;\r\n        width: 15.625rem;\r\n        margin: 1rem auto;\r\n        padding: 1.125rem 1.875rem;\r\n        font-size: 1.125rem;\r\n        font-weight: bold;\r\n        background: linear-gradient(135deg, #00ff7f, #00cc65);\r\n        color: #1a1a1a;\r\n        border: none;\r\n        border-radius: 0.625rem;\r\n        cursor: pointer;\r\n        transition: all 0.3s ease;\r\n        box-shadow: 0 0.25rem 0.75rem rgba(0,255,127,0.3);\r\n      }\r\n      \r\n      .menu-button:hover {\r\n        transform: translateY(-0.125rem);\r\n        box-shadow: 0 0.375rem 1.25rem rgba(0,255,127,0.5);\r\n      }\r\n      \r\n      .menu-button:active {\r\n        transform: translateY(0);\r\n      }\r\n      \r\n      .difficulty-selector {\r\n        display: flex;\r\n        gap: 0.625rem;\r\n        margin: 1.25rem 0;\r\n      }\r\n      \r\n      .difficulty-button {\r\n        padding: 0.625rem 1.25rem;\r\n        background: #444;\r\n        color: white;\r\n        border: 0.125rem solid transparent;\r\n        border-radius: 0.375rem;\r\n        cursor: pointer;\r\n        transition: all 0.3s;\r\n      }\r\n      \r\n      .difficulty-button.active {\r\n        background: #00ff7f;\r\n        color: #1a1a1a;\r\n        border-color: #00ff7f;\r\n      }\r\n      \r\n      .game-board {\r\n        display: grid;\r\n        grid-template-columns: repeat(8, 1fr);\r\n        grid-template-rows: repeat(8, 1fr);\r\n        gap: 0.125rem;\r\n        background: #1a3d1a;\r\n        padding: 0.625rem;\r\n        border-radius: 0.75rem;\r\n        margin: 0.625rem auto;\r\n        box-shadow: inset 0 0 1.25rem rgba(0,0,0,0.5);\r\n        flex-shrink: 0;\r\n      }\r\n      \r\n      @media (max-height: 43.75rem) {\r\n        .game-board {\r\n          width: min(21.875rem, 60vh);\r\n          height: min(21.875rem, 60vh);\r\n        }\r\n      }\r\n      \r\n      .board-cell {\r\n        background: #2d4a2d;\r\n        border: 0.0625rem solid #1a3d1a;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        cursor: pointer;\r\n        transition: all 0.2s ease;\r\n        position: relative;\r\n      }\r\n      \r\n      .board-cell:hover {\r\n        background: #3a5a3a;\r\n      }\r\n      \r\n      .board-cell.valid-move {\r\n        background: #4a6a4a;\r\n        box-shadow: inset 0 0 0.625rem rgba(0,255,127,0.3);\r\n      }\r\n      \r\n      .board-cell.valid-move::after {\r\n        content: '•';\r\n        color: rgba(0,255,127,0.5);\r\n        font-size: 1.5rem;\r\n        position: absolute;\r\n      }\r\n      \r\n      .board-cell.last-move {\r\n        box-shadow: inset 0 0 0.9375rem rgba(255,215,0,0.5);\r\n      }\r\n\r\n      .mobility-indicator {\r\n        position: absolute;\r\n        top: 0.125rem;\r\n        right: 0.125rem;\r\n        background: rgba(0, 0, 0, 0.9);\r\n        color: white;\r\n        font-size: 0.55rem;\r\n        font-weight: bold;\r\n        padding: 0.125rem 0.2rem;\r\n        border-radius: 0.25rem;\r\n        min-width: 1.2rem;\r\n        text-align: center;\r\n        z-index: 10;\r\n        border: 0.125rem solid;\r\n        font-family: 'Courier New', monospace;\r\n      }\r\n\r\n      .mobility-indicator.mobility-positive {\r\n        border-color: #00ff7f;\r\n        background: rgba(0, 0, 0, 0.85);\r\n        color: #00ff7f;\r\n        box-shadow: 0 0 0.3rem rgba(0, 255, 127, 0.5);\r\n      }\r\n\r\n      .mobility-indicator.mobility-negative {\r\n        border-color: #ff4444;\r\n        background: rgba(0, 0, 0, 0.85);\r\n        color: #ff4444;\r\n        box-shadow: 0 0 0.3rem rgba(255, 68, 68, 0.5);\r\n      }\r\n\r\n      .mobility-indicator.mobility-neutral {\r\n        border-color: #ffaa00;\r\n        background: rgba(0, 0, 0, 0.85);\r\n        color: #ffaa00;\r\n        box-shadow: 0 0 0.3rem rgba(255, 170, 0, 0.5);\r\n      }\r\n      \r\n      .piece {\r\n        width: 85%;\r\n        height: 85%;\r\n        border-radius: 50%;\r\n        transition: all 0.3s ease;\r\n        box-shadow: 0 0.125rem 0.5rem rgba(0,0,0,0.4);\r\n      }\r\n      \r\n      .piece-black {\r\n        background: radial-gradient(circle at 30% 30%, #444, #000);\r\n        border: 0.125rem solid #222;\r\n      }\r\n      \r\n      .piece-white {\r\n        background: radial-gradient(circle at 30% 30%, #fff, #ddd);\r\n        border: 0.125rem solid #ccc;\r\n      }\r\n      \r\n      @keyframes flipPiece {\r\n        0% { transform: rotateY(0deg) scale(1); }\r\n        50% { transform: rotateY(90deg) scale(0.8); }\r\n        100% { transform: rotateY(180deg) scale(1); }\r\n      }\r\n      \r\n      .piece.flipping {\r\n        animation: flipPiece 0.5s ease-in-out;\r\n      }\r\n      \r\n      @keyframes placePiece {\r\n        0% { transform: scale(0) rotate(0deg); opacity: 0; }\r\n        50% { transform: scale(1.2) rotate(180deg); opacity: 1; }\r\n        100% { transform: scale(1) rotate(360deg); opacity: 1; }\r\n      }\r\n      \r\n      .piece.placing {\r\n        animation: placePiece 0.4s ease-out;\r\n      }\r\n      \r\n      .game-screen {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        justify-content: flex-start;\r\n        width: 100%;\r\n        height: 100%;\r\n        overflow: hidden;\r\n        gap: 0.625rem;\r\n      }\r\n      \r\n      .game-controls {\r\n        width: 100%;\r\n        display: flex;\r\n        justify-content: flex-start;\r\n        margin-bottom: 1.25rem;\r\n      }\r\n      \r\n      .back-button {\r\n        padding: 0.75rem 1.5rem;\r\n        background: #666;\r\n        color: white;\r\n        border: none;\r\n        border-radius: 0.375rem;\r\n        cursor: pointer;\r\n        font-size: 1rem;\r\n        transition: background 0.3s, transform 0.3s;\r\n        white-space: nowrap; /* Prevent text wrap */\r\n      }\r\n      \r\n      .back-button:hover {\r\n        background: #777;\r\n        transform: translateX(-0.3125rem);\r\n      }\r\n      \r\n      .game-info {\r\n        text-align: center;\r\n        color: #ccc;\r\n        font-size: 0.875rem;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n        gap: 0.3125rem;\r\n        flex-shrink: 0;\r\n      }\r\n\r\n      .game-info-compact {\r\n        text-align: center;\r\n        color: #ccc;\r\n        font-size: 0.75rem;\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: 0.5rem;\r\n        margin-bottom: 1rem;\r\n      }\r\n      \r\n      #ai-status {\r\n        height: 1.25rem;\r\n        font-size: 0.875rem;\r\n      }\r\n      \r\n      .game-over-modal {\r\n        position: fixed;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n        background: rgba(42, 42, 42, 0.98);\r\n        padding: 2.5rem;\r\n        border-radius: 1.25rem;\r\n        text-align: center;\r\n        box-shadow: 0 0.625rem 2.5rem rgba(0,0,0,0.5);\r\n        z-index: 1000;\r\n        animation: modalAppear 0.3s ease;\r\n      }\r\n      \r\n      @keyframes modalAppear {\r\n        from { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }\r\n        to { opacity: 1; transform: translate(-50%, -50%) scale(1); }\r\n      }\r\n      \r\n      .game-over-title {\r\n        font-size: 2rem;\r\n        color: #00ff7f;\r\n        margin-bottom: 1.25rem;\r\n      }\r\n      \r\n      .final-scores {\r\n        font-size: 1.5rem;\r\n        color: white;\r\n        margin: 1.25rem 0;\r\n      }\r\n      \r\n      .modal-buttons {\r\n        display: flex;\r\n        gap: 1.25rem;\r\n        justify-content: center;\r\n        margin-top: 1.875rem;\r\n      }\r\n      \r\n      .ai-thinking {\r\n        display: inline-block;\r\n        color: #ffd700;\r\n        font-style: italic;\r\n        animation: pulse 1s infinite;\r\n      }\r\n      \r\n      @keyframes pulse {\r\n        0%, 100% { opacity: 1; }\r\n        50% { opacity: 0.5; }\r\n      }\r\n      \r\n      .settings-screen {\r\n        color: white;\r\n        flex: 1;\r\n        overflow-y: auto;\r\n        padding-right: 0.625rem;\r\n        width: 100%;\r\n        max-width: 600px;\r\n        margin: 0 auto;\r\n      }\r\n      \r\n      .settings-group {\r\n        margin: 1.5625rem 0;\r\n        text-align: center;\r\n      }\r\n      \r\n      .settings-group h3 {\r\n        color: #00ff7f;\r\n        margin-bottom: 0.9375rem;\r\n      }\r\n\r\n      .settings-group label {\r\n        display: block;\r\n        text-align: center;\r\n        margin: 0.5rem 0;\r\n        font-size: 1.25rem;\r\n      }\r\n      \r\n      .settings-screen label {\r\n        display: block;\r\n        margin: 0.625rem 0;\r\n        font-size: 1rem;\r\n        cursor: pointer;\r\n      }\r\n      \r\n      .settings-screen input[type=\"checkbox\"] {\r\n        margin-right: 0.625rem;\r\n        cursor: pointer;\r\n      }\r\n      \r\n      .help-screen {\r\n        color: #ccc;\r\n        line-height: 1.6;\r\n        flex: 1;\r\n        overflow-y: auto; /* Allow scrolling if content is too long */\r\n        padding-right: 0.625rem;\r\n        padding-left: 1rem;\r\n        width: 100%;\r\n        max-width: 600px;\r\n        margin: 0 auto;\r\n      }\r\n      \r\n      .help-screen h2 {\r\n        color: #00ff7f;\r\n        margin-bottom: 0.9375rem;\r\n        font-size: 1.5rem;\r\n      }\r\n      \r\n      .help-screen h3 {\r\n        color: #ffd700;\r\n        margin-top: 0.9375rem;\r\n        margin-bottom: 0.5rem;\r\n        font-size: 1.125rem;\r\n      }\r\n      \r\n      .help-screen ul {\r\n        display: block;\r\n        text-align: left;\r\n        margin: 0 0 0.625rem;\r\n        padding-left: 1.5rem;\r\n      }\r\n      \r\n      .help-screen li {\r\n        margin: 0.3125rem 0;\r\n        font-size: 0.875rem;\r\n      }\r\n      \r\n      .help-screen p {\r\n        margin: 0.5rem 0;\r\n        font-size: 0.875rem;\r\n      }\r\n      \r\n      /* Custom scrollbar for help screen */\r\n      .help-screen::-webkit-scrollbar {\r\n        width: 0.5rem;\r\n      }\r\n      \r\n      .help-screen::-webkit-scrollbar-track {\r\n        background: rgba(255, 255, 255, 0.1);\r\n        border-radius: 0.25rem;\r\n      }\r\n      \r\n      .help-screen::-webkit-scrollbar-thumb {\r\n        background: rgba(0, 255, 127, 0.5);\r\n        border-radius: 0.25rem;\r\n      }\r\n      \r\n      .help-screen::-webkit-scrollbar-thumb:hover {\r\n        background: rgba(0, 255, 127, 0.7);\r\n      }\r\n\r\n      /* ========== 戰鬥UI樣式 ========== */\r\n\r\n      .battle-overlay {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        pointer-events: none;\r\n        z-index: 9999;\r\n        font-family: 'Orbitron', 'Arial', sans-serif;\r\n      }\r\n\r\n      .combo-display {\r\n        position: absolute;\r\n        top: 80px;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n        padding: 20px 40px;\r\n        border-radius: 25px;\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 20px;\r\n        background: linear-gradient(135deg, #ff6b6b, #ff8e8e);\r\n        box-shadow: 0 0 60px rgba(255, 107, 107, 0.9), 0 10px 40px rgba(0, 0, 0, 0.7);\r\n        transition: all 0.3s ease;\r\n      }\r\n\r\n      .combo-display.hidden {\r\n        display: none;\r\n      }\r\n\r\n      .combo-display.combo-animation {\r\n        animation: combo-bounce 0.6s ease;\r\n      }\r\n\r\n      .combo-count {\r\n        font-size: 72px;\r\n        font-weight: bold;\r\n        color: #fff;\r\n        text-shadow: 0 4px 20px rgba(0, 0, 0, 0.8), 0 0 30px currentColor;\r\n      }\r\n\r\n      .combo-text {\r\n        font-size: 32px;\r\n        color: #fff;\r\n        font-weight: bold;\r\n        text-shadow: 0 4px 20px rgba(0, 0, 0, 0.8), 0 0 30px currentColor;\r\n      }\r\n\r\n      .combo-multiplier {\r\n        font-size: 28px;\r\n        color: #ffeb3b;\r\n        font-weight: bold;\r\n        background: rgba(0, 0, 0, 0.3);\r\n        padding: 8px 16px;\r\n        border-radius: 20px;\r\n        text-shadow: 0 4px 20px rgba(0, 0, 0, 0.8), 0 0 30px currentColor;\r\n      }\r\n\r\n      .special-move-display {\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n        text-align: center;\r\n        z-index: 10000;\r\n      }\r\n\r\n      .special-move-display.hidden {\r\n        display: none;\r\n      }\r\n\r\n      .special-move-display.special-move-animation {\r\n        animation: special-move-intro 1.2s ease;\r\n      }\r\n\r\n      .special-move-title {\r\n        font-size: 64px;\r\n        font-weight: bold;\r\n        color: #ffd700;\r\n        text-shadow:\r\n          0 0 20px rgba(255, 215, 0, 0.8),\r\n          0 0 40px rgba(255, 215, 0, 0.6),\r\n          0 4px 8px rgba(0, 0, 0, 0.8);\r\n        margin-bottom: 10px;\r\n        letter-spacing: 2px;\r\n        animation: special-title-glow 2s ease-in-out infinite alternate;\r\n      }\r\n\r\n      .special-move-subtitle {\r\n        font-size: 28px;\r\n        color: #ffffff;\r\n        text-shadow:\r\n          0 0 15px rgba(255, 255, 255, 0.8),\r\n          0 4px 8px rgba(0, 0, 0, 0.8);\r\n        letter-spacing: 1px;\r\n        opacity: 0.9;\r\n      }\r\n\r\n      /* 戰鬥動畫定義 */\r\n      @keyframes combo-bounce {\r\n        0% {\r\n          transform: translateX(-50%) scale(0.8);\r\n          opacity: 0;\r\n        }\r\n        50% {\r\n          transform: translateX(-50%) scale(1.1);\r\n        }\r\n        100% {\r\n          transform: translateX(-50%) scale(1);\r\n          opacity: 1;\r\n        }\r\n      }\r\n\r\n      @keyframes special-move-intro {\r\n        0% {\r\n          transform: translate(-50%, -50%) scale(0);\r\n          opacity: 0;\r\n        }\r\n        50% {\r\n          transform: translate(-50%, -50%) scale(1.2);\r\n        }\r\n        100% {\r\n          transform: translate(-50%, -50%) scale(1);\r\n          opacity: 1;\r\n        }\r\n      }\r\n\r\n      @keyframes special-title-glow {\r\n        0% {\r\n          text-shadow:\r\n            0 0 20px rgba(255, 215, 0, 0.8),\r\n            0 0 40px rgba(255, 215, 0, 0.6),\r\n            0 4px 8px rgba(0, 0, 0, 0.8);\r\n        }\r\n        100% {\r\n          text-shadow:\r\n            0 0 30px rgba(255, 215, 0, 1.0),\r\n            0 0 60px rgba(255, 215, 0, 0.8),\r\n            0 4px 8px rgba(0, 0, 0, 0.8);\r\n        }\r\n      }\r\n\r\n      /* 手機版響應式設計 */\r\n      @media (max-width: 768px) {\r\n        .super-reversi-app {\r\n          padding: 0 !important;\r\n          overflow-y: auto;\r\n          overflow-x: hidden;\r\n        }\r\n\r\n        .screen-container {\r\n          max-width: 100% !important;\r\n          padding: 0.5rem !important;\r\n          margin-top: 0.5rem !important;\r\n        }\r\n\r\n        .game-board {\r\n          width: calc(100vw - 1rem) !important;\r\n          height: calc(100vw - 1rem) !important;\r\n          max-height: calc(100vh - 14rem) !important;\r\n          padding: 2px !important;\r\n          margin: 0.5rem auto 0 auto !important;\r\n        }\r\n\r\n        .header-back-btn {\r\n          width: 35px !important;\r\n          height: 35px !important;\r\n          font-size: 18px !important;\r\n        }\r\n      }\r\n\r\n      @media (max-width: 480px) {\r\n        .screen-container {\r\n          padding: 0.25rem !important;\r\n          margin-top: 0.25rem !important;\r\n        }\r\n\r\n        .game-board {\r\n          width: calc(100vw - 0.5rem) !important;\r\n          height: calc(100vw - 0.5rem) !important;\r\n          max-height: calc(100vh - 12rem) !important;\r\n          margin: 0.5rem auto 0 auto !important;\r\n        }\r\n\r\n        .header-back-btn {\r\n          width: 30px !important;\r\n          height: 30px !important;\r\n          font-size: 16px !important;\r\n        }\r\n      }\r\n    `;\r\n    document.head.appendChild(style);\r\n  }\r\n\r\n  // ===== MENU SCREENS =====\r\n\r\n  private showMenu(): void {\r\n    const screenContainer = document.getElementById('screen-container');\r\n    if (!screenContainer) {return;}\r\n\r\n    // Clean up any ongoing game state and AI processes\r\n    this.cleanupGameState();\r\n\r\n    this.currentScreen = 'menu';\r\n    const header = document.getElementById('game-header');\r\n    const headerBackBtn = document.getElementById('header-back-btn');\r\n    const sharedHealthBarContainer = document.getElementById('shared-health-bar-container');\r\n\r\n    if (header) {header.style.display = 'flex';}\r\n    if (headerBackBtn) {headerBackBtn.style.display = 'none';}\r\n    if (sharedHealthBarContainer) {sharedHealthBarContainer.style.display = 'none';}\r\n\r\n    // 清理遊戲狀態顯示\r\n    const blackScore = document.getElementById('black-score');\r\n    const whiteScore = document.getElementById('white-score');\r\n    const currentTurn = document.getElementById('current-turn');\r\n    if (blackScore) {blackScore.textContent = '';}\r\n    if (whiteScore) {whiteScore.textContent = '';}\r\n    if (currentTurn) {currentTurn.textContent = '';}\r\n\r\n    // 重置遊戲狀態\r\n    this.gameState = null;\r\n\r\n    screenContainer.innerHTML = `\r\n      <div class=\"menu-screen\">\r\n        <h2 class=\"menu-title\">${t('menu.chooseMode')}</h2>\r\n        <button class=\"menu-button\" id=\"pvp-btn\">👥 ${t('menu.pvp')}</button>\r\n        <button class=\"menu-button\" id=\"pvc-btn\">🤖 ${t('menu.pvc')}</button>\r\n        <button class=\"menu-button\" id=\"menu-settings-btn\">⚙️ ${t('menu.settings')}</button>\r\n        <button class=\"menu-button\" id=\"help-btn\">❓ ${t('menu.help')}</button>\r\n      </div>\r\n    `;\r\n\r\n    document.getElementById('pvp-btn')?.addEventListener('click', () => {\r\n      this.startNewGame('pvp');\r\n    });\r\n\r\n    document.getElementById('pvc-btn')?.addEventListener('click', () => {\r\n      this.showAIDifficultyMenu();\r\n    });\r\n\r\n    document.getElementById('menu-settings-btn')?.addEventListener('click', () => {\r\n      this.showSettings();\r\n    });\r\n\r\n    document.getElementById('help-btn')?.addEventListener('click', () => {\r\n      this.showHelp();\r\n    });\r\n  }\r\n\r\n  private showAIDifficultyMenu(): void {\r\n    const screenContainer = document.getElementById('screen-container');\r\n    if (!screenContainer) {return;}\r\n\r\n    this.currentScreen = 'difficulty';\r\n    const headerBackBtn = document.getElementById('header-back-btn');\r\n    if (headerBackBtn) {headerBackBtn.style.display = 'flex';}\r\n\r\n    screenContainer.innerHTML = `\r\n      <div class=\"ai-selection-screen\">\r\n        <h2 class=\"menu-title\">${t('menu.selectDifficulty')}</h2>\r\n\r\n        <!-- AI Level Tabs -->\r\n        <div class=\"ai-level-tabs\">\r\n          <button class=\"ai-level-tab active\" data-level=\"beginner\">\r\n            <span class=\"level-icon\">🌱</span>\r\n            <span class=\"level-name\">初學者</span>\r\n          </button>\r\n          <button class=\"ai-level-tab\" data-level=\"intermediate\">\r\n            <span class=\"level-icon\">📚</span>\r\n            <span class=\"level-name\">中級玩家</span>\r\n          </button>\r\n          <button class=\"ai-level-tab\" data-level=\"advanced\">\r\n            <span class=\"level-icon\">⚔️</span>\r\n            <span class=\"level-name\">高級玩家</span>\r\n          </button>\r\n          <button class=\"ai-level-tab\" data-level=\"professional\">\r\n            <span class=\"level-icon\">🏆</span>\r\n            <span class=\"level-name\">職業級別</span>\r\n          </button>\r\n        </div>\r\n\r\n        <!-- AI Options Grid -->\r\n        <div class=\"ai-options-grid\" id=\"ai-options-grid\">\r\n          <!-- Dynamic AI options will be loaded here -->\r\n        </div>\r\n\r\n        <!-- AI Info Box -->\r\n        <div class=\"ai-info-box\" id=\"ai-info-box\">\r\n          <div class=\"ai-info-header\">\r\n            <h3 id=\"ai-info-name\">隨機AI</h3>\r\n            <div class=\"ai-strength\" id=\"ai-strength\">★☆☆☆☆</div>\r\n          </div>\r\n          <p class=\"ai-description\" id=\"ai-description\">完全隨機選擇合法移動</p>\r\n          <div class=\"ai-details\">\r\n            <div class=\"ai-detail\">\r\n              <span class=\"detail-label\">思考時間:</span>\r\n              <span class=\"detail-value\" id=\"ai-thinking-time\">0.1秒</span>\r\n            </div>\r\n            <div class=\"ai-detail\">\r\n              <span class=\"detail-label\">搜索深度:</span>\r\n              <span class=\"detail-value\" id=\"ai-search-depth\">0</span>\r\n            </div>\r\n            <div class=\"ai-features\" id=\"ai-features\">\r\n              <span class=\"feature\">即時響應</span>\r\n              <span class=\"feature\">完全隨機</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Custom Settings Panel (hidden by default) -->\r\n        <div class=\"ai-custom-settings\" id=\"ai-custom-settings\" style=\"display: none;\">\r\n          <h4>自定義AI設定</h4>\r\n          <div class=\"custom-setting\">\r\n            <label>思考時間 (秒):</label>\r\n            <input type=\"range\" id=\"custom-thinking-time\" min=\"1\" max=\"30\" value=\"5\" step=\"0.5\">\r\n            <span id=\"thinking-time-value\">5.0</span>\r\n          </div>\r\n          <div class=\"custom-setting\">\r\n            <label>搜索深度:</label>\r\n            <input type=\"range\" id=\"custom-search-depth\" min=\"1\" max=\"12\" value=\"6\">\r\n            <span id=\"search-depth-value\">6</span>\r\n          </div>\r\n          <div class=\"custom-setting\">\r\n            <label>\r\n              <input type=\"checkbox\" id=\"custom-opening-book\" checked>\r\n              使用開局庫\r\n            </label>\r\n          </div>\r\n          <div class=\"custom-setting\">\r\n            <label>\r\n              <input type=\"checkbox\" id=\"custom-endgame-solver\" checked>\r\n              終局求解器\r\n            </label>\r\n          </div>\r\n          <div class=\"custom-setting\">\r\n            <label>AI性格:</label>\r\n            <select id=\"custom-personality\">\r\n              <option value=\"balanced\">均衡型</option>\r\n              <option value=\"aggressive\">進攻型</option>\r\n              <option value=\"defensive\">防守型</option>\r\n              <option value=\"positional\">位置型</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Start Game Button -->\r\n        <button class=\"menu-button\" id=\"start-ai-btn\">${t('menu.startGame')}</button>\r\n      </div>\r\n    `;\r\n\r\n    // Initialize AI selection system\r\n    this.initializeAISelection();\r\n  }\r\n\r\n  private initializeAISelection(): void {\r\n    // Import AI configuration types\r\n    import('./types/ai-config-types').then(({ AI_OPTIONS_DATABASE, getDefaultAIForLevel }) => {\r\n      this.setupAISelectionHandlers(AI_OPTIONS_DATABASE, getDefaultAIForLevel);\r\n    });\r\n  }\r\n\r\n  private setupAISelectionHandlers(aiDatabase: any, getDefaultAIForLevel: any): void {\r\n    let currentLevel: string = 'beginner';\r\n\r\n    // Tab switching logic\r\n    const levelTabs = document.querySelectorAll('.ai-level-tab');\r\n    levelTabs.forEach(tab => {\r\n      tab.addEventListener('click', () => {\r\n        // Update active tab\r\n        levelTabs.forEach(t => t.classList.remove('active'));\r\n        tab.classList.add('active');\r\n\r\n        // Get selected level\r\n        currentLevel = tab.getAttribute('data-level') || 'beginner';\r\n\r\n        // Load AI options for this level\r\n        this.loadAIOptions(currentLevel, aiDatabase);\r\n\r\n        // Select default AI for this level\r\n        const defaultAI = getDefaultAIForLevel(currentLevel);\r\n        if (defaultAI) {\r\n          this.selectedAI = defaultAI.id;\r\n          this.updateAIInfo(defaultAI);\r\n        }\r\n      });\r\n    });\r\n\r\n    // Initialize with beginner level\r\n    this.loadAIOptions('beginner', aiDatabase);\r\n    const defaultAI = getDefaultAIForLevel('beginner');\r\n    if (defaultAI) {\r\n      this.selectedAI = defaultAI.id;\r\n      this.updateAIInfo(defaultAI);\r\n    }\r\n\r\n    // Start game button\r\n    document.getElementById('start-ai-btn')?.addEventListener('click', () => {\r\n      if (this.selectedAI) {\r\n        // If custom AI, apply custom settings\r\n        if (this.selectedAI === AIDifficulty.CUSTOM && this.customSettings) {\r\n          defaultAIManager.updateCustomAIConfig(this.customSettings);\r\n        }\r\n        this.startNewGame('pvc', this.selectedAI);\r\n      }\r\n    });\r\n\r\n    // Custom settings panel\r\n    this.initializeCustomSettings();\r\n  }\r\n\r\n  private loadAIOptions(level: string, aiDatabase: any): void {\r\n    const optionsGrid = document.getElementById('ai-options-grid');\r\n    if (!optionsGrid) return;\r\n\r\n    const aiOptions = aiDatabase[level] || [];\r\n\r\n    optionsGrid.innerHTML = aiOptions.map((option: any) => `\r\n      <div class=\"ai-option-card\" data-ai-id=\"${option.id}\">\r\n        <div class=\"ai-card-header\">\r\n          <h4>${option.name}</h4>\r\n          <div class=\"ai-strength\">${this.getStrengthStars(option.strength)}</div>\r\n        </div>\r\n        <p class=\"ai-card-description\">${option.description}</p>\r\n        <div class=\"ai-card-features\">\r\n          ${option.features.map((feature: string) => `<span class=\"feature\">${feature}</span>`).join('')}\r\n        </div>\r\n      </div>\r\n    `).join('');\r\n\r\n    // Add click handlers for AI options\r\n    const optionCards = optionsGrid.querySelectorAll('.ai-option-card');\r\n    optionCards.forEach(card => {\r\n      card.addEventListener('click', () => {\r\n        // Update selected card\r\n        optionCards.forEach(c => c.classList.remove('selected'));\r\n        card.classList.add('selected');\r\n\r\n        // Get AI ID\r\n        const aiId = card.getAttribute('data-ai-id');\r\n        const aiOption = aiOptions.find((opt: any) => opt.id === aiId);\r\n\r\n        if (aiOption) {\r\n          this.selectedAI = aiOption.id;\r\n          this.updateAIInfo(aiOption);\r\n\r\n          // Show/hide custom settings panel\r\n          this.toggleCustomSettings(aiOption.isCustomizable);\r\n        }\r\n      });\r\n    });\r\n\r\n    // Auto-select first option\r\n    if (optionCards.length > 0) {\r\n      optionCards[0]!.classList.add('selected');\r\n    }\r\n  }\r\n\r\n  private updateAIInfo(aiOption: any): void {\r\n    const nameEl = document.getElementById('ai-info-name');\r\n    const strengthEl = document.getElementById('ai-strength');\r\n    const descEl = document.getElementById('ai-description');\r\n    const thinkingTimeEl = document.getElementById('ai-thinking-time');\r\n    const searchDepthEl = document.getElementById('ai-search-depth');\r\n    const featuresEl = document.getElementById('ai-features');\r\n\r\n    if (nameEl) nameEl.textContent = aiOption.name;\r\n    if (strengthEl) strengthEl.textContent = this.getStrengthStars(aiOption.strength);\r\n    if (descEl) descEl.textContent = aiOption.description;\r\n    if (thinkingTimeEl) thinkingTimeEl.textContent = aiOption.thinkingTime;\r\n    if (searchDepthEl) searchDepthEl.textContent = aiOption.searchDepth.toString();\r\n\r\n    if (featuresEl) {\r\n      featuresEl.innerHTML = aiOption.features\r\n        .map((feature: string) => `<span class=\"feature\">${feature}</span>`)\r\n        .join('');\r\n    }\r\n  }\r\n\r\n  private getStrengthStars(strength: number): string {\r\n    return '★'.repeat(strength) + '☆'.repeat(5 - strength);\r\n  }\r\n\r\n  private toggleCustomSettings(show: boolean): void {\r\n    const customPanel = document.getElementById('ai-custom-settings');\r\n    if (customPanel) {\r\n      customPanel.style.display = show ? 'block' : 'none';\r\n    }\r\n  }\r\n\r\n  private initializeCustomSettings(): void {\r\n    const thinkingTimeSlider = document.getElementById('custom-thinking-time') as HTMLInputElement;\r\n    const thinkingTimeValue = document.getElementById('thinking-time-value');\r\n    const searchDepthSlider = document.getElementById('custom-search-depth') as HTMLInputElement;\r\n    const searchDepthValue = document.getElementById('search-depth-value');\r\n\r\n    // Thinking time slider\r\n    if (thinkingTimeSlider && thinkingTimeValue) {\r\n      thinkingTimeSlider.addEventListener('input', () => {\r\n        thinkingTimeValue.textContent = parseFloat(thinkingTimeSlider.value).toFixed(1);\r\n      });\r\n    }\r\n\r\n    // Search depth slider\r\n    if (searchDepthSlider && searchDepthValue) {\r\n      searchDepthSlider.addEventListener('input', () => {\r\n        searchDepthValue.textContent = searchDepthSlider.value;\r\n      });\r\n    }\r\n\r\n    // Apply custom settings when values change\r\n    const customInputs = document.querySelectorAll('#ai-custom-settings input, #ai-custom-settings select');\r\n    customInputs.forEach(input => {\r\n      input.addEventListener('change', () => {\r\n        this.updateCustomSettings();\r\n      });\r\n    });\r\n  }\r\n\r\n  private updateCustomSettings(): void {\r\n    const thinkingTime = parseFloat((document.getElementById('custom-thinking-time') as HTMLInputElement)?.value || '5');\r\n    const searchDepth = parseInt((document.getElementById('custom-search-depth') as HTMLInputElement)?.value || '6');\r\n    const useOpeningBook = (document.getElementById('custom-opening-book') as HTMLInputElement)?.checked || false;\r\n    const useEndgameSolver = (document.getElementById('custom-endgame-solver') as HTMLInputElement)?.checked || false;\r\n    const personality = (document.getElementById('custom-personality') as HTMLSelectElement)?.value || 'balanced';\r\n\r\n    this.customSettings = {\r\n      thinkingTime,\r\n      searchDepth,\r\n      useOpeningBook,\r\n      useEndgameSolver,\r\n      adaptiveTime: true,\r\n      personality,\r\n      iterativeDeepening: true,\r\n      useTranspositionTable: true,\r\n    };\r\n  }\r\n\r\n  private showSettings(): void {\r\n    const screenContainer = document.getElementById('screen-container');\r\n    if (!screenContainer) {return;}\r\n\r\n    this.currentScreen = 'settings';\r\n    const headerBackBtn = document.getElementById('header-back-btn');\r\n    if (headerBackBtn) {headerBackBtn.style.display = 'flex';}\r\n\r\n    screenContainer.innerHTML = `\r\n      <div class=\"settings-screen\">\r\n        <h2 style=\"color: #00ff7f; margin-bottom: 1.25rem;\">${t('settings.title')}</h2>\r\n\r\n        <div class=\"settings-group\">\r\n          <h3>${t('settings.language')}</h3>\r\n          <select id=\"language-select\" class=\"language-select\">\r\n            <option value=\"en\">English</option>\r\n            <option value=\"zh-Hant\">繁體中文</option>\r\n            <option value=\"zh-Hans\">简体中文</option>\r\n          </select>\r\n        </div>\r\n\r\n        <div class=\"settings-group\">\r\n          <h3>${t('settings.visual')}</h3>\r\n          <label>\r\n            <input type=\"checkbox\" id=\"show-valid\" checked> ${t('settings.showValid')}\r\n          </label>\r\n          <label>\r\n            <input type=\"checkbox\" id=\"show-last\" checked> ${t('settings.showLast')}\r\n          </label>\r\n          <label>\r\n            <input type=\"checkbox\" id=\"show-mobility\"> ${t('settings.showMobility')}\r\n          </label>\r\n          <label>\r\n            <input type=\"checkbox\" id=\"animations\" checked> ${t('settings.animations')}\r\n          </label>\r\n        </div>\r\n\r\n        <div class=\"settings-group\">\r\n          <h3>${t('settings.game')}</h3>\r\n          <label>\r\n            <input type=\"checkbox\" id=\"auto-pass\" checked> ${t('settings.autoPass')}\r\n          </label>\r\n          <label>\r\n            <input type=\"checkbox\" id=\"confirm-moves\"> ${t('settings.confirm')}\r\n          </label>\r\n        </div>\r\n\r\n        <button class=\"menu-button\" id=\"save-settings\" style=\"margin-top: 1.25rem;\">\r\n          ${t('settings.save')}\r\n        </button>\r\n      </div>\r\n    `;\r\n\r\n    const settings = this.getSettings();\r\n    (document.getElementById('language-select') as HTMLSelectElement).value = settings.language || 'en';\r\n    (document.getElementById('show-valid') as HTMLInputElement).checked = settings.showValid;\r\n    (document.getElementById('show-last') as HTMLInputElement).checked = settings.showLast;\r\n    (document.getElementById('show-mobility') as HTMLInputElement).checked = settings.showMobility;\r\n    (document.getElementById('animations') as HTMLInputElement).checked = settings.animations;\r\n    (document.getElementById('auto-pass') as HTMLInputElement).checked = settings.autoPass;\r\n    (document.getElementById('confirm-moves') as HTMLInputElement).checked = settings.confirmMoves;\r\n\r\n    document.getElementById('save-settings')?.addEventListener('click', () => {\r\n      const lang = (document.getElementById('language-select') as HTMLSelectElement).value as Language;\r\n      const settings = {\r\n        language: lang,\r\n        showValid: (document.getElementById('show-valid') as HTMLInputElement)?.checked,\r\n        showLast: (document.getElementById('show-last') as HTMLInputElement)?.checked,\r\n        showMobility: (document.getElementById('show-mobility') as HTMLInputElement)?.checked,\r\n        animations: (document.getElementById('animations') as HTMLInputElement)?.checked,\r\n        autoPass: (document.getElementById('auto-pass') as HTMLInputElement)?.checked,\r\n        confirmMoves: (document.getElementById('confirm-moves') as HTMLInputElement)?.checked,\r\n      };\r\n      localStorage.setItem('reversi-settings', JSON.stringify(settings));\r\n      localStorage.setItem('language', lang);\r\n      setLanguage(lang);\r\n      applyTranslations();\r\n\r\n      // Update particle system enabled state when animations setting changes\r\n      this.particleSystem.setEnabled(settings.animations);\r\n\r\n      if (this.modalService) {\r\n        this.modalService.showSuccess(\r\n          t('settings.saved'),\r\n          t('modal.settingsSaved.title'),\r\n        );\r\n      }\r\n      this.refreshUI();\r\n    });\r\n  }\r\n\r\n  private showHelp(): void {\r\n    const screenContainer = document.getElementById('screen-container');\r\n    if (!screenContainer) {return;}\r\n\r\n    this.currentScreen = 'help';\r\n    const headerBackBtn = document.getElementById('header-back-btn');\r\n    if (headerBackBtn) {headerBackBtn.style.display = 'flex';}\r\n\r\n    screenContainer.innerHTML = `\r\n      <div class=\"help-screen\">\r\n        <h2>${t('help.title')}</h2>\r\n\r\n        <h3>${t('help.objectiveTitle')}</h3>\r\n        <p>${t('help.objectiveText')}</p>\r\n\r\n        <h3>${t('help.rulesTitle')}</h3>\r\n        <ul>\r\n          <li>${t('help.rules1')}</li>\r\n          <li>${t('help.rules2')}</li>\r\n          <li>${t('help.rules3')}</li>\r\n          <li>${t('help.rules4')}</li>\r\n          <li>${t('help.rules5')}</li>\r\n          <li>${t('help.rules6')}</li>\r\n        </ul>\r\n\r\n        <h3>${t('help.strategyTitle')}</h3>\r\n        <ul>\r\n          <li>${t('help.strategy1')}</li>\r\n          <li>${t('help.strategy2')}</li>\r\n          <li>${t('help.strategy3')}</li>\r\n          <li>${t('help.strategy4')}</li>\r\n        </ul>\r\n\r\n        <h3>${t('help.controlsTitle')}</h3>\r\n        <ul>\r\n          <li>${t('help.controls1')}</li>\r\n          <li>${t('help.controls2')}</li>\r\n          <li>${t('help.controls3')}</li>\r\n        </ul>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  // ===== GAME LOGIC =====\r\n\r\n  private startNewGame(mode: 'pvp' | 'pvc', aiDifficulty: AIDifficulty = AIDifficulty.GREEDY): void {\r\n    // Initialize game state\r\n    this.gameState = {\r\n      board: this.createInitialBoard(),\r\n      currentPlayer: BLACK,\r\n      blackScore: 2,\r\n      whiteScore: 2,\r\n      gameMode: mode,\r\n      isGameOver: false,\r\n      validMoves: new Set(),\r\n      moveHistory: [],\r\n      aiDifficulty: aiDifficulty,\r\n    };\r\n\r\n    // Calculate initial valid moves\r\n    this.updateValidMoves();\r\n\r\n    // Show game screen\r\n    this.showGameScreen();\r\n\r\n    // Update display\r\n    this.updateDisplay();\r\n  }\r\n\r\n  private createInitialBoard(): number[] {\r\n    const board = new Array(64).fill(EMPTY);\r\n    board[27] = WHITE;\r\n    board[28] = BLACK;\r\n    board[35] = BLACK;\r\n    board[36] = WHITE;\r\n    return board;\r\n  }\r\n\r\n  private showGameScreen(): void {\r\n    const screenContainer = document.getElementById('screen-container');\r\n    if (!screenContainer || !this.gameState) {return;}\r\n\r\n    this.currentScreen = 'game';\r\n    const header = document.getElementById('game-header');\r\n    const headerBackBtn = document.getElementById('header-back-btn');\r\n    const sharedHealthBarContainer = document.getElementById('shared-health-bar-container');\r\n\r\n    if (header) {header.style.display = 'flex';}\r\n    if (headerBackBtn) {headerBackBtn.style.display = 'flex';}\r\n    if (sharedHealthBarContainer) {sharedHealthBarContainer.style.display = 'flex';}\r\n\r\n    const modeText = this.gameState.gameMode === 'pvp'\r\n      ? t('game.pvp')\r\n      : `${t('game.pvai')} (${t('difficulty.' + this.gameState.aiDifficulty)})`;\r\n\r\n    screenContainer.innerHTML = `\r\n      <div class=\"game-screen\">\r\n        <div class=\"game-info-compact\">\r\n          <div>${t('game.mode')}: ${modeText}</div>\r\n          <div id=\"ai-status\"></div>\r\n        </div>\r\n        <div class=\"game-board\" id=\"game-board\"></div>\r\n        <div id=\"game-over-modal\" style=\"display: none;\"></div>\r\n      </div>\r\n    `;\r\n\r\n    // Create board cells\r\n    this.createBoardCells();\r\n  }\r\n\r\n  private createBoardCells(): void {\r\n    const board = document.getElementById('game-board');\r\n    if (!board || !this.gameState) {return;}\r\n\r\n    board.innerHTML = '';\r\n\r\n    for (let i = 0; i < 64; i++) {\r\n      const cell = document.createElement('div');\r\n      cell.className = 'board-cell';\r\n      cell.dataset.position = i.toString();\r\n\r\n      // Add click handler\r\n      cell.addEventListener('click', () => {\r\n        if (!this.isProcessingMove && !this.aiThinking) {\r\n          this.handleCellClick(i);\r\n        }\r\n      });\r\n\r\n      board.appendChild(cell);\r\n    }\r\n\r\n    // Render initial pieces\r\n    this.renderBoard();\r\n  }\r\n\r\n  private renderBoard(): void {\r\n    if (!this.gameState) {return;}\r\n\r\n    const settings = this.getSettings();\r\n\r\n    // Calculate mobility for all valid moves if setting is enabled\r\n    const mobilityMap = new Map<number, { player: number; opponent: number }>();\r\n    if (settings.showMobility && this.gameState.validMoves.size > 0) {\r\n      for (const position of this.gameState.validMoves) {\r\n        const mobility = this.calculateMoveMobility(position, this.gameState.currentPlayer);\r\n        mobilityMap.set(position, mobility);\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < 64; i++) {\r\n      const cell = document.querySelector(`[data-position=\"${i}\"]`) as HTMLElement;\r\n      if (!cell) {continue;}\r\n\r\n      // Clear cell classes\r\n      cell.className = 'board-cell';\r\n\r\n      // Clear cell content first\r\n      cell.innerHTML = '';\r\n\r\n      // Add piece if exists\r\n      if (this.gameState.board[i] !== EMPTY) {\r\n        const piece = document.createElement('div');\r\n        piece.className = `piece ${this.gameState.board[i] === BLACK ? 'piece-black' : 'piece-white'}`;\r\n        cell.appendChild(piece);\r\n      }\r\n\r\n      // Show valid moves\r\n      if (settings.showValid && this.gameState.validMoves.has(i)) {\r\n        cell.classList.add('valid-move');\r\n\r\n        // Show mobility if enabled\r\n        if (settings.showMobility && mobilityMap.has(i)) {\r\n          const mobility = mobilityMap.get(i)!;\r\n          const mobilityIndicator = document.createElement('div');\r\n          mobilityIndicator.className = 'mobility-indicator';\r\n\r\n          // Display as subtraction result and color code based on mobility difference\r\n          const difference = mobility.player - mobility.opponent;\r\n          mobilityIndicator.textContent = difference > 0 ? `+${difference}` : `${difference}`;\r\n          if (difference > 0) {\r\n            mobilityIndicator.classList.add('mobility-positive');\r\n          } else if (difference < 0) {\r\n            mobilityIndicator.classList.add('mobility-negative');\r\n          } else {\r\n            mobilityIndicator.classList.add('mobility-neutral');\r\n          }\r\n\r\n          cell.appendChild(mobilityIndicator);\r\n        }\r\n      }\r\n\r\n      // Show last move\r\n      if (settings.showLast && this.gameState.moveHistory.length > 0) {\r\n        const lastMove = this.gameState.moveHistory[this.gameState.moveHistory.length - 1];\r\n        if (lastMove && lastMove.position === i) {\r\n          cell.classList.add('last-move');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private getSettings(): any {\r\n    const stored = localStorage.getItem('reversi-settings');\r\n    if (stored) {\r\n      return JSON.parse(stored);\r\n    }\r\n    const lang = (localStorage.getItem('language') as Language) || 'en';\r\n    return {\r\n      language: lang,\r\n      showValid: true,\r\n      showLast: true,\r\n      showMobility: false,\r\n      animations: true,\r\n      autoPass: true,\r\n      confirmMoves: false,\r\n    };\r\n  }\r\n\r\n  private async handleCellClick(position: number): Promise<void> {\r\n    if (!this.gameState || this.gameState.isGameOver) {return;}\r\n\r\n    // Check if it's a valid move\r\n    if (!this.gameState.validMoves.has(position)) {\r\n      console.log(t('messages.invalidMove'));\r\n      return;\r\n    }\r\n\r\n    // For PvC mode with confirmMoves setting\r\n    const settings = this.getSettings();\r\n    if (this.gameState.gameMode === 'pvc' &&\r\n        this.gameState.currentPlayer === BLACK &&\r\n        settings.confirmMoves) {\r\n      const confirmed = await this.showSimpleConfirm(\r\n        t('messages.moveConfirm'),\r\n        t('modal.moveConfirm.title'),\r\n      );\r\n      if (!confirmed) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Make the move\r\n    this.makeMove(position);\r\n  }\r\n\r\n  private makeMove(position: number): void {\r\n    if (!this.gameState) {return;}\r\n\r\n    this.isProcessingMove = true;\r\n\r\n    // Get settings for animation checks\r\n    const settings = this.getSettings();\r\n\r\n    // Get pieces to flip\r\n    const toFlip = this.getFlippedPieces(position, this.gameState.currentPlayer);\r\n\r\n    // Analyze game situation for special effects\r\n    const specialEffects: SpecialEffect = {\r\n      corner: position === 0 || position === 7 || position === 56 || position === 63,\r\n      edge: this.isEdgePosition(position),\r\n      massive: toFlip.length >= 10,\r\n      chain: this.isChainMove(toFlip),\r\n      comeback: this.isComebackMove(),\r\n      domination: this.isDominationMove(),\r\n    };\r\n\r\n    // Calculate move grade with special effects\r\n    const grade = this.particleSystem.calculateGrade(toFlip.length, position, specialEffects);\r\n\r\n    // Get cell position for particle effects\r\n    const cell = document.querySelector(`[data-position=\"${position}\"]`) as HTMLElement;\r\n    if (cell) {\r\n      const rect = cell.getBoundingClientRect();\r\n      const containerRect = this.container!.getBoundingClientRect();\r\n      const x = rect.left + rect.width / 2 - containerRect.left;\r\n      const y = rect.top + rect.height / 2 - containerRect.top;\r\n\r\n      // Calculate flipped positions in pixel coordinates for directional particles\r\n      const flippedPixelPositions = toFlip.map(pos => {\r\n        const flippedCell = document.querySelector(`[data-position=\"${pos}\"]`) as HTMLElement;\r\n        if (flippedCell) {\r\n          const flippedRect = flippedCell.getBoundingClientRect();\r\n          return {\r\n            x: flippedRect.left + flippedRect.width / 2 - containerRect.left,\r\n            y: flippedRect.top + flippedRect.height / 2 - containerRect.top,\r\n          };\r\n        }\r\n        return { x, y }; // Fallback to source position\r\n      });\r\n\r\n      // Trigger particle effect based on grade with special effects and directional info\r\n      if (settings.animations) {\r\n        this.particleSystem.triggerMoveEffect(x, y, grade, toFlip.length, specialEffects, flippedPixelPositions);\r\n\r\n        // Additional special effects\r\n        if (specialEffects.chain) {\r\n          this.particleSystem.createChainEffect(x, y);\r\n        }\r\n\r\n        // Show grade indicator\r\n        this.showGradeIndicator(grade, x, y);\r\n      }\r\n    }\r\n\r\n    // Record move in history\r\n    this.gameState.moveHistory.push({\r\n      position: position,\r\n      player: this.gameState.currentPlayer,\r\n      flipped: toFlip,\r\n    });\r\n\r\n    // Add screen shake for higher grades\r\n    this.triggerScreenShake(grade);\r\n\r\n    // Place the piece with animation\r\n    this.gameState.board[position] = this.gameState.currentPlayer;\r\n    if (cell) {\r\n      const piece = document.createElement('div');\r\n      piece.className = `piece ${this.gameState.currentPlayer === BLACK ? 'piece-black' : 'piece-white'} placing`;\r\n      cell.innerHTML = '';\r\n      cell.appendChild(piece);\r\n    }\r\n\r\n    // Flip pieces with animation and particles\r\n    if (settings.animations) {\r\n      setTimeout(() => {\r\n        this.flipPiecesWithEffects(toFlip, grade);\r\n        // Adjust timeout based on number of pieces being flipped\r\n        const flipDuration = toFlip.length * 80 + 300;\r\n        setTimeout(() => {\r\n          this.afterMove();\r\n        }, flipDuration);\r\n      }, 200);\r\n    } else {\r\n      this.flipPiecesWithEffects(toFlip, grade);\r\n      this.afterMove();\r\n    }\r\n  }\r\n\r\n  private showGradeIndicator(grade: Grade, x: number, y: number): void {\r\n    // Create a temporary grade indicator\r\n    const indicator = document.createElement('div');\r\n    indicator.style.position = 'absolute';\r\n    indicator.style.left = `${x}px`;\r\n    indicator.style.top = `${y - 50}px`;\r\n    indicator.style.transform = 'translateX(-50%)';\r\n    indicator.style.fontSize = '3rem';\r\n    indicator.style.fontWeight = 'bold';\r\n    indicator.style.zIndex = '200';\r\n    indicator.style.pointerEvents = 'none';\r\n    indicator.style.animation = 'gradePopup 1s ease-out forwards';\r\n\r\n    // Set grade text and color\r\n    switch (grade) {\r\n      case 'SSS':\r\n        indicator.textContent = 'SSS';\r\n        indicator.style.color = '#ff0080';\r\n        indicator.style.textShadow = '0 0 1.875rem #ff0080, 0 0 3.75rem #ff69b4';\r\n        indicator.style.fontSize = '3.5rem';\r\n        indicator.style.animation = 'gradePopup 2s ease-out forwards, rainbow 2s infinite';\r\n        break;\r\n      case 'SS':\r\n        indicator.textContent = 'SS';\r\n        indicator.style.color = '#9932cc';\r\n        indicator.style.textShadow = '0 0 1.5625rem #9932cc, 0 0 3.125rem #8b00ff';\r\n        indicator.style.fontSize = '3.25rem';\r\n        indicator.style.animation = 'gradePopup 1.5s ease-out forwards, glow 1.5s infinite';\r\n        break;\r\n      case 'S':\r\n        indicator.textContent = 'S';\r\n        indicator.style.color = '#ff69b4';\r\n        indicator.style.textShadow = '0 0 1.25rem #ff69b4';\r\n        indicator.style.fontSize = '3rem';\r\n        break;\r\n      case 'A':\r\n        indicator.textContent = 'A';\r\n        indicator.style.color = '#ffd700';\r\n        indicator.style.textShadow = '0 0 1.25rem #ffd700';\r\n        break;\r\n      case 'B':\r\n        indicator.textContent = 'B';\r\n        indicator.style.color = '#00ff7f';\r\n        indicator.style.textShadow = '0 0 0.9375rem #00ff7f';\r\n        break;\r\n      case 'C':\r\n        indicator.textContent = 'C';\r\n        indicator.style.color = '#888888';\r\n        indicator.style.textShadow = '0 0 0.625rem #888888';\r\n        break;\r\n    }\r\n\r\n    // Add animation style if not exists\r\n    if (!document.getElementById('grade-animation-style')) {\r\n      const style = document.createElement('style');\r\n      style.id = 'grade-animation-style';\r\n      style.textContent = `\r\n        @keyframes gradePopup {\r\n          0% {\r\n            opacity: 0;\r\n            transform: translateX(-50%) translateY(0) scale(0.5);\r\n          }\r\n          50% {\r\n            opacity: 1;\r\n            transform: translateX(-50%) translateY(-1.25rem) scale(1.2);\r\n          }\r\n          100% {\r\n            opacity: 0;\r\n            transform: translateX(-50%) translateY(-2.5rem) scale(1);\r\n          }\r\n        }\r\n        \r\n        @keyframes rainbow {\r\n          0% { color: #ff0000; }\r\n          16% { color: #ff8000; }\r\n          32% { color: #ffff00; }\r\n          48% { color: #00ff00; }\r\n          64% { color: #0080ff; }\r\n          80% { color: #8000ff; }\r\n          100% { color: #ff0080; }\r\n        }\r\n        \r\n        @keyframes glow {\r\n          0%, 100% { \r\n            text-shadow: 0 0 1.5625rem #9932cc, 0 0 3.125rem #8b00ff;\r\n          }\r\n          50% { \r\n            text-shadow: 0 0 2.5rem #9932cc, 0 0 5rem #8b00ff, 0 0 7.5rem #ff00ff;\r\n          }\r\n        }\r\n      `;\r\n      document.head.appendChild(style);\r\n    }\r\n\r\n    this.container?.appendChild(indicator);\r\n\r\n    // Remove after animation\r\n    setTimeout(() => {\r\n      indicator.remove();\r\n    }, 1000);\r\n  }\r\n\r\n  private flipPiecesWithEffects(positions: number[], grade?: Grade): void {\r\n    if (!this.gameState) {return;}\r\n\r\n    const settings = this.getSettings();\r\n\r\n    if (settings.animations) {\r\n      // Sequential flipping with delays for dynamic effect\r\n      positions.forEach((pos, index) => {\r\n        setTimeout(() => {\r\n          this.gameState!.board[pos] = this.gameState!.currentPlayer;\r\n\r\n          const cell = document.querySelector(`[data-position=\"${pos}\"]`) as HTMLElement;\r\n          if (cell) {\r\n            // Create flip particle effect with grade-based colors\r\n            const rect = cell.getBoundingClientRect();\r\n            const containerRect = this.container!.getBoundingClientRect();\r\n            const x = rect.left + rect.width / 2 - containerRect.left;\r\n            const y = rect.top + rect.height / 2 - containerRect.top;\r\n\r\n            const color = this.gameState!.currentPlayer === BLACK ? '#000000' : '#ffffff';\r\n            this.particleSystem.createFlipEffect(x, y, color, grade);\r\n\r\n            const piece = cell.querySelector('.piece');\r\n            if (piece) {\r\n              piece.classList.add('flipping');\r\n              setTimeout(() => {\r\n                piece.className = `piece ${this.gameState!.currentPlayer === BLACK ? 'piece-black' : 'piece-white'}`;\r\n              }, 250);\r\n            }\r\n          }\r\n        }, index * 80); // 80ms delay between each flip for dynamic effect\r\n      });\r\n    } else {\r\n      // Immediate flipping when animations are disabled\r\n      positions.forEach(pos => {\r\n        this.gameState!.board[pos] = this.gameState!.currentPlayer;\r\n\r\n        const cell = document.querySelector(`[data-position=\"${pos}\"]`) as HTMLElement;\r\n        if (cell) {\r\n          const piece = cell.querySelector('.piece');\r\n          if (piece) {\r\n            piece.className = `piece ${this.gameState!.currentPlayer === BLACK ? 'piece-black' : 'piece-white'}`;\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private flipPieces(positions: number[]): void {\r\n    if (!this.gameState) {return;}\r\n\r\n    const settings = this.getSettings();\r\n\r\n    positions.forEach(pos => {\r\n      this.gameState!.board[pos] = this.gameState!.currentPlayer;\r\n\r\n      const cell = document.querySelector(`[data-position=\"${pos}\"]`) as HTMLElement;\r\n      if (cell) {\r\n        const piece = cell.querySelector('.piece');\r\n        if (piece && settings.animations) {\r\n          piece.classList.add('flipping');\r\n          setTimeout(() => {\r\n            piece.className = `piece ${this.gameState!.currentPlayer === BLACK ? 'piece-black' : 'piece-white'}`;\r\n          }, 250);\r\n        } else if (piece) {\r\n          piece.className = `piece ${this.gameState!.currentPlayer === BLACK ? 'piece-black' : 'piece-white'}`;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private afterMove(): void {\r\n    if (!this.gameState) {return;}\r\n\r\n    // Update scores\r\n    this.updateScores();\r\n\r\n    // Switch player\r\n    this.gameState.currentPlayer = this.gameState.currentPlayer === BLACK ? WHITE : BLACK;\r\n\r\n    // Update valid moves for new player\r\n    this.updateValidMoves();\r\n\r\n    // 🔥 戰鬥系統增強：檢測連擊和特殊招式\r\n    const previousPlayer = this.gameState.currentPlayer === BLACK ? WHITE : BLACK;\r\n    const opponentCanMove = this.gameState.validMoves.size > 0;\r\n    const lastMove = this.gameState.moveHistory[this.gameState.moveHistory.length - 1];\r\n\r\n    if (lastMove) {\r\n      // 處理連擊 (當對手無法移動時)\r\n      this.comboSystem.processMove(\r\n        previousPlayer === BLACK ? 1 : 2, // 轉換為 PlayerColor enum 值\r\n        opponentCanMove,\r\n        lastMove.flipped.length,\r\n      );\r\n\r\n      // 檢測特殊招式\r\n      this.detectSpecialMoves(\r\n        lastMove.position,\r\n        lastMove.flipped, // 傳遞翻轉位置陣列而非長度\r\n        previousPlayer === BLACK ? this.gameState.blackScore : this.gameState.whiteScore,\r\n        previousPlayer === BLACK ? this.gameState.whiteScore : this.gameState.blackScore,\r\n      );\r\n    }\r\n\r\n    // Check for game over or pass\r\n    if (!this.checkGameStatus()) {\r\n      // Update display\r\n      this.updateDisplay();\r\n\r\n      // If it's AI's turn, make AI move\r\n      if (this.gameState.gameMode === 'pvc' && this.gameState.currentPlayer === WHITE) {\r\n        this.makeAIMove();\r\n      }\r\n    }\r\n\r\n    this.isProcessingMove = false;\r\n  }\r\n\r\n  private updateValidMoves(): void {\r\n    if (!this.gameState) {return;}\r\n\r\n    this.gameState.validMoves.clear();\r\n\r\n    for (let i = 0; i < 64; i++) {\r\n      if (this.gameState.board[i] === EMPTY) {\r\n        if (this.isValidMove(i, this.gameState.currentPlayer)) {\r\n          this.gameState.validMoves.add(i);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private isValidMove(position: number, player: number): boolean {\r\n    if (!this.gameState || this.gameState.board[position] !== EMPTY) {\r\n      return false;\r\n    }\r\n\r\n    // Check all directions\r\n    for (const [dx, dy] of DIRECTIONS) {\r\n      if (this.checkDirection(position, player, dx || 0, dy || 0).length > 0) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private checkDirection(position: number, player: number, dx: number, dy: number): number[] {\r\n    if (!this.gameState) {return [];}\r\n\r\n    const flipped: number[] = [];\r\n    const row = Math.floor(position / 8);\r\n    const col = position % 8;\r\n    const opponent = player === BLACK ? WHITE : BLACK;\r\n\r\n    let r = row + dy;\r\n    let c = col + dx;\r\n\r\n    // Find opponent pieces\r\n    while (r >= 0 && r < 8 && c >= 0 && c < 8) {\r\n      const pos = r * 8 + c;\r\n\r\n      if (this.gameState.board[pos] === EMPTY) {\r\n        return []; // Empty cell, no valid line\r\n      } else if (this.gameState.board[pos] === opponent) {\r\n        flipped.push(pos);\r\n      } else {\r\n        // Found our piece\r\n        return flipped.length > 0 ? flipped : [];\r\n      }\r\n\r\n      r += dy;\r\n      c += dx;\r\n    }\r\n\r\n    return []; // Hit edge without finding our piece\r\n  }\r\n\r\n  private getFlippedPieces(position: number, player: number): number[] {\r\n    const allFlipped: number[] = [];\r\n\r\n    for (const [dx, dy] of DIRECTIONS) {\r\n      const flipped = this.checkDirection(position, player, dx, dy);\r\n      allFlipped.push(...flipped);\r\n    }\r\n\r\n    return allFlipped;\r\n  }\r\n\r\n  private calculateMoveMobility(position: number, player: number): { player: number; opponent: number } {\r\n    if (!this.gameState) {return { player: 0, opponent: 0 };}\r\n\r\n    // Create a temporary board with the move applied\r\n    const tempBoard = [...this.gameState.board];\r\n    const flippedPieces = this.getFlippedPieces(position, player);\r\n\r\n    // Apply the move\r\n    tempBoard[position] = player;\r\n    for (const pos of flippedPieces) {\r\n      tempBoard[pos] = player;\r\n    }\r\n\r\n    // Calculate valid moves for both players after this move\r\n    const opponent = player === BLACK ? WHITE : BLACK;\r\n\r\n    // Count opponent's valid moves after this move\r\n    let opponentMoves = 0;\r\n    for (let i = 0; i < 64; i++) {\r\n      if (tempBoard[i] === EMPTY) {\r\n        if (this.isValidMoveOnBoard(i, opponent, tempBoard)) {\r\n          opponentMoves++;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Count player's valid moves after this move (after opponent's turn)\r\n    let playerMoves = 0;\r\n    for (let i = 0; i < 64; i++) {\r\n      if (tempBoard[i] === EMPTY) {\r\n        if (this.isValidMoveOnBoard(i, player, tempBoard)) {\r\n          playerMoves++;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Return both player and opponent mobility\r\n    return { player: playerMoves, opponent: opponentMoves };\r\n  }\r\n\r\n  private isValidMoveOnBoard(position: number, player: number, board: number[]): boolean {\r\n    if (board[position] !== EMPTY) {\r\n      return false;\r\n    }\r\n\r\n    // Check all directions\r\n    for (const [dx, dy] of DIRECTIONS) {\r\n      if (this.checkDirectionOnBoard(position, player, dx || 0, dy || 0, board).length > 0) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private checkDirectionOnBoard(position: number, player: number, dx: number, dy: number, board: number[]): number[] {\r\n    const flipped: number[] = [];\r\n    const row = Math.floor(position / 8);\r\n    const col = position % 8;\r\n    const opponent = player === BLACK ? WHITE : BLACK;\r\n\r\n    let r = row + dy;\r\n    let c = col + dx;\r\n\r\n    // Find opponent pieces\r\n    while (r >= 0 && r < 8 && c >= 0 && c < 8) {\r\n      const pos = r * 8 + c;\r\n\r\n      if (board[pos] === EMPTY) {\r\n        return []; // Empty cell, no valid line\r\n      } else if (board[pos] === opponent) {\r\n        flipped.push(pos);\r\n      } else {\r\n        // Found our piece\r\n        return flipped.length > 0 ? flipped : [];\r\n      }\r\n\r\n      r += dy;\r\n      c += dx;\r\n    }\r\n\r\n    return []; // Hit edge without finding our piece\r\n  }\r\n\r\n  private updateScores(): void {\r\n    if (!this.gameState) {return;}\r\n\r\n    // Store old scores for animation\r\n    const oldBlackScore = this.gameState.blackScore;\r\n    const oldWhiteScore = this.gameState.whiteScore;\r\n\r\n    let black = 0;\r\n    let white = 0;\r\n\r\n    for (const piece of this.gameState.board) {\r\n      if (piece === BLACK) {black++;}\r\n      else if (piece === WHITE) {white++;}\r\n    }\r\n\r\n    this.gameState.blackScore = black;\r\n    this.gameState.whiteScore = white;\r\n\r\n    // Trigger shared health bar animations if scores changed\r\n    if (oldBlackScore !== black) {\r\n      this.animateSharedHealthChange('black', oldBlackScore, black);\r\n    }\r\n    if (oldWhiteScore !== white) {\r\n      this.animateSharedHealthChange('white', oldWhiteScore, white);\r\n    }\r\n  }\r\n\r\n  private checkGameStatus(): boolean {\r\n    if (!this.gameState) {return false;}\r\n\r\n    // No valid moves for current player\r\n    if (this.gameState.validMoves.size === 0) {\r\n      // Switch to other player\r\n      this.gameState.currentPlayer = this.gameState.currentPlayer === BLACK ? WHITE : BLACK;\r\n      this.updateValidMoves();\r\n\r\n      // Other player also has no moves - game over\r\n      if (this.gameState.validMoves.size === 0) {\r\n        this.gameOver();\r\n        return true;\r\n      } else {\r\n        // Pass turn\r\n        const settings = this.getSettings();\r\n        if (settings.autoPass) {\r\n          const color = this.gameState.currentPlayer === BLACK ? 'Black' : 'White';\r\n          this.showMessage(`No valid moves - passing to ${color}`);\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private gameOver(): void {\r\n    if (!this.gameState) {return;}\r\n\r\n    this.gameState.isGameOver = true;\r\n\r\n    let winner: string;\r\n    let winnerColor: string;\r\n\r\n    if (this.gameState.blackScore > this.gameState.whiteScore) {\r\n      winner = t('game.blackWins');\r\n      winnerColor = '#000';\r\n    } else if (this.gameState.whiteScore > this.gameState.blackScore) {\r\n      winner = t('game.whiteWins');\r\n      winnerColor = '#fff';\r\n    } else {\r\n      winner = t('game.tie');\r\n      winnerColor = '#ffd700';\r\n    }\r\n\r\n    const modal = document.getElementById('game-over-modal');\r\n    if (modal) {\r\n      modal.style.display = 'block';\r\n      modal.className = 'game-over-modal';\r\n      modal.innerHTML = `\r\n        <h2 class=\"game-over-title\">🏆 ${t('game.gameOverTitle')}</h2>\r\n        <div class=\"final-scores\">\r\n          <p style=\"font-size: 2.25rem; color: ${winnerColor}; margin: 1.25rem 0;\">\r\n            ${winner}\r\n          </p>\r\n          <p>⚫ ${t('game.black')}: ${this.gameState.blackScore}</p>\r\n          <p>⚪ ${t('game.white')}: ${this.gameState.whiteScore}</p>\r\n          <p style=\"margin-top: 1.25rem; font-size: 1.125rem;\">\r\n            ${t('game.totalMoves')}: ${this.gameState.moveHistory.length}\r\n          </p>\r\n        </div>\r\n        <div class=\"modal-buttons\">\r\n          <button class=\"menu-button\" id=\"play-again\">${t('game.playAgain')}</button>\r\n          <button class=\"menu-button\" id=\"main-menu\">${t('game.mainMenu')}</button>\r\n        </div>\r\n      `;\r\n\r\n      document.getElementById('play-again')?.addEventListener('click', () => {\r\n        modal.style.display = 'none';\r\n        this.startNewGame(this.gameState!.gameMode, this.gameState!.aiDifficulty);\r\n      });\r\n\r\n      document.getElementById('main-menu')?.addEventListener('click', () => {\r\n        modal.style.display = 'none';\r\n        this.showMenu();\r\n      });\r\n    }\r\n  }\r\n\r\n  // Shared Health Bar Animation System\r\n  private animateSharedHealthChange(player: 'black' | 'white', oldValue: number, newValue: number): void {\r\n    const change = newValue - oldValue;\r\n    const sharedHealthBar = document.querySelector('.shared-health-bar');\r\n\r\n    // Add shake effect for big changes\r\n    if (Math.abs(change) >= 5 && sharedHealthBar) {\r\n      sharedHealthBar.classList.add('shake');\r\n      setTimeout(() => sharedHealthBar.classList.remove('shake'), 300);\r\n    }\r\n\r\n    // Show damage/healing numbers\r\n    if (change !== 0) {\r\n      this.showSharedDamageNumber(player, change);\r\n    }\r\n\r\n    // Update will be handled by updateSharedHealthBar in updateScores\r\n  }\r\n\r\n  private showSharedDamageNumber(player: 'black' | 'white', change: number): void {\r\n    const damageContainer = document.getElementById('damage-numbers');\r\n    const playerSection = document.querySelector(`.player-section.${player === 'black' ? 'left' : 'right'}`);\r\n\r\n    if (!damageContainer || !playerSection) {return;}\r\n\r\n    const damageElement = document.createElement('div');\r\n    damageElement.className = `damage-number ${change > 0 ? 'positive' : 'negative'}`;\r\n    damageElement.textContent = change > 0 ? `+${change}` : change.toString();\r\n\r\n    // Position the damage number above the player section\r\n    const playerRect = playerSection.getBoundingClientRect();\r\n    const containerRect = damageContainer.getBoundingClientRect();\r\n\r\n    damageElement.style.left = `${playerRect.left - containerRect.left + playerRect.width / 2}px`;\r\n    damageElement.style.top = `${playerRect.top - containerRect.top - 10}px`;\r\n    damageElement.style.transform = 'translateX(-50%)';\r\n\r\n    damageContainer.appendChild(damageElement);\r\n\r\n    // Remove the element after animation\r\n    setTimeout(() => {\r\n      if (damageElement.parentNode) {\r\n        damageElement.parentNode.removeChild(damageElement);\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  // Legacy method for compatibility\r\n  private showDamageNumber(player: 'black' | 'white', change: number): void {\r\n    this.showSharedDamageNumber(player, change);\r\n  }\r\n\r\n  private updateSharedHealthBar(): void {\r\n    if (!this.gameState) {return;}\r\n\r\n    const blackFill = document.getElementById('black-fill');\r\n    const whiteFill = document.getElementById('white-fill');\r\n    const blackCount = document.getElementById('black-count');\r\n    const whiteCount = document.getElementById('white-count');\r\n    const turnIndicator = document.getElementById('current-turn-shared');\r\n\r\n    if (!blackFill || !whiteFill || !blackCount || !whiteCount || !turnIndicator) {return;}\r\n\r\n    const total = this.gameState.blackScore + this.gameState.whiteScore;\r\n    const blackPercentage = total > 0 ? (this.gameState.blackScore / total) * 100 : 50;\r\n    const whitePercentage = total > 0 ? (this.gameState.whiteScore / total) * 100 : 50;\r\n\r\n    // Update shared health bar fills\r\n    blackFill.style.width = `${blackPercentage}%`;\r\n    whiteFill.style.width = `${whitePercentage}%`;\r\n\r\n    // Update piece counts\r\n    blackCount.textContent = this.gameState.blackScore.toString();\r\n    whiteCount.textContent = this.gameState.whiteScore.toString();\r\n\r\n    // Update turn indicator\r\n    const currentPlayerName = this.gameState.currentPlayer === BLACK ? t('game.black') : t('game.white');\r\n    turnIndicator.innerHTML = `<span>${currentPlayerName}</span>`;\r\n\r\n    // Add special effects\r\n    const blackFillElement = blackFill as HTMLElement;\r\n    const whiteFillElement = whiteFill as HTMLElement;\r\n\r\n    // Critical state (less than 15% of total pieces)\r\n    if (blackPercentage < 15) {\r\n      blackFillElement.classList.add('critical');\r\n    } else {\r\n      blackFillElement.classList.remove('critical');\r\n    }\r\n\r\n    if (whitePercentage < 15) {\r\n      whiteFillElement.classList.add('critical');\r\n    } else {\r\n      whiteFillElement.classList.remove('critical');\r\n    }\r\n\r\n    // Dominant state (more than 75% of total pieces)\r\n    if (blackPercentage > 75) {\r\n      blackFillElement.classList.add('dominant');\r\n      whiteFillElement.classList.remove('dominant');\r\n    } else if (whitePercentage > 75) {\r\n      whiteFillElement.classList.add('dominant');\r\n      blackFillElement.classList.remove('dominant');\r\n    } else {\r\n      blackFillElement.classList.remove('dominant');\r\n      whiteFillElement.classList.remove('dominant');\r\n    }\r\n\r\n    // Update VS divider position\r\n    this.updateVSDividerPosition(blackPercentage);\r\n\r\n    // Special effects for dramatic moments\r\n    this.triggerSpecialHealthEffects(blackPercentage, whitePercentage);\r\n  }\r\n\r\n  private updateVSDividerPosition(blackPercentage: number): void {\r\n    const vsDivider = document.getElementById('vs-divider');\r\n    if (!vsDivider) return;\r\n\r\n    // Position VS divider at the boundary between black and white areas\r\n    vsDivider.style.left = `${blackPercentage}%`;\r\n  }\r\n\r\n  private triggerSpecialHealthEffects(blackPercentage: number, whitePercentage: number): void {\r\n    const sharedHealthBar = document.querySelector('.shared-health-bar');\r\n    const blackFill = document.getElementById('black-fill');\r\n    const whiteFill = document.getElementById('white-fill');\r\n\r\n    if (!sharedHealthBar || !blackFill || !whiteFill) return;\r\n\r\n    // Remove all special effect classes first\r\n    sharedHealthBar.classList.remove('balanced', 'dramatic-shift');\r\n    blackFill.classList.remove('pulsing');\r\n    whiteFill.classList.remove('pulsing');\r\n\r\n    // Balanced state (45%-55% range)\r\n    if (blackPercentage >= 45 && blackPercentage <= 55) {\r\n      sharedHealthBar.classList.add('balanced');\r\n    }\r\n\r\n    // Dramatic shift detection (will be called when percentages change rapidly)\r\n    const shift = Math.abs(blackPercentage - 50);\r\n    if (shift > 35) {\r\n      sharedHealthBar.classList.add('dramatic-shift');\r\n\r\n      // Add pulsing effect to the dominant side\r\n      if (blackPercentage > 65) {\r\n        blackFill.classList.add('pulsing');\r\n      } else if (whitePercentage > 65) {\r\n        whiteFill.classList.add('pulsing');\r\n      }\r\n\r\n      // Remove dramatic shift effect after animation\r\n      setTimeout(() => {\r\n        sharedHealthBar.classList.remove('dramatic-shift');\r\n      }, 1500);\r\n    }\r\n  }\r\n\r\n  private updateDisplay(): void {\r\n    if (!this.gameState) {return;}\r\n\r\n    // Update shared health bar instead of old score display\r\n    this.updateSharedHealthBar();\r\n\r\n    // Update legacy elements (still needed for some old screens)\r\n    const blackScore = document.getElementById('black-score');\r\n    const whiteScore = document.getElementById('white-score');\r\n    const currentTurn = document.getElementById('current-turn');\r\n\r\n    if (blackScore) {blackScore.textContent = `⚫ ${t('game.black')}: ${this.gameState.blackScore}`;}\r\n    if (whiteScore) {whiteScore.textContent = `⚪ ${t('game.white')}: ${this.gameState.whiteScore}`;}\r\n\r\n    if (currentTurn) {\r\n      const currentColor = this.gameState.currentPlayer === BLACK ? t('game.black') : t('game.white');\r\n      currentTurn.innerHTML = `${t('game.current')}: <span style=\"color: ${this.gameState.currentPlayer === BLACK ? '#000' : '#fff'};\">${currentColor}</span>`;\r\n    }\r\n\r\n    const turnIndicator = document.getElementById('turn-indicator');\r\n    if (turnIndicator) {\r\n      const color = this.gameState.currentPlayer === BLACK ? '#000' : '#fff';\r\n      const currentColor = this.gameState.currentPlayer === BLACK ? t('game.black') : t('game.white');\r\n      turnIndicator.innerHTML = `${t('game.currentTurn')} <span style=\"color: ${color}; font-weight: bold;\">${currentColor}</span>`;\r\n    }\r\n\r\n    // Render board\r\n    this.renderBoard();\r\n  }\r\n\r\n  private showMessage(message: string): void {\r\n    const aiStatus = document.getElementById('ai-status');\r\n    if (aiStatus) {\r\n      aiStatus.textContent = message;\r\n      setTimeout(() => {\r\n        aiStatus.textContent = '';\r\n      }, 2000);\r\n    }\r\n  }\r\n\r\n  private triggerScreenShake(grade: Grade): void {\r\n    if (!this.container) {return;}\r\n\r\n    const settings = this.getSettings();\r\n    if (!settings.animations) {return;} // Skip if animations disabled\r\n\r\n    let intensity = 0;\r\n    let duration = 0;\r\n\r\n    switch (grade) {\r\n      case 'SSS':\r\n        intensity = 8;  // 從20減少至8\r\n        duration = 600;  // 從1200減少至600\r\n        console.log('🌍 REALITY SHAKE - LEGENDARY!!!');\r\n        break;\r\n      case 'SS':\r\n        intensity = 7;  // 從16減少至7\r\n        duration = 550;  // 從1000減少至550\r\n        console.log('🌪️ WORLD SHAKE - MYTHICAL!!');\r\n        break;\r\n      case 'S':\r\n        intensity = 12;\r\n        duration = 800;\r\n        console.log('💥 SCREEN SHAKE - EPIC!');\r\n        break;\r\n      case 'A':\r\n        intensity = 6;\r\n        duration = 500;\r\n        console.log('📳 Screen shake - Great!');\r\n        break;\r\n      case 'B':\r\n        intensity = 3;\r\n        duration = 300;\r\n        console.log('📱 Screen shake - Good!');\r\n        break;\r\n      case 'C':\r\n        // No shake for C grade\r\n        return;\r\n    }\r\n\r\n    // Apply shake animation\r\n    const app = this.container.querySelector('.super-reversi-app') as HTMLElement;\r\n    if (app) {\r\n      app.style.animation = `shake ${duration}ms ease-in-out`;\r\n\r\n      // Add shake keyframes if not exists\r\n      if (!document.getElementById('shake-animation')) {\r\n        const style = document.createElement('style');\r\n        style.id = 'shake-animation';\r\n        style.textContent = `\r\n          @keyframes shake {\r\n            0%, 100% { transform: translate(0, 0) rotate(0deg); }\r\n            10% { transform: translate(-${intensity}px, -${intensity/2}px) rotate(-1deg); }\r\n            20% { transform: translate(${intensity}px, -${intensity}px) rotate(1deg); }\r\n            30% { transform: translate(-${intensity}px, ${intensity/2}px) rotate(0deg); }\r\n            40% { transform: translate(${intensity}px, ${intensity}px) rotate(1deg); }\r\n            50% { transform: translate(-${intensity/2}px, -${intensity}px) rotate(-1deg); }\r\n            60% { transform: translate(${intensity/2}px, ${intensity}px) rotate(0deg); }\r\n            70% { transform: translate(-${intensity/2}px, ${intensity/2}px) rotate(-1deg); }\r\n            80% { transform: translate(${intensity/2}px, -${intensity/2}px) rotate(1deg); }\r\n            90% { transform: translate(-${intensity/4}px, ${intensity/4}px) rotate(0deg); }\r\n          }\r\n        `;\r\n        document.head.appendChild(style);\r\n      }\r\n\r\n      // Remove animation after completion\r\n      setTimeout(() => {\r\n        app.style.animation = '';\r\n      }, duration);\r\n    }\r\n  }\r\n\r\n  // ===== MOBILE DETECTION =====\r\n\r\n  /**\r\n   * 檢測是否為移動設備\r\n   */\r\n  private isMobileDevice(): boolean {\r\n    // Check user agent\r\n    const userAgent = navigator.userAgent.toLowerCase();\r\n    const mobileKeywords = ['mobile', 'android', 'iphone', 'ipad', 'ipod', 'blackberry', 'windows phone'];\r\n    const isMobileUA = mobileKeywords.some(keyword => userAgent.includes(keyword));\r\n\r\n    // Check screen size (mobile typically < 768px width)\r\n    const isSmallScreen = window.innerWidth < 768;\r\n\r\n    // Check for touch support\r\n    const hasTouchSupport = 'ontouchstart' in window || navigator.maxTouchPoints > 0;\r\n\r\n    return isMobileUA || (isSmallScreen && hasTouchSupport);\r\n  }\r\n\r\n  /**\r\n   * 獲取適合設備的AI配置\r\n   */\r\n  private getDeviceOptimizedAIConfig(difficulty: AIDifficulty): { maxDepth: number; timeLimit: number; disableEndgameSolver: boolean } | null {\r\n    const isMobile = this.isMobileDevice();\r\n\r\n    if (!isMobile) {\r\n      return null; // Use default configuration for desktop\r\n    }\r\n\r\n    // Mobile-optimized configurations\r\n    const mobileConfigs: Partial<Record<AIDifficulty, { maxDepth: number; timeLimit: number; disableEndgameSolver: boolean }>> = {\r\n      [AIDifficulty.MINIMAX_HARD]: {\r\n        maxDepth: 6,\r\n        timeLimit: 3000,\r\n        disableEndgameSolver: false,\r\n      },\r\n      [AIDifficulty.ADVANCED]: {\r\n        maxDepth: 6,\r\n        timeLimit: 4000,\r\n        disableEndgameSolver: false,\r\n      },\r\n      [AIDifficulty.MASTER]: {\r\n        maxDepth: 6,\r\n        timeLimit: 5000,\r\n        disableEndgameSolver: true, // Disable endgame solver on mobile\r\n      },\r\n    };\r\n\r\n    return mobileConfigs[difficulty] || null;\r\n  }\r\n\r\n  // ===== AI LOGIC =====\r\n\r\n  private async makeAIMove(): Promise<void> {\r\n    if (!this.gameState || this.gameState.validMoves.size === 0) {return;}\r\n\r\n    // Prevent duplicate AI move requests\r\n    if (this.aiThinking || this.isProcessingMove) {\r\n      console.warn('🚫 AI move request blocked - already thinking or processing');\r\n      return;\r\n    }\r\n\r\n    this.aiThinking = true;\r\n    const aiStatus = document.getElementById('ai-status');\r\n\r\n    // Always ensure AI thinking status is displayed, even for newly created elements\r\n    if (aiStatus) {\r\n      const isMobile = this.isMobileDevice();\r\n      const isHighDifficulty = [AIDifficulty.ADVANCED, AIDifficulty.MASTER].includes(this.gameState.aiDifficulty);\r\n\r\n      let thinkingText = 'AI 正在思考...';\r\n      let additionalInfo = '';\r\n\r\n      if (isMobile && isHighDifficulty) {\r\n        thinkingText = 'AI 正在深度思考...';\r\n        additionalInfo = '<div style=\"font-size: 0.75rem; color: #888; margin-top: 0.25rem;\">手機版建議使用較低難度以獲得更佳體驗</div>';\r\n      }\r\n\r\n      aiStatus.innerHTML = `\r\n        <div class=\"ai-thinking-animation\">\r\n          <div class=\"thinking-dots\">\r\n            <div class=\"thinking-dot\"></div>\r\n            <div class=\"thinking-dot\"></div>\r\n            <div class=\"thinking-dot\"></div>\r\n          </div>\r\n          <span>${thinkingText}</span>\r\n          ${additionalInfo}\r\n        </div>\r\n      `;\r\n      // Force display by setting visibility\r\n      aiStatus.style.display = 'block';\r\n      aiStatus.style.visibility = 'visible';\r\n    } else {\r\n      console.warn('AI status element not found, but AI is thinking');\r\n    }\r\n\r\n    // Set up variables for timeout handling\r\n    let warningTimer: NodeJS.Timeout | null = null;\r\n    let emergencyTimer: NodeJS.Timeout | null = null;\r\n\r\n    try {\r\n      // Convert to core game state format\r\n      const coreGameState = this.convertToCoreGameState(this.gameState);\r\n      const aiStartTime = Date.now();\r\n      const timeLimit = this.getAITimeLimit(this.gameState.aiDifficulty);\r\n\r\n      // Create AI move request\r\n      const request: AIMoveRequest = {\r\n        gameState: coreGameState,\r\n        player: this.gameState.currentPlayer === BLACK ? PlayerColor.BLACK : PlayerColor.WHITE,\r\n        difficulty: this.gameState.aiDifficulty,\r\n        timeLimit,\r\n        priority: 5, // Normal priority\r\n      };\r\n\r\n      // Set up performance monitoring and timeout protection\r\n      const isMobile = this.isMobileDevice();\r\n      const warningTimeThreshold = isMobile ? 3000 : 8000; // Show warning after 3s on mobile, 8s on desktop\r\n      const maxTimeThreshold = isMobile ? 15000 : 30000; // Force timeout after 15s on mobile, 30s on desktop\r\n\r\n      warningTimer = setTimeout(() => {\r\n        if (this.aiThinking && aiStatus) {\r\n          aiStatus.innerHTML = `\r\n            <div class=\"ai-thinking-animation\">\r\n              <div class=\"thinking-dots\">\r\n                <div class=\"thinking-dot\"></div>\r\n                <div class=\"thinking-dot\"></div>\r\n                <div class=\"thinking-dot\"></div>\r\n              </div>\r\n              <span>AI 正在深度分析...</span>\r\n              <div style=\"font-size: 0.75rem; color: #f39c12; margin-top: 0.25rem;\">\r\n                ⚡ ${isMobile ? '手機版處理較慢，請稍候' : '複雜局面需要更多時間'}\r\n              </div>\r\n            </div>\r\n          `;\r\n        }\r\n      }, warningTimeThreshold);\r\n\r\n      // Emergency timeout protection\r\n      emergencyTimer = setTimeout(() => {\r\n        if (this.aiThinking && !this.isProcessingMove) {\r\n          console.warn('🚨 Emergency AI timeout triggered after', maxTimeThreshold, 'ms');\r\n          if (warningTimer) clearTimeout(warningTimer);\r\n\r\n          // Stop AI Manager thinking to prevent race condition\r\n          if (defaultAIManager.isThinking()) {\r\n            console.log('🛑 Stopping AI Manager before emergency fallback');\r\n            defaultAIManager.stopThinking();\r\n          }\r\n\r\n          // Force stop AI and set processing flag to prevent conflicts\r\n          this.aiThinking = false;\r\n          this.isProcessingMove = true;\r\n\r\n          if (aiStatus) {\r\n            aiStatus.innerHTML = `\r\n              <div class=\"ai-error-display\">\r\n                <div style=\"color: #e74c3c; font-weight: 500; margin-bottom: 0.25rem;\">\r\n                  ⚠️ AI 超時保護啟動\r\n                </div>\r\n                <div style=\"font-size: 0.75rem; color: #888;\">\r\n                  ${isMobile ? '自動降級為隨機移動' : '執行備用隨機策略'}\r\n                </div>\r\n              </div>\r\n            `;\r\n            setTimeout(() => {\r\n              if (aiStatus) aiStatus.textContent = '';\r\n            }, 3000);\r\n          }\r\n\r\n          // Make random fallback move directly without triggering AI\r\n          const moves = Array.from(this.gameState!.validMoves);\r\n          if (moves.length > 0) {\r\n            const randomMove = moves[Math.floor(Math.random() * moves.length)]!;\r\n            console.log('🎲 Emergency fallback to random move:', randomMove);\r\n\r\n            // Use a small delay to ensure state is clean\r\n            setTimeout(() => {\r\n              this.makeMove(randomMove);\r\n              this.isProcessingMove = false;\r\n            }, 100);\r\n          } else {\r\n            this.isProcessingMove = false;\r\n          }\r\n        }\r\n      }, maxTimeThreshold);\r\n\r\n      // Request move from AI manager\r\n      const result = await defaultAIManager.requestMove(request);\r\n      if (warningTimer) clearTimeout(warningTimer);\r\n      if (emergencyTimer) clearTimeout(emergencyTimer);\r\n\r\n      // Performance tracking and logging\r\n      const actualThinkingTime = Date.now() - aiStartTime;\r\n      const thinkingTime = (result.thinkingTime / 1000).toFixed(1);\r\n      const depth = result.depth || 0;\r\n      const confidence = (result.confidence * 100).toFixed(0);\r\n      const nodesEvaluated = result.nodesEvaluated || 0;\r\n\r\n      // Log performance for debugging\r\n      console.log(`🤖 AI Performance: ${thinkingTime}s (${this.gameState.aiDifficulty}), Depth: ${depth}, Mobile: ${isMobile}`);\r\n\r\n      // Check if AI took longer than expected\r\n      const wasSlowOnMobile = isMobile && actualThinkingTime > 5000;\r\n      const wasSlowOnDesktop = !isMobile && actualThinkingTime > 15000;\r\n\r\n      // Update AI status with thinking info\r\n      if (aiStatus) {\r\n        let performanceWarning = '';\r\n        if (wasSlowOnMobile) {\r\n          performanceWarning = '<div style=\"font-size: 0.75rem; color: #e67e22; margin-top: 0.25rem;\">💡 考慮使用較低AI難度以加快遊戲速度</div>';\r\n        } else if (wasSlowOnDesktop) {\r\n          performanceWarning = '<div style=\"font-size: 0.75rem; color: #e67e22; margin-top: 0.25rem;\">💡 複雜局面需要更多計算時間</div>';\r\n        }\r\n\r\n        aiStatus.innerHTML = `\r\n          <div class=\"ai-info-display\">\r\n            <div style=\"color: var(--color-primary); font-weight: 500; margin-bottom: 0.25rem;\">\r\n              🤖 AI 計算完成\r\n            </div>\r\n            <div class=\"ai-info\">\r\n              <div>⏱️ ${thinkingTime}s</div>\r\n              <div>🔍 深度 ${depth}</div>\r\n              <div>🎯 ${confidence}%</div>\r\n              ${nodesEvaluated > 0 ? `<div>🧮 ${nodesEvaluated.toLocaleString()} 節點</div>` : ''}\r\n            </div>\r\n            ${performanceWarning}\r\n          </div>\r\n        `;\r\n      }\r\n\r\n      // Add small delay for UI feedback\r\n      setTimeout(() => {\r\n        if (!this.isProcessingMove) { // Only proceed if not in emergency mode\r\n          this.makeMove(result.position);\r\n\r\n          if (aiStatus) {\r\n            aiStatus.textContent = '';\r\n          }\r\n          this.aiThinking = false;\r\n        } else {\r\n          console.log('🚫 Skipping normal AI move completion - emergency mode active');\r\n        }\r\n      }, 300);\r\n\r\n    } catch (error) {\r\n      // Clear all timers in case of error\r\n      if (warningTimer) clearTimeout(warningTimer);\r\n      if (emergencyTimer) clearTimeout(emergencyTimer);\r\n      console.error('AI move failed:', error);\r\n      const isMobile = this.isMobileDevice();\r\n\r\n      // Show error message with helpful suggestions\r\n      if (aiStatus) {\r\n        const errorMsg = error instanceof Error ? error.message : String(error);\r\n        const isTimeout = errorMsg.includes('timeout') || errorMsg.includes('時間');\r\n        const errorMessage = isTimeout ? '思考超時' : '計算失敗';\r\n        const suggestion = isMobile\r\n          ? '建議降低AI難度或重新開始遊戲'\r\n          : '請重試或降低AI難度';\r\n\r\n        aiStatus.innerHTML = `\r\n          <div class=\"ai-error-display\">\r\n            <div style=\"color: #e74c3c; font-weight: 500; margin-bottom: 0.25rem;\">\r\n              ⚠️ AI ${errorMessage}\r\n            </div>\r\n            <div style=\"font-size: 0.75rem; color: #888;\">\r\n              ${suggestion}\r\n            </div>\r\n          </div>\r\n        `;\r\n\r\n        // Clear error message after delay\r\n        setTimeout(() => {\r\n          if (aiStatus) {\r\n            aiStatus.textContent = '';\r\n          }\r\n        }, 3000);\r\n      }\r\n\r\n      // Fallback to simple random move\r\n      const moves = Array.from(this.gameState.validMoves);\r\n      if (moves.length > 0) {\r\n        const randomMove = moves[Math.floor(Math.random() * moves.length)]!;\r\n        console.log('🎲 Falling back to random move due to AI error');\r\n        this.makeMove(randomMove);\r\n      }\r\n\r\n      this.aiThinking = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert game state to core game state format\r\n   */\r\n  private convertToCoreGameState(gameState: GameState): CoreGameState {\r\n    // Convert board to Uint8Array\r\n    const board = new Uint8Array(64);\r\n    for (let i = 0; i < 64; i++) {\r\n      board[i] = gameState.board[i] === BLACK ? PlayerColor.BLACK :\r\n                 gameState.board[i] === WHITE ? PlayerColor.WHITE :\r\n                 PlayerColor.EMPTY;\r\n    }\r\n\r\n    // Convert valid moves to Map format\r\n    const validMoves = new Map<number, readonly number[]>();\r\n    for (const position of gameState.validMoves) {\r\n      const flipped = this.getFlippedPieces(position, gameState.currentPlayer);\r\n      validMoves.set(position, flipped);\r\n    }\r\n\r\n    return {\r\n      board,\r\n      currentPlayer: gameState.currentPlayer === BLACK ? PlayerColor.BLACK : PlayerColor.WHITE,\r\n      validMoves,\r\n      scores: {\r\n        black: gameState.blackScore,\r\n        white: gameState.whiteScore,\r\n      },\r\n      gameOver: gameState.isGameOver,\r\n      consecutivePasses: gameState.consecutivePasses || 0,\r\n    } as unknown as CoreGameState;\r\n  }\r\n\r\n  /**\r\n   * Get AI time limit based on difficulty and device\r\n   */\r\n  private getAITimeLimit(difficulty: AIDifficulty): number {\r\n    // Check for mobile-optimized configuration\r\n    const mobileConfig = this.getDeviceOptimizedAIConfig(difficulty);\r\n    if (mobileConfig && mobileConfig.timeLimit) {\r\n      console.log(`📱 Using mobile-optimized timeout: ${mobileConfig.timeLimit}ms for ${difficulty}`);\r\n      return mobileConfig.timeLimit;\r\n    }\r\n\r\n    // Default time settings for desktop\r\n    const timeSettings = {\r\n      [AIDifficulty.RANDOM]: 200,\r\n      [AIDifficulty.GREEDY]: 1000,\r\n      [AIDifficulty.MINIMAX_EASY]: 2000,\r\n      [AIDifficulty.MINIMAX]: 3000,\r\n      [AIDifficulty.MINIMAX_HARD]: 4000,\r\n      [AIDifficulty.ADVANCED]: 5000,\r\n      [AIDifficulty.MASTER]: 10000,\r\n      [AIDifficulty.BLITZ]: 1500,\r\n      [AIDifficulty.CUSTOM]: 5000,\r\n    };\r\n\r\n    return timeSettings[difficulty] || 3000;\r\n  }\r\n\r\n  // Helper functions for special effects detection\r\n  private isEdgePosition(position: number): boolean {\r\n    const row = Math.floor(position / 8);\r\n    const col = position % 8;\r\n    return (row === 0 || row === 7 || col === 0 || col === 7) &&\r\n           !(position === 0 || position === 7 || position === 56 || position === 63);\r\n  }\r\n\r\n  private isChainMove(flippedPositions: number[]): boolean {\r\n    if (!this.gameState || this.gameState.moveHistory.length === 0) {return false;}\r\n\r\n    // Check if this move flips pieces that were recently placed/flipped\r\n    const lastMove = this.gameState.moveHistory[this.gameState.moveHistory.length - 1];\r\n\r\n    // If last move flipped a lot and this move also flips a lot, it's likely a chain\r\n    return (lastMove as any)?.flipped?.length >= 3 && flippedPositions.length >= 3;\r\n  }\r\n\r\n  private isComebackMove(): boolean {\r\n    if (!this.gameState) {return false;}\r\n\r\n    const scoreDiff = this.gameState.currentPlayer === BLACK ?\r\n      this.gameState.blackScore - this.gameState.whiteScore :\r\n      this.gameState.whiteScore - this.gameState.blackScore;\r\n\r\n    // Comeback if currently losing by 5+ pieces\r\n    return scoreDiff <= -5;\r\n  }\r\n\r\n  private isDominationMove(): boolean {\r\n    if (!this.gameState) {return false;}\r\n\r\n    const scoreDiff = this.gameState.currentPlayer === BLACK ?\r\n      this.gameState.blackScore - this.gameState.whiteScore :\r\n      this.gameState.whiteScore - this.gameState.blackScore;\r\n\r\n    // Domination if currently winning by 10+ pieces\r\n    return scoreDiff >= 10;\r\n  }\r\n\r\n  // Simple Modal Methods\r\n  private showSimpleConfirm(message: string, title?: string): Promise<boolean> {\r\n    return new Promise((resolve) => {\r\n      const modal = document.getElementById('simple-modal');\r\n      const modalTitle = document.getElementById('modal-title');\r\n      const modalMessage = document.getElementById('modal-message');\r\n      const confirmBtn = document.getElementById('modal-confirm');\r\n      const cancelBtn = document.getElementById('modal-cancel');\r\n\r\n      if (!modal || !modalTitle || !modalMessage || !confirmBtn || !cancelBtn) {\r\n        // Fallback to native confirm\r\n        resolve(confirm(message));\r\n        return;\r\n      }\r\n\r\n      // Set modal content with i18n support\r\n      modalTitle.textContent = title || t('modal.confirm.title');\r\n      modalMessage.textContent = message;\r\n\r\n      // Update button texts with current language\r\n      confirmBtn.textContent = t('modal.confirm');\r\n      cancelBtn.textContent = t('modal.cancel');\r\n\r\n      // Show modal\r\n      modal.style.display = 'flex';\r\n\r\n      // Handle confirm\r\n      const handleConfirm = () => {\r\n        modal.style.display = 'none';\r\n        confirmBtn.removeEventListener('click', handleConfirm);\r\n        cancelBtn.removeEventListener('click', handleCancel);\r\n        resolve(true);\r\n      };\r\n\r\n      // Handle cancel\r\n      const handleCancel = () => {\r\n        modal.style.display = 'none';\r\n        confirmBtn.removeEventListener('click', handleConfirm);\r\n        cancelBtn.removeEventListener('click', handleCancel);\r\n        resolve(false);\r\n      };\r\n\r\n      // Add event listeners\r\n      confirmBtn.addEventListener('click', handleConfirm);\r\n      cancelBtn.addEventListener('click', handleCancel);\r\n\r\n      // Close on backdrop click\r\n      modal.addEventListener('click', (e) => {\r\n        if (e.target === modal) {\r\n          handleCancel();\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n// Initialize application\r\ndocument.addEventListener('DOMContentLoaded', async () => {\r\n  console.log('DOM loaded - initializing Super Reversi');\r\n  const container = document.getElementById('game-container');\r\n\r\n  if (container) {\r\n    try {\r\n      const game = new SuperReversiGame();\r\n      await game.initialize(container);\r\n\r\n      // Store globally for debugging\r\n      (window as any).superReversiGame = game;\r\n\r\n      console.log('🎮 Game ready to play!');\r\n    } catch (error) {\r\n      console.error('Failed to initialize:', error);\r\n      container.innerHTML = `\r\n        <div style=\"padding: 1.25rem; color: red;\">\r\n          <h2>Error Loading Game</h2>\r\n          <p>${error}</p>\r\n        </div>\r\n      `;\r\n    }\r\n  } else {\r\n    console.error('Container not found!');\r\n  }\r\n});\r\n\r\nexport default SuperReversiGame;"],"file":"assets/index-DrUzrlsl.js"}