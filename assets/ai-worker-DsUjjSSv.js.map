{"version":3,"file":"ai-worker-DsUjjSSv.js","sources":["../src/types/game-types.ts","../src/core/ai/ai-strategy-base.ts","../src/core/ai/strategies/random-ai.ts","../src/core/utils/board-utils.ts","../src/core/utils/move-validator.ts","../src/core/utils/move-evaluator.ts","../src/core/ai/strategies/greedy-ai.ts","../src/core/ai/strategies/evaluation.ts","../src/core/ai/game-simulator.ts","../src/core/ai/strategies/minimax-ai.ts","../src/core/ai/strategies/opening-book.ts","../src/core/ai/strategies/endgame-solver.ts","../src/core/ai/strategies/advanced-ai.ts","../src/workers/ai-worker.ts"],"sourcesContent":["/**\r\n * Core Game Type Definitions\r\n *\r\n * Fundamental types used throughout the Super Reversi game.\r\n * These types define the core game state, player information,\r\n * and basic game mechanics.\r\n */\r\n\r\n// Basic game constants\r\nexport const BOARD_SIZE = 8;\r\nexport const TOTAL_SQUARES = 64;\r\nexport const DIRECTIONS = [-9, -8, -7, -1, 1, 7, 8, 9] as const;\r\n\r\n// Player and piece representation\r\nexport enum PlayerColor {\r\n  EMPTY = 0,\r\n  BLACK = 1,\r\n  WHITE = 2,\r\n}\r\n\r\nexport enum PlayerType {\r\n  HUMAN = 'human',\r\n  AI = 'ai',\r\n}\r\n\r\nexport enum GameStatus {\r\n  WAITING = 'waiting',\r\n  IN_PROGRESS = 'in_progress',\r\n  PAUSED = 'paused',\r\n  GAME_OVER = 'game_over',\r\n}\r\n\r\n// Move quality grades\r\nexport enum Grade {\r\n  C = 'C',    // Basic moves (0-9 points)\r\n  B = 'B',    // Good moves (10-17 points)\r\n  A = 'A',    // Great moves (18-29 points)\r\n  S = 'S',    // Exceptional moves (30-44 points)\r\n  SS = 'SS',  // Master moves (45-59 points)\r\n  SSS = 'SSS' // Legendary moves (60+ points)\r\n}\r\n\r\n// AI difficulty levels\r\nexport enum AIDifficulty {\r\n  RANDOM = 'v0',      // Random valid moves\r\n  GREEDY = 'v1',      // Immediate best score\r\n  MINIMAX = 'v2',     // Look-ahead with alpha-beta pruning\r\n  ADVANCED = 'v3',    // Opening book + minimax + endgame solver\r\n  MINIMAX_EASY = 'v2a',    // Minimax depth 2-4\r\n  MINIMAX_HARD = 'v2b',    // Minimax depth 4-6 + features\r\n  MASTER = 'v3_master',    // Maximum strength advanced AI\r\n  BLITZ = 'v3_blitz',     // Fast advanced AI for quick games\r\n  CUSTOM = 'custom',       // User-configurable AI\r\n}\r\n\r\n// Board position (0-63)\r\nexport type BoardPosition = number;\r\n\r\n// Position value constants for scoring\r\nexport const POSITION_VALUES = {\r\n  CORNER: 25,\r\n  EDGE: 6,\r\n  X_SQUARE: -10,  // Diagonal from corner\r\n  C_SQUARE: -6,   // Adjacent to corner\r\n  NORMAL: 0,\r\n} as const;\r\n\r\n// Grade thresholds\r\nexport const GRADE_THRESHOLDS = {\r\n  B: 10,\r\n  A: 18,\r\n  S: 30,\r\n  SS: 45,\r\n  SSS: 60,\r\n} as const;\r\n\r\n// Animation and timing constants\r\nexport const ANIMATION_TIMINGS = {\r\n  PREPARATION: 200,  // ms - 0.2 second prep phase\r\n  FLIP: 400,         // ms - 0.4 second flip animation\r\n  TOTAL: 600,        // ms - Total animation duration\r\n  EFFECTS_MIN: 350,  // ms - Minimum effect duration\r\n  EFFECTS_MAX: 900,  // ms - Maximum effect duration\r\n} as const;\r\n\r\n// Performance limits\r\nexport const PARTICLE_LIMITS = {\r\n  MIN: 1200,\r\n  MAX: 1800,\r\n  LOW_PERFORMANCE: 600,\r\n} as const;\r\n\r\nexport const PERFORMANCE_TARGETS = {\r\n  TARGET_FPS: 60,\r\n  MAX_FRAME_TIME: 16, // ms for 60fps\r\n  AI_RESPONSE_TIME: {\r\n    v0: 100,        // ms - Random should be instant\r\n    v1: 1000,       // ms - Greedy evaluation\r\n    v2: 3000,       // ms - Minimax search\r\n    v3: 5000,       // ms - Advanced with endgame\r\n    v2a: 2000,      // ms - Easy minimax\r\n    v2b: 4000,      // ms - Hard minimax\r\n    v3_master: 10000, // ms - Master level\r\n    v3_blitz: 1500,   // ms - Blitz games\r\n    custom: 5000,     // ms - Default for custom\r\n  },\r\n} as const;\r\n\r\n// Player information\r\nexport interface Player {\r\n  type: PlayerType;\r\n  color: PlayerColor;\r\n  name: string;\r\n  stats: PlayerStats;\r\n}\r\n\r\nexport interface PlayerStats {\r\n  movesPlayed: number;\r\n  averageScore: number;\r\n  gradeDistribution: Record<Grade, number>;\r\n  totalThinkingTime: number;\r\n  gamesWon: number;\r\n  gamesLost: number;\r\n  gamesTied: number;\r\n}\r\n\r\n// Game configuration\r\nexport interface GameOptions {\r\n  playerBlack: PlayerType;\r\n  playerWhite: PlayerType;\r\n  aiDifficulty?: AIDifficulty;\r\n  startingPlayer?: PlayerColor;\r\n  boardSize?: number; // Always 8 for standard Reversi\r\n}\r\n\r\n// Board utilities\r\nexport interface BoardPosition2D {\r\n  row: number;\r\n  col: number;\r\n}\r\n\r\nexport interface Point {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\n// Validation helpers\r\nexport const isValidPosition = (position: BoardPosition): boolean => {\r\n  return position >= 0 && position < TOTAL_SQUARES;\r\n};\r\n\r\nexport const isValidColor = (color: PlayerColor): boolean => {\r\n  return Object.values(PlayerColor).includes(color);\r\n};\r\n\r\nexport const positionToCoords = (position: BoardPosition): BoardPosition2D => {\r\n  return {\r\n    row: Math.floor(position / BOARD_SIZE),\r\n    col: position % BOARD_SIZE,\r\n  };\r\n};\r\n\r\nexport const coordsToPosition = (row: number, col: number): BoardPosition => {\r\n  return row * BOARD_SIZE + col;\r\n};\r\n\r\nexport const positionToPoint = (position: BoardPosition, cellSize: number = 50): Point => {\r\n  const coords = positionToCoords(position);\r\n  return {\r\n    x: coords.col * cellSize + cellSize / 2,\r\n    y: coords.row * cellSize + cellSize / 2,\r\n  };\r\n};\r\n\r\n// Position analysis helpers\r\nexport const isCorner = (position: BoardPosition): boolean => {\r\n  return [0, 7, 56, 63].includes(position);\r\n};\r\n\r\nexport const isEdge = (position: BoardPosition): boolean => {\r\n  const coords = positionToCoords(position);\r\n  return coords.row === 0 || coords.row === 7 || coords.col === 0 || coords.col === 7;\r\n};\r\n\r\nexport const isXSquare = (position: BoardPosition): boolean => {\r\n  // Squares diagonally adjacent to corners\r\n  return [9, 14, 49, 54].includes(position);\r\n};\r\n\r\nexport const isCSquare = (position: BoardPosition): boolean => {\r\n  // Squares adjacent to corners (excluding X-squares)\r\n  return [1, 6, 8, 15, 48, 55, 57, 62].includes(position);\r\n};\r\n\r\nexport const getPositionValue = (position: BoardPosition): number => {\r\n  if (isCorner(position)) {return POSITION_VALUES.CORNER;}\r\n  if (isXSquare(position)) {return POSITION_VALUES.X_SQUARE;}\r\n  if (isCSquare(position)) {return POSITION_VALUES.C_SQUARE;}\r\n  if (isEdge(position)) {return POSITION_VALUES.EDGE;}\r\n  return POSITION_VALUES.NORMAL;\r\n};\r\n\r\n// Direction helpers for move validation\r\nexport const getDirectionOffset = (direction: number): BoardPosition2D => {\r\n  return {\r\n    row: Math.floor(direction / BOARD_SIZE) - 1,\r\n    col: (direction % BOARD_SIZE) - 1,\r\n  };\r\n};\r\n\r\nexport const isValidDirection = (from: BoardPosition, direction: number): boolean => {\r\n  const fromCoords = positionToCoords(from);\r\n  const dirOffset = getDirectionOffset(direction + 8); // Adjust for array indexing\r\n  const newRow = fromCoords.row + dirOffset.row;\r\n  const newCol = fromCoords.col + dirOffset.col;\r\n\r\n  return newRow >= 0 && newRow < BOARD_SIZE && newCol >= 0 && newCol < BOARD_SIZE;\r\n};\r\n\r\n// Type guards\r\nexport const isPlayerColor = (value: unknown): value is PlayerColor => {\r\n  return typeof value === 'number' && Object.values(PlayerColor).includes(value as PlayerColor);\r\n};\r\n\r\nexport const isGrade = (value: unknown): value is Grade => {\r\n  return typeof value === 'string' && Object.values(Grade).includes(value as Grade);\r\n};\r\n\r\nexport const isAIDifficulty = (value: unknown): value is AIDifficulty => {\r\n  return typeof value === 'string' && Object.values(AIDifficulty).includes(value as AIDifficulty);\r\n};\r\n\r\nexport const isGameStatus = (value: unknown): value is GameStatus => {\r\n  return typeof value === 'string' && Object.values(GameStatus).includes(value as GameStatus);\r\n};\r\n\r\n// Error types for game operations\r\nexport class InvalidMoveError extends Error {\r\n  constructor(\r\n    message: string,\r\n    public readonly position: BoardPosition,\r\n    public readonly reason: string,\r\n  ) {\r\n    super(message);\r\n    this.name = 'InvalidMoveError';\r\n  }\r\n}\r\n\r\nexport class GameStateError extends Error {\r\n  constructor(\r\n    message: string,\r\n    public readonly gameStatus: GameStatus,\r\n  ) {\r\n    super(message);\r\n    this.name = 'GameStateError';\r\n  }\r\n}\r\n\r\nexport class AIError extends Error {\r\n  constructor(\r\n    message: string,\r\n    public readonly difficulty: AIDifficulty,\r\n    public readonly cause?: Error,\r\n  ) {\r\n    super(message);\r\n    this.name = 'AIError';\r\n  }\r\n}","/**\r\n * AI Strategy Base Classes\r\n *\r\n * Abstract base classes and interfaces for implementing different AI strategies.\r\n * Provides common structure for v0 (Random), v1 (Greedy), v2 (Minimax), v3 (Advanced).\r\n */\r\n\r\nimport {\r\n  BoardPosition,\r\n  PlayerColor,\r\n  AIDifficulty,\r\n  PERFORMANCE_TARGETS,\r\n} from '@/types/game-types';\r\nimport type { GameState } from '@/core/models/GameState';\r\n// import type { Move } from '@/core/models/Move';\r\n\r\n/**\r\n * AI move selection result\r\n */\r\nexport interface AIMoveResult {\r\n  readonly position: BoardPosition;\r\n  readonly confidence: number; // 0-1, how confident the AI is in this move\r\n  readonly evaluation: number; // Numeric evaluation score\r\n  readonly thinkingTime: number; // Time spent calculating (ms)\r\n  readonly depth?: number; // Search depth used (for minimax variants)\r\n  readonly nodesEvaluated?: number; // Nodes explored (for analytics)\r\n}\r\n\r\n/**\r\n * AI thinking process metadata\r\n */\r\nexport interface AIThinkingProcess {\r\n  readonly startTime: number;\r\n  readonly targetTime: number; // Maximum thinking time allowed\r\n  readonly depth: number; // Current search depth\r\n  readonly nodesEvaluated: number;\r\n  readonly bestMove?: BoardPosition;\r\n  readonly bestScore?: number;\r\n}\r\n\r\n/**\r\n * AI performance metrics\r\n */\r\nexport interface AIPerformanceMetrics {\r\n  readonly averageThinkingTime: number;\r\n  readonly movesPlayed: number;\r\n  readonly totalNodesEvaluated: number;\r\n  readonly averageDepth: number;\r\n  readonly timeoutCount: number; // How many times AI hit time limit\r\n  readonly accuracy: number; // Estimated move quality (0-1)\r\n}\r\n\r\n/**\r\n * Base interface for all AI strategies\r\n */\r\nexport interface IAIStrategy {\r\n  readonly difficulty: AIDifficulty;\r\n  readonly name: string;\r\n  readonly description: string;\r\n\r\n  /**\r\n   * Select the best move for the given game state\r\n   */\r\n  selectMove(\r\n    gameState: GameState,\r\n    player: PlayerColor,\r\n    timeLimit?: number\r\n  ): Promise<AIMoveResult>;\r\n\r\n  /**\r\n   * Get current performance metrics\r\n   */\r\n  getPerformanceMetrics(): AIPerformanceMetrics;\r\n\r\n  /**\r\n   * Reset performance metrics\r\n   */\r\n  resetMetrics(): void;\r\n\r\n  /**\r\n   * Check if AI is currently thinking\r\n   */\r\n  isThinking(): boolean;\r\n\r\n  /**\r\n   * Stop current thinking process (for timeout/cancellation)\r\n   */\r\n  stopThinking(): void;\r\n}\r\n\r\n/**\r\n * Abstract base class for AI strategies\r\n */\r\nexport abstract class AIStrategyBase implements IAIStrategy {\r\n  public abstract readonly difficulty: AIDifficulty;\r\n  public abstract readonly name: string;\r\n  public abstract readonly description: string;\r\n\r\n  protected _isThinking = false;\r\n  protected _shouldStop = false;\r\n  protected _metrics: AIPerformanceMetrics = {\r\n    averageThinkingTime: 0,\r\n    movesPlayed: 0,\r\n    totalNodesEvaluated: 0,\r\n    averageDepth: 0,\r\n    timeoutCount: 0,\r\n    accuracy: 0,\r\n  };\r\n\r\n  protected _thinkingHistory: number[] = [];\r\n  protected _depthHistory: number[] = [];\r\n  protected _nodeHistory: number[] = [];\r\n\r\n  /**\r\n   * Main move selection interface\r\n   */\r\n  async selectMove(\r\n    gameState: GameState,\r\n    player: PlayerColor,\r\n    timeLimit?: number,\r\n  ): Promise<AIMoveResult> {\r\n    const startTime = Date.now();\r\n    const targetTime = timeLimit || this.getDefaultTimeLimit();\r\n\r\n    this._isThinking = true;\r\n    this._shouldStop = false;\r\n\r\n    try {\r\n      const result = await this.selectMoveImpl(gameState, player, targetTime);\r\n      const actualThinkingTime = Date.now() - startTime;\r\n\r\n      // Update metrics\r\n      this.updateMetrics(result, actualThinkingTime, targetTime);\r\n\r\n      return {\r\n        ...result,\r\n        thinkingTime: actualThinkingTime,\r\n      };\r\n    } finally {\r\n      this._isThinking = false;\r\n      this._shouldStop = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Abstract method that subclasses must implement\r\n   */\r\n  protected abstract selectMoveImpl(\r\n    gameState: GameState,\r\n    player: PlayerColor,\r\n    timeLimit: number\r\n  ): Promise<AIMoveResult>;\r\n\r\n  /**\r\n   * Get default time limit for this difficulty level\r\n   */\r\n  protected getDefaultTimeLimit(): number {\r\n    return PERFORMANCE_TARGETS.AI_RESPONSE_TIME[this.difficulty] || 1000;\r\n  }\r\n\r\n  /**\r\n   * Check if we should stop thinking (timeout or cancellation)\r\n   */\r\n  protected shouldStop(startTime: number, timeLimit: number): boolean {\r\n    return this._shouldStop || (Date.now() - startTime) >= timeLimit;\r\n  }\r\n\r\n  /**\r\n   * Update performance metrics after a move\r\n   */\r\n  protected updateMetrics(\r\n    result: AIMoveResult,\r\n    actualTime: number,\r\n    timeLimit: number,\r\n  ): void {\r\n    this._thinkingHistory.push(actualTime);\r\n    if (result.depth !== undefined) {\r\n      this._depthHistory.push(result.depth);\r\n    }\r\n    if (result.nodesEvaluated !== undefined) {\r\n      this._nodeHistory.push(result.nodesEvaluated);\r\n    }\r\n\r\n    const movesPlayed = this._thinkingHistory.length;\r\n    const totalThinkingTime = this._thinkingHistory.reduce((sum, time) => sum + time, 0);\r\n    const totalNodes = this._nodeHistory.reduce((sum, nodes) => sum + nodes, 0);\r\n    const totalDepth = this._depthHistory.reduce((sum, depth) => sum + depth, 0);\r\n\r\n    this._metrics = {\r\n      averageThinkingTime: totalThinkingTime / movesPlayed,\r\n      movesPlayed,\r\n      totalNodesEvaluated: totalNodes,\r\n      averageDepth: this._depthHistory.length > 0 ? totalDepth / this._depthHistory.length : 0,\r\n      timeoutCount: this._metrics.timeoutCount + (actualTime >= timeLimit ? 1 : 0),\r\n      accuracy: this.estimateAccuracy(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Estimate move accuracy based on thinking time and difficulty\r\n   */\r\n  protected estimateAccuracy(): number {\r\n    if (this._metrics.movesPlayed === 0) {return 0;}\r\n\r\n    const targetTime = this.getDefaultTimeLimit();\r\n    const actualTime = this._metrics.averageThinkingTime;\r\n\r\n    // Simple heuristic: accuracy increases with thinking time up to target\r\n    const timeRatio = Math.min(actualTime / targetTime, 1.0);\r\n    const baseAccuracy = this.getBaseAccuracy();\r\n\r\n    return Math.min(baseAccuracy + (timeRatio * 0.3), 1.0);\r\n  }\r\n\r\n  /**\r\n   * Get base accuracy for this difficulty level\r\n   */\r\n  protected getBaseAccuracy(): number {\r\n    switch (this.difficulty) {\r\n      case AIDifficulty.RANDOM: return 0.1;  // Very low accuracy\r\n      case AIDifficulty.GREEDY: return 0.6;  // Decent accuracy\r\n      case AIDifficulty.MINIMAX: return 0.8; // High accuracy\r\n      case AIDifficulty.ADVANCED: return 0.9; // Very high accuracy\r\n      default: return 0.5;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current performance metrics\r\n   */\r\n  getPerformanceMetrics(): AIPerformanceMetrics {\r\n    return { ...this._metrics };\r\n  }\r\n\r\n  /**\r\n   * Reset performance metrics\r\n   */\r\n  resetMetrics(): void {\r\n    this._metrics = {\r\n      averageThinkingTime: 0,\r\n      movesPlayed: 0,\r\n      totalNodesEvaluated: 0,\r\n      averageDepth: 0,\r\n      timeoutCount: 0,\r\n      accuracy: 0,\r\n    };\r\n    this._thinkingHistory = [];\r\n    this._depthHistory = [];\r\n    this._nodeHistory = [];\r\n  }\r\n\r\n  /**\r\n   * Check if AI is currently thinking\r\n   */\r\n  isThinking(): boolean {\r\n    return this._isThinking;\r\n  }\r\n\r\n  /**\r\n   * Stop current thinking process\r\n   */\r\n  stopThinking(): void {\r\n    this._shouldStop = true;\r\n  }\r\n}\r\n\r\n/**\r\n * Utility functions for AI implementations\r\n */\r\nexport class AIUtils {\r\n  /**\r\n   * Add random jitter to move selection to avoid predictable play\r\n   */\r\n  static addJitter(baseScore: number, jitterAmount = 0.1): number {\r\n    const jitter = (Math.random() - 0.5) * 2 * jitterAmount;\r\n    return baseScore + jitter;\r\n  }\r\n\r\n  /**\r\n   * Select move from candidates with weighted randomization\r\n   */\r\n  static selectWeightedRandom<T extends { score: number }>(\r\n    candidates: T[],\r\n    temperature = 1.0,\r\n  ): T {\r\n    if (candidates.length === 0) {\r\n      throw new Error('No candidates to select from');\r\n    }\r\n\r\n    if (candidates.length === 1) {\r\n      return candidates[0] as T;\r\n    }\r\n\r\n    // Apply temperature scaling to scores\r\n    const scaledCandidates = candidates.map(candidate => ({\r\n      ...candidate,\r\n      weight: Math.exp(candidate.score / temperature),\r\n    }));\r\n\r\n    const totalWeight = scaledCandidates.reduce((sum, candidate) => sum + candidate.weight, 0);\r\n    const randomValue = Math.random() * totalWeight;\r\n\r\n    let cumulativeWeight = 0;\r\n    for (const candidate of scaledCandidates) {\r\n      cumulativeWeight += candidate.weight;\r\n      if (randomValue <= cumulativeWeight) {\r\n        return candidate as T;\r\n      }\r\n    }\r\n\r\n    // Fallback to last candidate (this shouldn't happen but ensures type safety)\r\n    return scaledCandidates[scaledCandidates.length - 1] as T;\r\n  }\r\n\r\n  /**\r\n   * Evaluate position stability for AI decision making\r\n   */\r\n  static evaluatePositionStability(\r\n    gameState: GameState,\r\n    position: BoardPosition,\r\n    player: PlayerColor,\r\n  ): number {\r\n    // Simple stability heuristic based on position type and surrounding pieces\r\n    let stability = 0;\r\n\r\n    // Corner positions are extremely stable\r\n    if ([0, 7, 56, 63].includes(position)) {\r\n      stability += 10;\r\n    }\r\n\r\n    // Edge positions have moderate stability\r\n    const row = Math.floor(position / 8);\r\n    const col = position % 8;\r\n    if (row === 0 || row === 7 || col === 0 || col === 7) {\r\n      stability += 3;\r\n    }\r\n\r\n    // Check for friendly neighbors (increases stability)\r\n    const neighbors = this.getNeighbors(position);\r\n    const friendlyNeighbors = neighbors.filter(pos =>\r\n      gameState.board[pos] === player,\r\n    ).length;\r\n\r\n    stability += friendlyNeighbors * 0.5;\r\n\r\n    return stability;\r\n  }\r\n\r\n  /**\r\n   * Get neighboring positions\r\n   */\r\n  private static getNeighbors(position: BoardPosition): BoardPosition[] {\r\n    const neighbors: BoardPosition[] = [];\r\n    const row = Math.floor(position / 8);\r\n    const col = position % 8;\r\n\r\n    for (let dr = -1; dr <= 1; dr++) {\r\n      for (let dc = -1; dc <= 1; dc++) {\r\n        if (dr === 0 && dc === 0) {continue;}\r\n\r\n        const newRow = row + dr;\r\n        const newCol = col + dc;\r\n\r\n        if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\r\n          neighbors.push(newRow * 8 + newCol);\r\n        }\r\n      }\r\n    }\r\n\r\n    return neighbors;\r\n  }\r\n\r\n  /**\r\n   * Calculate endgame phase (0 = early game, 1 = endgame)\r\n   */\r\n  static getGamePhase(gameState: GameState): number {\r\n    const totalPieces = gameState.scores.black + gameState.scores.white;\r\n    const maxPieces = 64;\r\n    return totalPieces / maxPieces;\r\n  }\r\n\r\n  /**\r\n   * Simple mobility calculation\r\n   */\r\n  static calculateMobility(gameState: GameState, _player: PlayerColor): number {\r\n    return gameState.validMoves.size;\r\n  }\r\n\r\n  /**\r\n   * Check if position is in dangerous area (X-squares, C-squares)\r\n   */\r\n  static isDangerousPosition(position: BoardPosition): boolean {\r\n    // X-squares (diagonal from corners) and C-squares (adjacent to corners)\r\n    const dangerousPositions = [\r\n      1, 6, 8, 9, 14, 15, // Top area\r\n      48, 49, 54, 55, 57, 62, // Bottom area\r\n    ];\r\n    return dangerousPositions.includes(position);\r\n  }\r\n}","/**\r\n * Random AI Strategy (v0)\r\n *\r\n * Simplest AI implementation that selects random valid moves.\r\n * Used for testing and as a baseline for other AI strategies.\r\n * Should respond almost instantly (<100ms).\r\n */\r\n\r\nimport { AIDifficulty, PlayerColor, BoardPosition } from '@/types/game-types';\r\nimport type { GameState } from '@/core/models/GameState';\r\nimport { AIStrategyBase, type AIMoveResult, AIUtils } from '../ai-strategy-base';\r\n\r\n/**\r\n * Random AI implementation\r\n */\r\nexport class RandomAI extends AIStrategyBase {\r\n  public readonly difficulty = AIDifficulty.RANDOM;\r\n  public readonly name = 'Random AI';\r\n  public readonly description = 'Selects random valid moves with no strategy';\r\n\r\n  /**\r\n   * Select a random valid move\r\n   */\r\n  protected async selectMoveImpl(\r\n    gameState: GameState,\r\n    _player: PlayerColor,\r\n    _timeLimit: number,\r\n  ): Promise<AIMoveResult> {\r\n    const startTime = Date.now();\r\n\r\n    // Get all valid moves\r\n    const validMoves = Array.from(gameState.validMoves.keys());\r\n\r\n    if (validMoves.length === 0) {\r\n      throw new Error('No valid moves available');\r\n    }\r\n\r\n    // Add tiny random delay to simulate thinking (but stay under 100ms)\r\n    const thinkingDelay = Math.random() * 50; // 0-50ms\r\n    await new Promise(resolve => setTimeout(resolve, thinkingDelay));\r\n\r\n    // Select random move\r\n    const randomIndex = Math.floor(Math.random() * validMoves.length);\r\n    const selectedPosition = validMoves[randomIndex];\r\n\r\n    // Calculate basic evaluation score (just for metrics)\r\n    const evaluation = this.evaluateMove(gameState, selectedPosition!, _player);\r\n\r\n    return {\r\n      position: selectedPosition!,\r\n      confidence: 0.1, // Very low confidence since it's random\r\n      evaluation,\r\n      thinkingTime: Date.now() - startTime,\r\n      depth: 0, // No search depth\r\n      nodesEvaluated: validMoves.length, // Only evaluated immediate moves\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Simple move evaluation for metrics (not used for selection)\r\n   */\r\n  private evaluateMove(\r\n    gameState: GameState,\r\n    position: BoardPosition,\r\n    _player: PlayerColor,\r\n  ): number {\r\n    // Basic evaluation based on position value and flips\r\n    const flippedPositions = gameState.validMoves.get(position) || [];\r\n    let score = 0;\r\n\r\n    // Position value\r\n    if ([0, 7, 56, 63].includes(position)) {\r\n      score += 25; // Corner\r\n    } else if (this.isEdgePosition(position)) {\r\n      score += 6; // Edge\r\n    } else if ([9, 14, 49, 54].includes(position)) {\r\n      score -= 10; // X-square (dangerous)\r\n    }\r\n\r\n    // Flipped pieces\r\n    score += flippedPositions.length;\r\n\r\n    // Add small random component for variety\r\n    score += AIUtils.addJitter(0, 0.5);\r\n\r\n    return score;\r\n  }\r\n\r\n  /**\r\n   * Check if position is on the edge\r\n   */\r\n  private isEdgePosition(position: BoardPosition): boolean {\r\n    const row = Math.floor(position / 8);\r\n    const col = position % 8;\r\n    return row === 0 || row === 7 || col === 0 || col === 7;\r\n  }\r\n}\r\n\r\n/**\r\n * Slightly improved random AI that avoids obviously bad moves\r\n */\r\nexport class SmartRandomAI extends AIStrategyBase {\r\n  public readonly difficulty = AIDifficulty.RANDOM;\r\n  public readonly name = 'Smart Random AI';\r\n  public readonly description = 'Random moves but avoids obviously terrible positions';\r\n\r\n  protected async selectMoveImpl(\r\n    gameState: GameState,\r\n    _player: PlayerColor,\r\n    _timeLimit: number,\r\n  ): Promise<AIMoveResult> {\r\n    const startTime = Date.now();\r\n\r\n    const validMoves = Array.from(gameState.validMoves.keys());\r\n\r\n    if (validMoves.length === 0) {\r\n      throw new Error('No valid moves available');\r\n    }\r\n\r\n    // Categorize moves\r\n    const cornerMoves = validMoves.filter(pos => [0, 7, 56, 63].includes(pos));\r\n    const safeEdgeMoves = validMoves.filter(pos =>\r\n      this.isEdgePosition(pos) && ![0, 7, 56, 63].includes(pos) && !this.isXSquare(pos),\r\n    );\r\n    const xSquareMoves = validMoves.filter(pos => [9, 14, 49, 54].includes(pos));\r\n    const normalMoves = validMoves.filter(pos =>\r\n      !cornerMoves.includes(pos) &&\r\n      !safeEdgeMoves.includes(pos) &&\r\n      !xSquareMoves.includes(pos),\r\n    );\r\n\r\n    let candidateMoves: BoardPosition[];\r\n    let moveType: string;\r\n\r\n    // Selection priority: Corners > Safe edges > Normal > X-squares (last resort)\r\n    if (cornerMoves.length > 0) {\r\n      candidateMoves = cornerMoves;\r\n      moveType = 'corner';\r\n    } else if (safeEdgeMoves.length > 0) {\r\n      candidateMoves = safeEdgeMoves;\r\n      moveType = 'safe_edge';\r\n    } else if (normalMoves.length > 0) {\r\n      candidateMoves = normalMoves;\r\n      moveType = 'normal';\r\n    } else {\r\n      candidateMoves = xSquareMoves;\r\n      moveType = 'x_square';\r\n    }\r\n\r\n    // Add thinking delay\r\n    const thinkingDelay = Math.random() * 75; // 0-75ms\r\n    await new Promise(resolve => setTimeout(resolve, thinkingDelay));\r\n\r\n    // Select random from candidates\r\n    const randomIndex = Math.floor(Math.random() * candidateMoves.length);\r\n    const selectedPosition = candidateMoves[randomIndex];\r\n\r\n    // Evaluate selected move\r\n    const evaluation = this.evaluateMove(gameState, selectedPosition!, _player);\r\n\r\n    // Higher confidence for better move types\r\n    const confidence = this.getConfidenceForMoveType(moveType);\r\n\r\n    return {\r\n      position: selectedPosition!,\r\n      confidence,\r\n      evaluation,\r\n      thinkingTime: Date.now() - startTime,\r\n      depth: 1, // One level of categorization\r\n      nodesEvaluated: validMoves.length,\r\n    };\r\n  }\r\n\r\n  private evaluateMove(\r\n    gameState: GameState,\r\n    position: BoardPosition,\r\n    _player: PlayerColor,\r\n  ): number {\r\n    const flippedPositions = gameState.validMoves.get(position) || [];\r\n    let score = 0;\r\n\r\n    // Position value\r\n    if ([0, 7, 56, 63].includes(position)) {\r\n      score += 25;\r\n    } else if (this.isEdgePosition(position)) {\r\n      score += 6;\r\n    } else if ([9, 14, 49, 54].includes(position)) {\r\n      score -= 10;\r\n    }\r\n\r\n    // Flipped pieces\r\n    score += flippedPositions.length;\r\n\r\n    return score;\r\n  }\r\n\r\n  private isEdgePosition(position: BoardPosition): boolean {\r\n    const row = Math.floor(position / 8);\r\n    const col = position % 8;\r\n    return row === 0 || row === 7 || col === 0 || col === 7;\r\n  }\r\n\r\n  private isXSquare(position: BoardPosition): boolean {\r\n    return [9, 14, 49, 54].includes(position);\r\n  }\r\n\r\n  private getConfidenceForMoveType(moveType: string): number {\r\n    switch (moveType) {\r\n      case 'corner': return 0.8;\r\n      case 'safe_edge': return 0.6;\r\n      case 'normal': return 0.3;\r\n      case 'x_square': return 0.1;\r\n      default: return 0.2;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Factory function to create random AI variants\r\n */\r\nexport const createRandomAI = {\r\n  /**\r\n   * Pure random selection\r\n   */\r\n  pure(): RandomAI {\r\n    return new RandomAI();\r\n  },\r\n\r\n  /**\r\n   * Smart random (avoids obviously bad moves)\r\n   */\r\n  smart(): SmartRandomAI {\r\n    return new SmartRandomAI();\r\n  },\r\n};","/**\n * Board Utilities\n *\n * Core utilities for board position conversion, direction vectors,\n * and spatial relationships in the 8x8 Reversi game.\n */\n\nimport {\n  BOARD_SIZE,\n  TOTAL_SQUARES,\n  DIRECTIONS,\n  BoardPosition,\n  BoardPosition2D,\n  Point,\n  PlayerColor,\n  isValidPosition,\n} from '@/types/game-types';\n\n/**\n * Convert linear board position to 2D coordinates\n */\nexport const positionToCoords = (position: BoardPosition): BoardPosition2D => {\n  if (!isValidPosition(position)) {\n    throw new Error(`Invalid position: ${position}`);\n  }\n  return {\n    row: Math.floor(position / BOARD_SIZE),\n    col: position % BOARD_SIZE,\n  };\n};\n\n/**\n * Convert 2D coordinates to linear board position\n */\nexport const coordsToPosition = (row: number, col: number): BoardPosition => {\n  if (row < 0 || row >= BOARD_SIZE || col < 0 || col >= BOARD_SIZE) {\n    throw new Error(`Invalid coordinates: (${row}, ${col})`);\n  }\n  return row * BOARD_SIZE + col;\n};\n\n/**\n * Convert board position to pixel coordinates for rendering\n */\nexport const positionToPixel = (\n  position: BoardPosition,\n  cellSize: number,\n  boardOffset: Point = { x: 0, y: 0 },\n): Point => {\n  const coords = positionToCoords(position);\n  return {\n    x: boardOffset.x + coords.col * cellSize + cellSize / 2,\n    y: boardOffset.y + coords.row * cellSize + cellSize / 2,\n  };\n};\n\n/**\n * Convert pixel coordinates to board position\n */\nexport const pixelToPosition = (\n  pixel: Point,\n  cellSize: number,\n  boardOffset: Point = { x: 0, y: 0 },\n): BoardPosition | null => {\n  const col = Math.floor((pixel.x - boardOffset.x) / cellSize);\n  const row = Math.floor((pixel.y - boardOffset.y) / cellSize);\n\n  if (row < 0 || row >= BOARD_SIZE || col < 0 || col >= BOARD_SIZE) {\n    return null;\n  }\n\n  return coordsToPosition(row, col);\n};\n\n/**\n * Check if two positions are adjacent\n */\nexport const areAdjacent = (pos1: BoardPosition, pos2: BoardPosition): boolean => {\n  if (!isValidPosition(pos1) || !isValidPosition(pos2)) {\n    return false;\n  }\n\n  const coords1 = positionToCoords(pos1);\n  const coords2 = positionToCoords(pos2);\n\n  const rowDiff = Math.abs(coords1.row - coords2.row);\n  const colDiff = Math.abs(coords1.col - coords2.col);\n\n  return (rowDiff <= 1 && colDiff <= 1) && (rowDiff + colDiff > 0);\n};\n\n/**\n * Get distance between two positions\n */\nexport const getDistance = (pos1: BoardPosition, pos2: BoardPosition): number => {\n  const coords1 = positionToCoords(pos1);\n  const coords2 = positionToCoords(pos2);\n\n  return Math.max(\n    Math.abs(coords1.row - coords2.row),\n    Math.abs(coords1.col - coords2.col),\n  );\n};\n\n/**\n * Get all positions in a direction from a starting position\n */\nexport const getPositionsInDirection = (\n  start: BoardPosition,\n  direction: number,\n): BoardPosition[] => {\n  const positions: BoardPosition[] = [];\n  const startCoords = positionToCoords(start);\n\n  // Direction mappings: -9=NW, -8=N, -7=NE, -1=W, 1=E, 7=SW, 8=S, 9=SE\n  const dirRow = Math.floor(direction / 3) - 1;\n  const dirCol = (direction % 3) - 1;\n\n  let currentRow = startCoords.row + dirRow;\n  let currentCol = startCoords.col + dirCol;\n\n  while (currentRow >= 0 && currentRow < BOARD_SIZE &&\n         currentCol >= 0 && currentCol < BOARD_SIZE) {\n    positions.push(coordsToPosition(currentRow, currentCol));\n    currentRow += dirRow;\n    currentCol += dirCol;\n  }\n\n  return positions;\n};\n\n/**\n * Get all neighbors of a position\n */\nexport const getNeighbors = (position: BoardPosition): BoardPosition[] => {\n  const neighbors: BoardPosition[] = [];\n  const coords = positionToCoords(position);\n\n  for (let rowOffset = -1; rowOffset <= 1; rowOffset++) {\n    for (let colOffset = -1; colOffset <= 1; colOffset++) {\n      if (rowOffset === 0 && colOffset === 0) {continue;}\n\n      const newRow = coords.row + rowOffset;\n      const newCol = coords.col + colOffset;\n\n      if (newRow >= 0 && newRow < BOARD_SIZE &&\n          newCol >= 0 && newCol < BOARD_SIZE) {\n        neighbors.push(coordsToPosition(newRow, newCol));\n      }\n    }\n  }\n\n  return neighbors;\n};\n\n/**\n * Get positions along the edges of the board\n */\nexport const getEdgePositions = (): BoardPosition[] => {\n  const edges: BoardPosition[] = [];\n\n  // Top and bottom rows\n  for (let col = 0; col < BOARD_SIZE; col++) {\n    edges.push(coordsToPosition(0, col));\n    edges.push(coordsToPosition(BOARD_SIZE - 1, col));\n  }\n\n  // Left and right columns (excluding corners already added)\n  for (let row = 1; row < BOARD_SIZE - 1; row++) {\n    edges.push(coordsToPosition(row, 0));\n    edges.push(coordsToPosition(row, BOARD_SIZE - 1));\n  }\n\n  return edges;\n};\n\n/**\n * Get corner positions\n */\nexport const getCornerPositions = (): BoardPosition[] => {\n  return [0, 7, 56, 63];\n};\n\n/**\n * Get positions that are diagonally adjacent to corners (X-squares)\n */\nexport const getXSquarePositions = (): BoardPosition[] => {\n  return [9, 14, 49, 54];\n};\n\n/**\n * Get positions that are adjacent to corners but not X-squares (C-squares)\n */\nexport const getCSquarePositions = (): BoardPosition[] => {\n  return [1, 6, 8, 15, 48, 55, 57, 62];\n};\n\n/**\n * Check if a position is on the board edge\n */\nexport const isOnEdge = (position: BoardPosition): boolean => {\n  const coords = positionToCoords(position);\n  return coords.row === 0 || coords.row === BOARD_SIZE - 1 ||\n         coords.col === 0 || coords.col === BOARD_SIZE - 1;\n};\n\n/**\n * Check if a position is a corner\n */\nexport const isCorner = (position: BoardPosition): boolean => {\n  return getCornerPositions().includes(position);\n};\n\n/**\n * Check if a position is an X-square (diagonal from corner)\n */\nexport const isXSquare = (position: BoardPosition): boolean => {\n  return getXSquarePositions().includes(position);\n};\n\n/**\n * Check if a position is a C-square (adjacent to corner)\n */\nexport const isCSquare = (position: BoardPosition): boolean => {\n  return getCSquarePositions().includes(position);\n};\n\n/**\n * Get the board notation for a position (e.g., \"a1\", \"h8\")\n */\nexport const getPositionNotation = (position: BoardPosition): string => {\n  const coords = positionToCoords(position);\n  const colLetter = String.fromCharCode(97 + coords.col); // 'a' + col\n  const rowNumber = coords.row + 1;\n  return `${colLetter}${rowNumber}`;\n};\n\n/**\n * Parse board notation to position\n */\nexport const parsePositionNotation = (notation: string): BoardPosition | null => {\n  if (notation.length !== 2) {return null;}\n\n  const colChar = notation.charAt(0).toLowerCase();\n  const rowChar = notation.charAt(1);\n\n  const col = colChar.charCodeAt(0) - 97; // 'a' = 0\n  const row = parseInt(rowChar, 10) - 1;\n\n  if (col < 0 || col >= BOARD_SIZE || row < 0 || row >= BOARD_SIZE || isNaN(row)) {\n    return null;\n  }\n\n  return coordsToPosition(row, col);\n};\n\n/**\n * Calculate direction between two positions\n */\nexport const getDirection = (from: BoardPosition, to: BoardPosition): number | null => {\n  const fromCoords = positionToCoords(from);\n  const toCoords = positionToCoords(to);\n\n  const rowDiff = toCoords.row - fromCoords.row;\n  const colDiff = toCoords.col - fromCoords.col;\n\n  // Normalize to -1, 0, 1\n  const normalizedRow = rowDiff === 0 ? 0 : (rowDiff > 0 ? 1 : -1);\n  const normalizedCol = colDiff === 0 ? 0 : (colDiff > 0 ? 1 : -1);\n\n  // Check if positions are in a straight line\n  if (rowDiff !== 0 && colDiff !== 0 && Math.abs(rowDiff) !== Math.abs(colDiff)) {\n    return null; // Not in a straight line\n  }\n\n  // Convert to direction index\n  return (normalizedRow + 1) * 3 + (normalizedCol + 1) - 4;\n};\n\n/**\n * Get all positions between two positions (exclusive)\n */\nexport const getPositionsBetween = (\n  from: BoardPosition,\n  to: BoardPosition,\n): BoardPosition[] | null => {\n  const direction = getDirection(from, to);\n  if (direction === null) {return null;}\n\n  const positions: BoardPosition[] = [];\n  const fromCoords = positionToCoords(from);\n  const toCoords = positionToCoords(to);\n\n  const rowStep = toCoords.row > fromCoords.row ? 1 : (toCoords.row < fromCoords.row ? -1 : 0);\n  const colStep = toCoords.col > fromCoords.col ? 1 : (toCoords.col < fromCoords.col ? -1 : 0);\n\n  let currentRow = fromCoords.row + rowStep;\n  let currentCol = fromCoords.col + colStep;\n\n  while (currentRow !== toCoords.row || currentCol !== toCoords.col) {\n    positions.push(coordsToPosition(currentRow, currentCol));\n    currentRow += rowStep;\n    currentCol += colStep;\n  }\n\n  return positions;\n};\n\n/**\n * Create empty board\n */\nexport const createEmptyBoard = (): Uint8Array => {\n  return new Uint8Array(TOTAL_SQUARES);\n};\n\n/**\n * Create initial Reversi board setup\n */\nexport const createInitialBoard = (): Uint8Array => {\n  const board = createEmptyBoard();\n\n  // Standard Reversi starting position\n  board[coordsToPosition(3, 3)] = PlayerColor.WHITE;\n  board[coordsToPosition(3, 4)] = PlayerColor.BLACK;\n  board[coordsToPosition(4, 3)] = PlayerColor.BLACK;\n  board[coordsToPosition(4, 4)] = PlayerColor.WHITE;\n\n  return board;\n};\n\n/**\n * Clone board state\n */\nexport const cloneBoard = (board: Uint8Array): Uint8Array => {\n  return new Uint8Array(board);\n};\n\n/**\n * Count pieces of each color on the board\n */\nexport const countPieces = (board: Uint8Array): { black: number; white: number; empty: number } => {\n  let black = 0;\n  let white = 0;\n  let empty = 0;\n\n  for (let i = 0; i < TOTAL_SQUARES; i++) {\n    switch (board[i]) {\n      case PlayerColor.BLACK:\n        black++;\n        break;\n      case PlayerColor.WHITE:\n        white++;\n        break;\n      case PlayerColor.EMPTY:\n        empty++;\n        break;\n    }\n  }\n\n  return { black, white, empty };\n};\n\n/**\n * Get all positions occupied by a specific color\n */\nexport const getPositionsOfColor = (board: Uint8Array, color: PlayerColor): BoardPosition[] => {\n  const positions: BoardPosition[] = [];\n  for (let i = 0; i < TOTAL_SQUARES; i++) {\n    if (board[i] === color) {\n      positions.push(i);\n    }\n  }\n  return positions;\n};\n\n/**\n * Check if board is full\n */\nexport const isBoardFull = (board: Uint8Array): boolean => {\n  return !board.includes(PlayerColor.EMPTY);\n};\n\n/**\n * Convert board to string representation for debugging\n */\nexport const boardToString = (board: Uint8Array): string => {\n  let result = '  a b c d e f g h\\n';\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    result += `${row + 1} `;\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      const position = coordsToPosition(row, col);\n      const piece = board[position];\n      let symbol = '.';\n      if (piece === PlayerColor.BLACK) {symbol = '●';}\n      if (piece === PlayerColor.WHITE) {symbol = '○';}\n      result += symbol + ' ';\n    }\n    result += `${row + 1}\\n`;\n  }\n  result += '  a b c d e f g h\\n';\n  return result;\n};","/**\n * Move Validation Logic\n *\n * Handles validation of Reversi moves including:\n * - Legal move checking\n * - Piece flipping calculation\n * - Valid move generation\n */\n\nimport {\n  BoardPosition,\n  PlayerColor,\n  BOARD_SIZE,\n  TOTAL_SQUARES,\n  InvalidMoveError,\n} from '@/types/game-types';\nimport { positionToCoords } from './board-utils';\n\n/**\n * Validation result for a move attempt\n */\nexport interface MoveValidationResult {\n  isValid: boolean;\n  flippedPositions: BoardPosition[];\n  reason?: string;\n}\n\n/**\n * Check if a move is legal and return flipped positions\n */\nexport const validateMove = (\n  board: Uint8Array,\n  position: BoardPosition,\n  player: PlayerColor,\n): MoveValidationResult => {\n  // Position must be empty\n  if (board[position] !== PlayerColor.EMPTY) {\n    return {\n      isValid: false,\n      flippedPositions: [],\n      reason: 'Position is already occupied',\n    };\n  }\n\n  // Position must be on the board\n  if (position < 0 || position >= TOTAL_SQUARES) {\n    return {\n      isValid: false,\n      flippedPositions: [],\n      reason: 'Position is outside the board',\n    };\n  }\n\n  const flippedPositions = calculateFlips(board, position, player);\n\n  if (flippedPositions.length === 0) {\n    return {\n      isValid: false,\n      flippedPositions: [],\n      reason: 'Move does not flip any opponent pieces',\n    };\n  }\n\n  return {\n    isValid: true,\n    flippedPositions,\n  };\n};\n\n/**\n * Calculate which pieces would be flipped by a move\n */\nexport const calculateFlips = (\n  board: Uint8Array,\n  position: BoardPosition,\n  player: PlayerColor,\n): BoardPosition[] => {\n  const allFlips: BoardPosition[] = [];\n  const opponent = player === PlayerColor.BLACK ? PlayerColor.WHITE : PlayerColor.BLACK;\n\n  // All 8 directions: N, NE, E, SE, S, SW, W, NW\n  const directions = [\n    { row: -1, col: 0 },  // N\n    { row: -1, col: 1 },  // NE\n    { row: 0, col: 1 },   // E\n    { row: 1, col: 1 },   // SE\n    { row: 1, col: 0 },   // S\n    { row: 1, col: -1 },  // SW\n    { row: 0, col: -1 },  // W\n    { row: -1, col: -1 }, // NW\n  ];\n\n  const startCoords = positionToCoords(position);\n\n  for (const direction of directions) {\n    const flipsInDirection = calculateFlipsInDirection(\n      board,\n      startCoords,\n      direction,\n      player,\n      opponent,\n    );\n    allFlips.push(...flipsInDirection);\n  }\n\n  return allFlips;\n};\n\n/**\n * Calculate flips in a specific direction\n */\nfunction calculateFlipsInDirection(\n  board: Uint8Array,\n  startCoords: { row: number; col: number },\n  direction: { row: number; col: number },\n  player: PlayerColor,\n  opponent: PlayerColor,\n): BoardPosition[] {\n  const flips: BoardPosition[] = [];\n  let currentRow = startCoords.row + direction.row;\n  let currentCol = startCoords.col + direction.col;\n\n  // First, collect all consecutive opponent pieces\n  while (\n    currentRow >= 0 && currentRow < BOARD_SIZE &&\n    currentCol >= 0 && currentCol < BOARD_SIZE\n  ) {\n    const currentPosition = currentRow * BOARD_SIZE + currentCol;\n    const currentPiece = board[currentPosition];\n\n    if (currentPiece === opponent) {\n      // Found opponent piece, add to potential flips\n      flips.push(currentPosition);\n    } else if (currentPiece === player) {\n      // Found our piece - flips are valid if we have opponent pieces between\n      return flips.length > 0 ? flips : [];\n    } else {\n      // Found empty square - no valid flips in this direction\n      return [];\n    }\n\n    currentRow += direction.row;\n    currentCol += direction.col;\n  }\n\n  // Reached edge of board without finding our piece - no valid flips\n  return [];\n}\n\n/**\n * Get all valid moves for a player\n */\nexport const getValidMoves = (\n  board: Uint8Array,\n  player: PlayerColor,\n): Map<BoardPosition, BoardPosition[]> => {\n  const validMoves = new Map<BoardPosition, BoardPosition[]>();\n\n  for (let position = 0; position < TOTAL_SQUARES; position++) {\n    if (board[position] === PlayerColor.EMPTY) {\n      const result = validateMove(board, position, player);\n      if (result.isValid) {\n        validMoves.set(position, result.flippedPositions);\n      }\n    }\n  }\n\n  return validMoves;\n};\n\n/**\n * Check if a player has any valid moves\n */\nexport const hasValidMoves = (board: Uint8Array, player: PlayerColor): boolean => {\n  for (let position = 0; position < TOTAL_SQUARES; position++) {\n    if (board[position] === PlayerColor.EMPTY) {\n      const result = validateMove(board, position, player);\n      if (result.isValid) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/**\n * Apply a move to the board (creates new board state)\n */\nexport const applyMove = (\n  board: Uint8Array,\n  position: BoardPosition,\n  player: PlayerColor,\n  flippedPositions: BoardPosition[],\n): Uint8Array => {\n  const newBoard = new Uint8Array(board);\n\n  // Place the new piece\n  newBoard[position] = player;\n\n  // Flip all the captured pieces\n  for (const flipPosition of flippedPositions) {\n    newBoard[flipPosition] = player;\n  }\n\n  return newBoard;\n};\n\n/**\n * Validate and apply a move in one step\n */\nexport const makeMove = (\n  board: Uint8Array,\n  position: BoardPosition,\n  player: PlayerColor,\n): { newBoard: Uint8Array; flippedPositions: BoardPosition[] } => {\n  const validation = validateMove(board, position, player);\n\n  if (!validation.isValid) {\n    throw new InvalidMoveError(\n      validation.reason || 'Invalid move',\n      position,\n      'invalid_move',\n    );\n  }\n\n  const newBoard = applyMove(board, position, player, validation.flippedPositions);\n\n  return {\n    newBoard,\n    flippedPositions: validation.flippedPositions,\n  };\n};\n\n/**\n * Check if game is over (no moves for either player)\n */\nexport const isGameOver = (board: Uint8Array): boolean => {\n  return !hasValidMoves(board, PlayerColor.BLACK) && !hasValidMoves(board, PlayerColor.WHITE);\n};\n\n/**\n * Get game winner based on current board state\n */\nexport const getWinner = (board: Uint8Array): PlayerColor | 'tie' | null => {\n  if (!isGameOver(board)) {\n    return null; // Game not over yet\n  }\n\n  let blackCount = 0;\n  let whiteCount = 0;\n\n  for (let i = 0; i < TOTAL_SQUARES; i++) {\n    if (board[i] === PlayerColor.BLACK) {\n      blackCount++;\n    } else if (board[i] === PlayerColor.WHITE) {\n      whiteCount++;\n    }\n  }\n\n  if (blackCount > whiteCount) {\n    return PlayerColor.BLACK;\n  } else if (whiteCount > blackCount) {\n    return PlayerColor.WHITE;\n  } else {\n    return 'tie';\n  }\n};\n\n/**\n * Check if a position is a corner move\n */\nexport const isCornerMove = (position: BoardPosition): boolean => {\n  return [0, 7, 56, 63].includes(position);\n};\n\n/**\n * Check if a position is an edge move\n */\nexport const isEdgeMove = (position: BoardPosition): boolean => {\n  const coords = positionToCoords(position);\n  return coords.row === 0 || coords.row === 7 || coords.col === 0 || coords.col === 7;\n};\n\n/**\n * Check if a position is adjacent to a corner (dangerous X-square)\n */\nexport const isXSquareMove = (position: BoardPosition): boolean => {\n  return [9, 14, 49, 54].includes(position);\n};\n\n/**\n * Check if a position is next to a corner (C-square)\n */\nexport const isCSquareMove = (position: BoardPosition): boolean => {\n  return [1, 6, 8, 15, 48, 55, 57, 62].includes(position);\n};\n\n/**\n * Calculate mobility (number of valid moves) for a player after a hypothetical move\n */\nexport const calculateMobility = (\n  board: Uint8Array,\n  position: BoardPosition,\n  player: PlayerColor,\n): { playerMobility: number; opponentMobility: number } => {\n  // Apply the hypothetical move\n  const validation = validateMove(board, position, player);\n  if (!validation.isValid) {\n    return { playerMobility: 0, opponentMobility: 0 };\n  }\n\n  const newBoard = applyMove(board, position, player, validation.flippedPositions);\n  const opponent = player === PlayerColor.BLACK ? PlayerColor.WHITE : PlayerColor.BLACK;\n\n  const playerMoves = getValidMoves(newBoard, player);\n  const opponentMoves = getValidMoves(newBoard, opponent);\n\n  return {\n    playerMobility: playerMoves.size,\n    opponentMobility: opponentMoves.size,\n  };\n};\n\n/**\n * Calculate stability score for a position (rough estimate)\n */\nexport const calculateStability = (\n  board: Uint8Array,\n  position: BoardPosition,\n  player: PlayerColor,\n): number => {\n  let stability = 0;\n  const coords = positionToCoords(position);\n\n  // Corner pieces are completely stable\n  if (isCornerMove(position)) {\n    return 10;\n  }\n\n  // Edge pieces have some stability\n  if (isEdgeMove(position)) {\n    stability += 3;\n  }\n\n  // Check if piece is protected by friendly pieces in multiple directions\n  const directions = [\n    { row: -1, col: 0 }, { row: -1, col: 1 }, { row: 0, col: 1 }, { row: 1, col: 1 },\n    { row: 1, col: 0 }, { row: 1, col: -1 }, { row: 0, col: -1 }, { row: -1, col: -1 },\n  ];\n\n  let protectedDirections = 0;\n  for (const dir of directions) {\n    const newRow = coords.row + dir.row;\n    const newCol = coords.col + dir.col;\n\n    if (newRow >= 0 && newRow < BOARD_SIZE && newCol >= 0 && newCol < BOARD_SIZE) {\n      const neighborPos = newRow * BOARD_SIZE + newCol;\n      if (board[neighborPos] === player) {\n        protectedDirections++;\n      }\n    }\n  }\n\n  stability += Math.floor(protectedDirections / 2);\n  return stability;\n};","/**\n * Move Scoring System\n *\n * Evaluates move quality and assigns scores/grades based on:\n * - Position value (corners, edges, X-squares, etc.)\n * - Number of pieces flipped\n * - Stability bonus\n * - Mobility impact\n */\n\nimport {\n  BoardPosition,\n  PlayerColor,\n  Grade,\n  GRADE_THRESHOLDS,\n  POSITION_VALUES,\n} from '@/types/game-types';\nimport type { MoveScore, ScoreBreakdown } from '@/core/models/Move';\nimport {\n  isCornerMove,\n  isEdgeMove,\n  isXSquareMove,\n  isCSquareMove,\n  calculateMobility,\n  calculateStability,\n} from './move-validator';\n\n/**\n * Evaluate a move and return its score and grade\n */\nexport const evaluateMove = (\n  board: Uint8Array,\n  position: BoardPosition,\n  player: PlayerColor,\n  flippedPositions: BoardPosition[],\n): MoveScore => {\n  const breakdown = calculateScoreBreakdown(board, position, player, flippedPositions);\n  const grade = calculateGrade(breakdown.total);\n\n  return {\n    points: breakdown.total,\n    grade,\n    breakdown: Object.freeze(breakdown),\n  };\n};\n\n/**\n * Calculate detailed score breakdown for a move\n */\nexport const calculateScoreBreakdown = (\n  board: Uint8Array,\n  position: BoardPosition,\n  player: PlayerColor,\n  flippedPositions: BoardPosition[],\n): ScoreBreakdown => {\n  const positionValue = calculatePositionValue(position);\n  const flippedCount = flippedPositions.length;\n  const stabilityBonus = calculateStabilityBonus(board, position, player, flippedPositions);\n  const mobilityFactor = calculateMobilityFactor(board, position, player);\n\n  // Base score calculation including mobility difference\n  let baseScore = positionValue + flippedCount + stabilityBonus;\n\n  // Add mobility factor (difference between player and opponent mobility)\n  const total = Math.max(0, Math.floor(baseScore + mobilityFactor));\n\n  return {\n    positionValue,\n    flippedCount,\n    stabilityBonus,\n    mobilityFactor,\n    total,\n  };\n};\n\n/**\n * Calculate position value based on strategic importance\n */\nexport const calculatePositionValue = (position: BoardPosition): number => {\n  if (isCornerMove(position)) {\n    return POSITION_VALUES.CORNER; // 25 points - extremely valuable\n  }\n\n  if (isXSquareMove(position)) {\n    return POSITION_VALUES.X_SQUARE; // -10 points - dangerous, gives opponent corner access\n  }\n\n  if (isCSquareMove(position)) {\n    return POSITION_VALUES.C_SQUARE; // -6 points - somewhat dangerous\n  }\n\n  if (isEdgeMove(position)) {\n    return POSITION_VALUES.EDGE; // 6 points - good for stability\n  }\n\n  return POSITION_VALUES.NORMAL; // 0 points - neutral position\n};\n\n/**\n * Calculate stability bonus for pieces that will become stable\n */\nexport const calculateStabilityBonus = (\n  board: Uint8Array,\n  position: BoardPosition,\n  player: PlayerColor,\n  flippedPositions: BoardPosition[],\n): number => {\n  let stabilityBonus = 0;\n\n  // Bonus for the placed piece\n  const placedStability = calculateStability(board, position, player);\n  stabilityBonus += placedStability;\n\n  // Bonus for newly stable flipped pieces\n  for (const flippedPos of flippedPositions) {\n    const flippedStability = calculateStability(board, flippedPos, player);\n    stabilityBonus += Math.floor(flippedStability / 2); // Half value for flipped pieces\n  }\n\n  return stabilityBonus;\n};\n\n/**\n * Calculate mobility factor as the direct difference between player and opponent mobility\n */\nexport const calculateMobilityFactor = (\n  board: Uint8Array,\n  position: BoardPosition,\n  player: PlayerColor,\n): number => {\n  const mobility = calculateMobility(board, position, player);\n  const mobilityDifference = mobility.playerMobility - mobility.opponentMobility;\n\n  // Return the direct difference (subtraction result)\n  return mobilityDifference;\n};\n\n/**\n * Determine grade based on total score\n */\nexport const calculateGrade = (score: number): Grade => {\n  if (score >= GRADE_THRESHOLDS.SSS) {\n    return Grade.SSS; // 60+ points\n  } else if (score >= GRADE_THRESHOLDS.SS) {\n    return Grade.SS; // 45-59 points\n  } else if (score >= GRADE_THRESHOLDS.S) {\n    return Grade.S; // 30-44 points\n  } else if (score >= GRADE_THRESHOLDS.A) {\n    return Grade.A; // 18-29 points\n  } else if (score >= GRADE_THRESHOLDS.B) {\n    return Grade.B; // 10-17 points\n  } else {\n    return Grade.C; // 0-9 points\n  }\n};\n\n/**\n * Quick evaluation for AI move sorting (simplified version)\n */\nexport const quickEvaluateMove = (\n  _board: Uint8Array,\n  position: BoardPosition,\n  _player: PlayerColor,\n  flippedPositions: BoardPosition[],\n): number => {\n  const positionValue = calculatePositionValue(position);\n  const flippedCount = flippedPositions.length;\n\n  // Simplified calculation for performance\n  return positionValue + flippedCount + (isCornerMove(position) ? 10 : 0);\n};\n\n/**\n * Evaluate all valid moves and return sorted by score\n */\nexport const evaluateAllMoves = (\n  board: Uint8Array,\n  validMoves: Map<BoardPosition, readonly BoardPosition[]> | Map<BoardPosition, BoardPosition[]>,\n  player: PlayerColor,\n): Array<{ position: BoardPosition; score: MoveScore; flippedPositions: BoardPosition[] }> => {\n  const evaluatedMoves: Array<{\n    position: BoardPosition;\n    score: MoveScore;\n    flippedPositions: BoardPosition[];\n  }> = [];\n\n  for (const [position, flippedPositions] of validMoves.entries()) {\n    const score = evaluateMove(board, position, player, [...flippedPositions]);\n    evaluatedMoves.push({ position, score, flippedPositions: [...flippedPositions] });\n  }\n\n  // Sort by score descending (best moves first)\n  return evaluatedMoves.sort((a, b) => b.score.points - a.score.points);\n};\n\n/**\n * Get moves above a certain grade threshold\n */\nexport const getMovesAboveGrade = (\n  evaluatedMoves: Array<{ position: BoardPosition; score: MoveScore; flippedPositions: BoardPosition[] }>,\n  minGrade: Grade,\n): Array<{ position: BoardPosition; score: MoveScore; flippedPositions: BoardPosition[] }> => {\n  const gradeValues = {\n    [Grade.C]: 1,\n    [Grade.B]: 2,\n    [Grade.A]: 3,\n    [Grade.S]: 4,\n    [Grade.SS]: 5,\n    [Grade.SSS]: 6,\n  };\n  const minValue = gradeValues[minGrade];\n\n  return evaluatedMoves.filter(move => gradeValues[move.score.grade] >= minValue);\n};\n\n/**\n * Get the best move from a list of evaluated moves\n */\nexport const getBestMove = (\n  evaluatedMoves: Array<{ position: BoardPosition; score: MoveScore; flippedPositions: BoardPosition[] }>,\n): { position: BoardPosition; score: MoveScore; flippedPositions: BoardPosition[] } | null => {\n  if (evaluatedMoves.length === 0) {return null;}\n\n  // Find highest scoring move\n  let bestMove = evaluatedMoves[0]!;\n  for (const move of evaluatedMoves) {\n    if (move.score.points > bestMove.score.points) {\n      bestMove = move;\n    }\n  }\n\n  return bestMove;\n};\n\n/**\n * Get moves of a specific grade\n */\nexport const getMovesByGrade = (\n  evaluatedMoves: Array<{ position: BoardPosition; score: MoveScore; flippedPositions: BoardPosition[] }>,\n  grade: Grade,\n): Array<{ position: BoardPosition; score: MoveScore; flippedPositions: BoardPosition[] }> => {\n  return evaluatedMoves.filter(move => move.score.grade === grade);\n};\n\n/**\n * Calculate average score of all moves\n */\nexport const calculateAverageScore = (\n  evaluatedMoves: Array<{ position: BoardPosition; score: MoveScore; flippedPositions: BoardPosition[] }>,\n): number => {\n  if (evaluatedMoves.length === 0) {return 0;}\n\n  const totalScore = evaluatedMoves.reduce((sum, move) => sum + move.score.points, 0);\n  return totalScore / evaluatedMoves.length;\n};\n\n/**\n * Get grade distribution for analytics\n */\nexport const getGradeDistribution = (\n  evaluatedMoves: Array<{ position: BoardPosition; score: MoveScore; flippedPositions: BoardPosition[] }>,\n): Record<Grade, number> => {\n  const distribution: Record<Grade, number> = {\n    [Grade.C]: 0,\n    [Grade.B]: 0,\n    [Grade.A]: 0,\n    [Grade.S]: 0,\n    [Grade.SS]: 0,\n    [Grade.SSS]: 0,\n  };\n\n  for (const move of evaluatedMoves) {\n    distribution[move.score.grade]++;\n  }\n\n  return distribution;\n};\n\n/**\n * Check if a move qualifies for bonus effects (high flip count)\n */\nexport const shouldTriggerBonusEffects = (flippedCount: number): boolean => {\n  return flippedCount >= 16; // Massive flip bonus\n};\n\n/**\n * Calculate endgame scoring adjustments\n */\nexport const calculateEndgameAdjustment = (\n  board: Uint8Array,\n  position: BoardPosition,\n  _player: PlayerColor,\n): number => {\n  let emptySquares = 0;\n  for (let i = 0; i < board.length; i++) {\n    if (board[i] === PlayerColor.EMPTY) {\n      emptySquares++;\n    }\n  }\n\n  // In endgame (< 16 empty squares), prioritize flipping count over position\n  if (emptySquares < 16) {\n    return isCornerMove(position) ? 5 : 0; // Reduced corner bonus\n  }\n\n  return 0; // No adjustment in early/mid game\n};\n\n/**\n * Format score for display\n */\nexport const formatScore = (score: MoveScore): string => {\n  return `${score.grade}-${score.points}`;\n};\n\n/**\n * Format score breakdown for detailed display\n */\nexport const formatBreakdown = (breakdown: ScoreBreakdown): string => {\n  return [\n    `Position: ${breakdown.positionValue >= 0 ? '+' : ''}${breakdown.positionValue}`,\n    `Flipped: +${breakdown.flippedCount}`,\n    `Stability: +${breakdown.stabilityBonus}`,\n    `Mobility: ${breakdown.mobilityFactor > 0 ? '+' : ''}${breakdown.mobilityFactor}`,\n    `Total: ${breakdown.total}`,\n  ].join(' | ');\n};","/**\r\n * Greedy AI Strategy (v1)\r\n *\r\n * AI implementation that selects moves based on immediate score evaluation.\r\n * Uses the move evaluation system to pick the highest-scoring move available.\r\n * Target response time: ~1 second for thorough evaluation.\r\n */\r\n\r\nimport { AIDifficulty, PlayerColor, BoardPosition } from '@/types/game-types';\r\nimport type { GameState } from '@/core/models/GameState';\r\nimport { AIStrategyBase, type AIMoveResult, AIUtils } from '../ai-strategy-base';\r\nimport { evaluateAllMoves, getBestMove } from '@/core/utils/move-evaluator';\r\nimport { Grade } from '@/types/game-types';\r\n\r\n/**\r\n * Greedy AI implementation\r\n */\r\nexport class GreedyAI extends AIStrategyBase {\r\n  public readonly difficulty = AIDifficulty.GREEDY;\r\n  public readonly name = 'Greedy AI';\r\n  public readonly description = 'Selects moves with highest immediate score';\r\n\r\n  protected async selectMoveImpl(\r\n    gameState: GameState,\r\n    player: PlayerColor,\r\n    timeLimit: number,\r\n  ): Promise<AIMoveResult> {\r\n    const startTime = Date.now();\r\n\r\n    // Get all valid moves and evaluate them\r\n    const evaluatedMoves = evaluateAllMoves(gameState.board as Uint8Array, new Map(gameState.validMoves), player);\r\n\r\n    if (evaluatedMoves.length === 0) {\r\n      throw new Error('No valid moves available');\r\n    }\r\n\r\n    // Simulate thinking time (but be efficient)\r\n    const thinkingTime = Math.min(500 + Math.random() * 300, timeLimit * 0.8); // 500-800ms\r\n    const remainingTime = thinkingTime - (Date.now() - startTime);\r\n\r\n    if (remainingTime > 0) {\r\n      await new Promise(resolve => setTimeout(resolve, remainingTime));\r\n    }\r\n\r\n    // Get the best move\r\n    const bestMove = getBestMove(evaluatedMoves);\r\n\r\n    if (!bestMove) {\r\n      throw new Error('Could not determine best move');\r\n    }\r\n\r\n    // Calculate confidence based on move quality and competition\r\n    const confidence = this.calculateConfidence(evaluatedMoves, bestMove);\r\n\r\n    return {\r\n      position: bestMove.position,\r\n      confidence,\r\n      evaluation: bestMove.score.points,\r\n      thinkingTime: Date.now() - startTime,\r\n      depth: 1, // Only evaluates immediate moves\r\n      nodesEvaluated: evaluatedMoves.length,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate confidence based on move quality and alternatives\r\n   */\r\n  private calculateConfidence(\r\n    evaluatedMoves: Array<{ position: BoardPosition; score: any; flippedPositions: BoardPosition[] }>,\r\n    bestMove: { position: BoardPosition; score: any; flippedPositions: BoardPosition[] },\r\n  ): number {\r\n    if (evaluatedMoves.length === 1) {\r\n      return 0.9; // High confidence when only one move\r\n    }\r\n\r\n    // Base confidence from move grade\r\n    let confidence = 0.3; // Start with moderate confidence\r\n\r\n    switch (bestMove.score.grade) {\r\n      case Grade.S:\r\n        confidence = 0.95;\r\n        break;\r\n      case Grade.A:\r\n        confidence = 0.8;\r\n        break;\r\n      case Grade.B:\r\n        confidence = 0.6;\r\n        break;\r\n      case Grade.C:\r\n        confidence = 0.3;\r\n        break;\r\n    }\r\n\r\n    // Adjust based on score gap to second-best move\r\n    const sortedMoves = [...evaluatedMoves].sort((a, b) => b.score.points - a.score.points);\r\n    if (sortedMoves.length > 1) {\r\n      const scoreGap = sortedMoves[0]!.score.points - sortedMoves[1]!.score.points;\r\n\r\n      if (scoreGap > 15) {\r\n        confidence += 0.15; // Clear winner\r\n      } else if (scoreGap > 5) {\r\n        confidence += 0.05; // Moderate advantage\r\n      } else {\r\n        confidence -= 0.1; // Close competition\r\n      }\r\n    }\r\n\r\n    return Math.max(0.1, Math.min(0.95, confidence));\r\n  }\r\n}\r\n\r\n/**\r\n * Enhanced Greedy AI with additional heuristics\r\n */\r\nexport class EnhancedGreedyAI extends AIStrategyBase {\r\n  public readonly difficulty = AIDifficulty.GREEDY;\r\n  public readonly name = 'Enhanced Greedy AI';\r\n  public readonly description = 'Greedy with additional strategic considerations';\r\n\r\n  protected async selectMoveImpl(\r\n    gameState: GameState,\r\n    player: PlayerColor,\r\n    timeLimit: number,\r\n  ): Promise<AIMoveResult> {\r\n    const startTime = Date.now();\r\n\r\n    const evaluatedMoves = evaluateAllMoves(gameState.board as Uint8Array, new Map(gameState.validMoves), player);\r\n\r\n    if (evaluatedMoves.length === 0) {\r\n      throw new Error('No valid moves available');\r\n    }\r\n\r\n    // Apply additional heuristics\r\n    const enhancedMoves = evaluatedMoves.map(move => ({\r\n      ...move,\r\n      enhancedScore: this.calculateEnhancedScore(gameState, move, player),\r\n    }));\r\n\r\n    // Sort by enhanced score\r\n    enhancedMoves.sort((a, b) => b.enhancedScore - a.enhancedScore);\r\n\r\n    // Consider top candidates with similar scores\r\n    const bestScore = enhancedMoves[0]!.enhancedScore;\r\n    const threshold = bestScore * 0.9; // Within 10% of best\r\n    const topCandidates = enhancedMoves.filter(move => move.enhancedScore >= threshold);\r\n\r\n    // Add some randomization among top candidates to avoid predictability\r\n    const selectedMove = AIUtils.selectWeightedRandom(\r\n      topCandidates.map(move => ({ ...move, score: move.enhancedScore })),\r\n      2.0, // Temperature for selection\r\n    );\r\n\r\n    // Simulate thinking time\r\n    const targetThinkingTime = Math.min(600 + Math.random() * 400, timeLimit * 0.9);\r\n    const remainingTime = targetThinkingTime - (Date.now() - startTime);\r\n\r\n    if (remainingTime > 0) {\r\n      await new Promise(resolve => setTimeout(resolve, remainingTime));\r\n    }\r\n\r\n    const confidence = this.calculateEnhancedConfidence(topCandidates, selectedMove);\r\n\r\n    return {\r\n      position: selectedMove.position,\r\n      confidence,\r\n      evaluation: selectedMove.enhancedScore,\r\n      thinkingTime: Date.now() - startTime,\r\n      depth: 1,\r\n      nodesEvaluated: evaluatedMoves.length,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate enhanced score with additional heuristics\r\n   */\r\n  private calculateEnhancedScore(\r\n    gameState: GameState,\r\n    move: { position: BoardPosition; score: any; flippedPositions: BoardPosition[] },\r\n    player: PlayerColor,\r\n  ): number {\r\n    let score = move.score.points;\r\n\r\n    // Game phase consideration\r\n    const gamePhase = AIUtils.getGamePhase(gameState);\r\n\r\n    if (gamePhase > 0.7) {\r\n      // Endgame: prioritize flipped pieces over position\r\n      score += move.flippedPositions.length * 2;\r\n    } else if (gamePhase < 0.3) {\r\n      // Early game: be more careful about dangerous positions\r\n      if (AIUtils.isDangerousPosition(move.position)) {\r\n        score -= 5;\r\n      }\r\n    }\r\n\r\n    // Stability consideration\r\n    const stability = AIUtils.evaluatePositionStability(gameState, move.position, player);\r\n    score += stability;\r\n\r\n    // Mobility preservation (don't give opponent too many options)\r\n    const opponent = player === PlayerColor.BLACK ? PlayerColor.WHITE : PlayerColor.BLACK;\r\n    const currentMobility = AIUtils.calculateMobility(gameState, opponent);\r\n\r\n    // Slightly prefer moves that don't dramatically increase opponent mobility\r\n    if (currentMobility < 3) {\r\n      score += 2; // Bonus for limiting opponent when they're already constrained\r\n    }\r\n\r\n    return score;\r\n  }\r\n\r\n  /**\r\n   * Calculate confidence for enhanced AI\r\n   */\r\n  private calculateEnhancedConfidence(\r\n    topCandidates: any[],\r\n    selectedMove: any,\r\n  ): number {\r\n    let confidence = 0.6; // Base confidence for enhanced greedy\r\n\r\n    // Confidence increases if we have fewer but stronger candidates\r\n    if (topCandidates.length === 1) {\r\n      confidence = 0.9;\r\n    } else if (topCandidates.length <= 3) {\r\n      confidence = 0.8;\r\n    }\r\n\r\n    // Adjust based on selected move grade\r\n    if (selectedMove.score?.grade) {\r\n      switch (selectedMove.score.grade) {\r\n        case Grade.S:\r\n          confidence = Math.max(confidence, 0.9);\r\n          break;\r\n        case Grade.A:\r\n          confidence = Math.max(confidence, 0.75);\r\n          break;\r\n        case Grade.B:\r\n          confidence = Math.max(confidence, 0.6);\r\n          break;\r\n      }\r\n    }\r\n\r\n    return Math.max(0.2, Math.min(0.95, confidence));\r\n  }\r\n}\r\n\r\n/**\r\n * Adaptive Greedy AI that adjusts strategy based on game situation\r\n */\r\nexport class AdaptiveGreedyAI extends AIStrategyBase {\r\n  public readonly difficulty = AIDifficulty.GREEDY;\r\n  public readonly name = 'Adaptive Greedy AI';\r\n  public readonly description = 'Greedy AI that adapts strategy to game phase and score';\r\n\r\n  protected async selectMoveImpl(\r\n    gameState: GameState,\r\n    player: PlayerColor,\r\n    timeLimit: number,\r\n  ): Promise<AIMoveResult> {\r\n    const startTime = Date.now();\r\n\r\n    const evaluatedMoves = evaluateAllMoves(gameState.board as Uint8Array, new Map(gameState.validMoves), player);\r\n\r\n    if (evaluatedMoves.length === 0) {\r\n      throw new Error('No valid moves available');\r\n    }\r\n\r\n    // Determine strategy based on game situation\r\n    const strategy = this.determineStrategy(gameState, player);\r\n\r\n    // Apply strategy-specific evaluation\r\n    const strategicMoves = evaluatedMoves.map(move => ({\r\n      ...move,\r\n      strategicScore: this.calculateStrategicScore(gameState, move, player, strategy),\r\n    }));\r\n\r\n    strategicMoves.sort((a, b) => b.strategicScore - a.strategicScore);\r\n\r\n    // Select best move with some randomization based on strategy\r\n    const selectionTemperature = this.getSelectionTemperature(strategy);\r\n    const topMoves = strategicMoves.slice(0, Math.min(5, strategicMoves.length));\r\n\r\n    const selectedMove = AIUtils.selectWeightedRandom(\r\n      topMoves.map(move => ({ ...move, score: move.strategicScore })),\r\n      selectionTemperature,\r\n    );\r\n\r\n    // Adaptive thinking time based on situation complexity\r\n    const adaptiveThinkingTime = this.calculateAdaptiveThinkingTime(\r\n      gameState,\r\n      evaluatedMoves.length,\r\n      strategy,\r\n      timeLimit,\r\n    );\r\n\r\n    const remainingTime = adaptiveThinkingTime - (Date.now() - startTime);\r\n    if (remainingTime > 0) {\r\n      await new Promise(resolve => setTimeout(resolve, remainingTime));\r\n    }\r\n\r\n    return {\r\n      position: selectedMove.position,\r\n      confidence: this.calculateAdaptiveConfidence(strategy, selectedMove, topMoves),\r\n      evaluation: selectedMove.strategicScore,\r\n      thinkingTime: Date.now() - startTime,\r\n      depth: 1,\r\n      nodesEvaluated: evaluatedMoves.length,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Determine strategy based on game situation\r\n   */\r\n  private determineStrategy(gameState: GameState, player: PlayerColor): string {\r\n    const gamePhase = AIUtils.getGamePhase(gameState);\r\n    const myScore = player === PlayerColor.BLACK ? gameState.scores.black : gameState.scores.white;\r\n    const opponentScore = player === PlayerColor.BLACK ? gameState.scores.white : gameState.scores.black;\r\n    const scoreDifference = myScore - opponentScore;\r\n    const mobility = gameState.validMoves.size;\r\n\r\n    // Endgame strategy\r\n    if (gamePhase > 0.8) {\r\n      return scoreDifference > 0 ? 'endgame_ahead' : 'endgame_behind';\r\n    }\r\n\r\n    // Mid-game strategies\r\n    if (gamePhase > 0.4) {\r\n      if (scoreDifference > 5) {return 'consolidate';}\r\n      if (scoreDifference < -5) {return 'aggressive';}\r\n      if (mobility < 3) {return 'careful';}\r\n      return 'balanced';\r\n    }\r\n\r\n    // Early game strategies\r\n    if (mobility > 8) {return 'opportunistic';}\r\n    return 'cautious';\r\n  }\r\n\r\n  private calculateStrategicScore(\r\n    gameState: GameState,\r\n    move: any,\r\n    player: PlayerColor,\r\n    strategy: string,\r\n  ): number {\r\n    let score = move.score.points;\r\n    AIUtils.getGamePhase(gameState);\r\n\r\n    switch (strategy) {\r\n      case 'endgame_ahead':\r\n        // When ahead in endgame, maximize piece count\r\n        score += move.flippedPositions.length * 3;\r\n        break;\r\n\r\n      case 'endgame_behind':\r\n        // When behind in endgame, take risks for big gains\r\n        score += move.flippedPositions.length * 4;\r\n        if (move.score.grade === Grade.A || move.score.grade === Grade.S) {\r\n          score += 10;\r\n        }\r\n        break;\r\n\r\n      case 'aggressive':\r\n        // Prioritize high-scoring moves when behind\r\n        if (move.score.grade === Grade.A || move.score.grade === Grade.S) {\r\n          score += 8;\r\n        }\r\n        score += move.flippedPositions.length * 2;\r\n        break;\r\n\r\n      case 'consolidate':\r\n        // Play safely when ahead\r\n        if ([0, 7, 56, 63].includes(move.position)) {\r\n          score += 10; // Corner bonus\r\n        }\r\n        if (AIUtils.isDangerousPosition(move.position)) {\r\n          score -= 8; // Avoid risk\r\n        }\r\n        break;\r\n\r\n      case 'careful':\r\n        // Low mobility - be extra careful\r\n        if (AIUtils.isDangerousPosition(move.position)) {\r\n          score -= 15;\r\n        }\r\n        score += AIUtils.evaluatePositionStability(gameState, move.position, player) * 2;\r\n        break;\r\n\r\n      case 'opportunistic':\r\n        // High mobility - can take some risks for rewards\r\n        if (move.score.grade === Grade.S) {\r\n          score += 15;\r\n        }\r\n        break;\r\n\r\n      case 'cautious':\r\n        // Early game caution\r\n        if (AIUtils.isDangerousPosition(move.position)) {\r\n          score -= 10;\r\n        }\r\n        break;\r\n\r\n      default: // 'balanced'\r\n        // Standard evaluation\r\n        break;\r\n    }\r\n\r\n    return score;\r\n  }\r\n\r\n  private getSelectionTemperature(strategy: string): number {\r\n    switch (strategy) {\r\n      case 'aggressive':\r\n      case 'endgame_behind':\r\n        return 1.5; // More randomization when desperate\r\n      case 'careful':\r\n      case 'consolidate':\r\n        return 3.0; // Less randomization when being careful\r\n      default:\r\n        return 2.0; // Moderate randomization\r\n    }\r\n  }\r\n\r\n  private calculateAdaptiveThinkingTime(\r\n    _gameState: GameState,\r\n    moveCount: number,\r\n    strategy: string,\r\n    timeLimit: number,\r\n  ): number {\r\n    let baseTime = 400;\r\n\r\n    // More thinking for complex situations\r\n    if (moveCount > 8) {baseTime += 200;}\r\n    if (moveCount < 3) {baseTime += 100;} // Think more when few options\r\n\r\n    // Strategy-based adjustments\r\n    switch (strategy) {\r\n      case 'endgame_ahead':\r\n      case 'endgame_behind':\r\n        baseTime += 300; // Endgame needs more thought\r\n        break;\r\n      case 'careful':\r\n        baseTime += 200; // Be more careful\r\n        break;\r\n      case 'opportunistic':\r\n        baseTime -= 100; // Can be quicker with many options\r\n        break;\r\n    }\r\n\r\n    // Add randomization\r\n    baseTime += Math.random() * 200;\r\n\r\n    return Math.min(baseTime, timeLimit * 0.9);\r\n  }\r\n\r\n  private calculateAdaptiveConfidence(strategy: string, selectedMove: any, topMoves: any[]): number {\r\n    let confidence = 0.7; // Base confidence\r\n\r\n    // Strategy-based confidence\r\n    switch (strategy) {\r\n      case 'consolidate':\r\n      case 'endgame_ahead':\r\n        confidence = 0.8; // More confident when ahead\r\n        break;\r\n      case 'aggressive':\r\n      case 'endgame_behind':\r\n        confidence = 0.6; // Less confident when taking risks\r\n        break;\r\n      case 'careful':\r\n        confidence = 0.75; // Moderate confidence in careful play\r\n        break;\r\n    }\r\n\r\n    // Adjust based on move quality\r\n    if (selectedMove.score?.grade === Grade.S) {\r\n      confidence = Math.min(0.95, confidence + 0.15);\r\n    } else if (selectedMove.score?.grade === Grade.A) {\r\n      confidence = Math.min(0.9, confidence + 0.1);\r\n    }\r\n\r\n    // Reduce confidence if many similar options\r\n    if (topMoves.length > 4) {\r\n      confidence -= 0.1;\r\n    }\r\n\r\n    return Math.max(0.2, confidence);\r\n  }\r\n}\r\n\r\n/**\r\n * Factory function to create greedy AI variants\r\n */\r\nexport const createGreedyAI = {\r\n  /**\r\n   * Standard greedy AI\r\n   */\r\n  standard(): GreedyAI {\r\n    return new GreedyAI();\r\n  },\r\n\r\n  /**\r\n   * Enhanced greedy with additional heuristics\r\n   */\r\n  enhanced(): EnhancedGreedyAI {\r\n    return new EnhancedGreedyAI();\r\n  },\r\n\r\n  /**\r\n   * Adaptive greedy that changes strategy based on game state\r\n   */\r\n  adaptive(): AdaptiveGreedyAI {\r\n    return new AdaptiveGreedyAI();\r\n  },\r\n};","/**\n * Advanced Position Evaluation System\n *\n * Sophisticated evaluation function for Minimax AI that considers:\n * - Position value and stability\n * - Mobility and potential moves\n * - Corner and edge control\n * - Game phase awareness\n * - Parity and timing\n */\n\nimport {\n  BoardPosition,\n  PlayerColor,\n  positionToCoords,\n  isCorner,\n  isEdge,\n  isXSquare,\n  isCSquare,\n  BOARD_SIZE,\n} from '@/types/game-types';\nimport type { GameState } from '@/core/models/GameState';\n\n/**\n * Comprehensive position evaluation weights\n */\nconst EVALUATION_WEIGHTS = {\n  POSITION_VALUE: 1.0,\n  MOBILITY: 2.0,\n  STABILITY: 3.0,\n  CORNER_CONTROL: 5.0,\n  EDGE_CONTROL: 1.5,\n  POTENTIAL_MOBILITY: 1.0,\n  PARITY: 0.5,\n  ENDGAME_MATERIAL: 10.0,\n} as const;\n\n/**\n * Static position values for advanced evaluation\n */\nconst ADVANCED_POSITION_VALUES = [\n  100, -20,  10,   5,   5,  10, -20, 100,\n  -20, -50,  -2,  -2,  -2,  -2, -50, -20,\n   10,  -2,  16,   2,   2,  16,  -2,  10,\n    5,  -2,   2,   1,   1,   2,  -2,   5,\n    5,  -2,   2,   1,   1,   2,  -2,   5,\n   10,  -2,  16,   2,   2,  16,  -2,  10,\n  -20, -50,  -2,  -2,  -2,  -2, -50, -20,\n  100, -20,  10,   5,   5,  10, -20, 100,\n] as const;\n\n/**\n * Stability values for each position\n */\nconst STABILITY_VALUES = [\n  4, 0, 3, 2, 2, 3, 0, 4,\n  0, 0, 1, 1, 1, 1, 0, 0,\n  3, 1, 2, 1, 1, 2, 1, 3,\n  2, 1, 1, 1, 1, 1, 1, 2,\n  2, 1, 1, 1, 1, 1, 1, 2,\n  3, 1, 2, 1, 1, 2, 1, 3,\n  0, 0, 1, 1, 1, 1, 0, 0,\n  4, 0, 3, 2, 2, 3, 0, 4,\n] as const;\n\n/**\n * Result of position evaluation\n */\nexport interface EvaluationResult {\n  readonly totalScore: number;\n  readonly breakdown: {\n    readonly positionValue: number;\n    readonly mobility: number;\n    readonly stability: number;\n    readonly cornerControl: number;\n    readonly edgeControl: number;\n    readonly potentialMobility: number;\n    readonly parity: number;\n    readonly material: number;\n  };\n}\n\n/**\n * Advanced position evaluator for AI strategies\n */\nexport class AdvancedEvaluator {\n  /**\n   * Evaluate position for a specific player\n   */\n  static evaluatePosition(gameState: GameState, player: PlayerColor): EvaluationResult {\n    const board = gameState.board as Uint8Array;\n    const opponent = player === PlayerColor.BLACK ? PlayerColor.WHITE : PlayerColor.BLACK;\n\n    // Calculate individual evaluation components\n    const positionValue = this.evaluatePositionValue(board, player, opponent);\n    const mobility = this.evaluateMobility(gameState, player, opponent);\n    const stability = this.evaluateStability(board, player, opponent);\n    const cornerControl = this.evaluateCornerControl(board, player, opponent);\n    const edgeControl = this.evaluateEdgeControl(board, player, opponent);\n    const potentialMobility = this.evaluatePotentialMobility(board, player, opponent);\n    const parity = this.evaluateParity(board, player, opponent);\n    const material = this.evaluateMaterial(board, player, opponent);\n\n    // Calculate weighted total score\n    const totalScore =\n      positionValue * EVALUATION_WEIGHTS.POSITION_VALUE +\n      mobility * EVALUATION_WEIGHTS.MOBILITY +\n      stability * EVALUATION_WEIGHTS.STABILITY +\n      cornerControl * EVALUATION_WEIGHTS.CORNER_CONTROL +\n      edgeControl * EVALUATION_WEIGHTS.EDGE_CONTROL +\n      potentialMobility * EVALUATION_WEIGHTS.POTENTIAL_MOBILITY +\n      parity * EVALUATION_WEIGHTS.PARITY +\n      material * EVALUATION_WEIGHTS.ENDGAME_MATERIAL;\n\n    return {\n      totalScore,\n      breakdown: {\n        positionValue,\n        mobility,\n        stability,\n        cornerControl,\n        edgeControl,\n        potentialMobility,\n        parity,\n        material,\n      },\n    };\n  }\n\n  /**\n   * Evaluate position values of pieces on board\n   */\n  private static evaluatePositionValue(\n    board: Uint8Array,\n    player: PlayerColor,\n    opponent: PlayerColor,\n  ): number {\n    let score = 0;\n\n    for (let position = 0; position < 64; position++) {\n      const piece = board[position];\n      if (piece === player) {\n        score += ADVANCED_POSITION_VALUES[position] ?? 0;\n      } else if (piece === opponent) {\n        score -= ADVANCED_POSITION_VALUES[position] ?? 0;\n      }\n    }\n\n    return score;\n  }\n\n  /**\n   * Evaluate current mobility (number of valid moves)\n   */\n  private static evaluateMobility(\n    gameState: GameState,\n    player: PlayerColor,\n    opponent: PlayerColor,\n  ): number {\n    const playerMobility = gameState.currentPlayer === player ? gameState.validMoves.size : 0;\n    const opponentMobility = gameState.currentPlayer === opponent ? gameState.validMoves.size : 0;\n\n    // More mobility is better, but avoid division by zero\n    if (playerMobility + opponentMobility === 0) return 0;\n\n    return ((playerMobility - opponentMobility) / (playerMobility + opponentMobility)) * 100;\n  }\n\n  /**\n   * Evaluate stability of pieces (how hard they are to flip)\n   */\n  private static evaluateStability(\n    board: Uint8Array,\n    player: PlayerColor,\n    opponent: PlayerColor,\n  ): number {\n    let playerStability = 0;\n    let opponentStability = 0;\n\n    for (let position = 0; position < 64; position++) {\n      const piece = board[position];\n      const stabilityValue = this.calculatePieceStability(board, position);\n\n      if (piece === player) {\n        playerStability += stabilityValue;\n      } else if (piece === opponent) {\n        opponentStability += stabilityValue;\n      }\n    }\n\n    return playerStability - opponentStability;\n  }\n\n  /**\n   * Calculate stability of a single piece\n   */\n  private static calculatePieceStability(board: Uint8Array, position: BoardPosition): number {\n    const piece = board[position];\n    if (piece === PlayerColor.EMPTY || piece === undefined) return 0;\n\n    let stability = STABILITY_VALUES[position] ?? 0;\n\n    // Corner pieces are completely stable\n    if (isCorner(position)) {\n      return stability + 10;\n    }\n\n    // Check stability in all 8 directions\n    const directions = [-9, -8, -7, -1, 1, 7, 8, 9];\n    let stableDirections = 0;\n\n    for (const dir of directions) {\n      if (this.isDirectionStable(board, position, dir, piece)) {\n        stableDirections++;\n      }\n    }\n\n    return stability + stableDirections;\n  }\n\n  /**\n   * Check if a piece is stable in a specific direction\n   */\n  private static isDirectionStable(\n    board: Uint8Array,\n    position: BoardPosition,\n    direction: number,\n    piece: PlayerColor,\n  ): boolean {\n    const pos1 = position + direction;\n    const pos2 = position - direction;\n\n    // Check bounds\n    if (pos1 < 0 || pos1 >= 64 || pos2 < 0 || pos2 >= 64) return true;\n\n    // Both directions should have same color or edge\n    return board[pos1] === piece || board[pos2] === piece;\n  }\n\n  /**\n   * Evaluate corner control\n   */\n  private static evaluateCornerControl(\n    board: Uint8Array,\n    player: PlayerColor,\n    opponent: PlayerColor,\n  ): number {\n    const corners = [0, 7, 56, 63];\n    let playerCorners = 0;\n    let opponentCorners = 0;\n\n    for (const corner of corners) {\n      if (board[corner] === player) {\n        playerCorners++;\n      } else if (board[corner] === opponent) {\n        opponentCorners++;\n      }\n    }\n\n    return (playerCorners - opponentCorners) * 25;\n  }\n\n  /**\n   * Evaluate edge control\n   */\n  private static evaluateEdgeControl(\n    board: Uint8Array,\n    player: PlayerColor,\n    opponent: PlayerColor,\n  ): number {\n    let playerEdges = 0;\n    let opponentEdges = 0;\n\n    for (let position = 0; position < 64; position++) {\n      if (isEdge(position) && !isCorner(position)) {\n        if (board[position] === player) {\n          playerEdges++;\n        } else if (board[position] === opponent) {\n          opponentEdges++;\n        }\n      }\n    }\n\n    return playerEdges - opponentEdges;\n  }\n\n  /**\n   * Evaluate potential mobility (empty squares adjacent to opponent pieces)\n   */\n  private static evaluatePotentialMobility(\n    board: Uint8Array,\n    player: PlayerColor,\n    opponent: PlayerColor,\n  ): number {\n    let playerPotential = 0;\n    let opponentPotential = 0;\n\n    for (let position = 0; position < 64; position++) {\n      if (board[position] === PlayerColor.EMPTY) {\n        const adjacentToPlayer = this.isAdjacentToColor(board, position, player);\n        const adjacentToOpponent = this.isAdjacentToColor(board, position, opponent);\n\n        if (adjacentToPlayer) playerPotential++;\n        if (adjacentToOpponent) opponentPotential++;\n      }\n    }\n\n    return playerPotential - opponentPotential;\n  }\n\n  /**\n   * Check if a position is adjacent to pieces of a specific color\n   */\n  private static isAdjacentToColor(\n    board: Uint8Array,\n    position: BoardPosition,\n    color: PlayerColor,\n  ): boolean {\n    const directions = [-9, -8, -7, -1, 1, 7, 8, 9];\n\n    for (const dir of directions) {\n      const adjacent = position + dir;\n      if (adjacent >= 0 && adjacent < 64 && board[adjacent] === color) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Evaluate parity (who gets the last move)\n   */\n  private static evaluateParity(\n    board: Uint8Array,\n    player: PlayerColor,\n    opponent: PlayerColor,\n  ): number {\n    let emptySquares = 0;\n\n    for (let i = 0; i < 64; i++) {\n      if (board[i] === PlayerColor.EMPTY) {\n        emptySquares++;\n      }\n    }\n\n    // If odd number of empty squares, current player has advantage\n    return emptySquares % 2 === 1 ? 1 : -1;\n  }\n\n  /**\n   * Evaluate material balance (piece count) - important in endgame\n   */\n  private static evaluateMaterial(\n    board: Uint8Array,\n    player: PlayerColor,\n    opponent: PlayerColor,\n  ): number {\n    let playerPieces = 0;\n    let opponentPieces = 0;\n    let emptySquares = 0;\n\n    for (let i = 0; i < 64; i++) {\n      const piece = board[i];\n      if (piece === player) {\n        playerPieces++;\n      } else if (piece === opponent) {\n        opponentPieces++;\n      } else {\n        emptySquares++;\n      }\n    }\n\n    // Material evaluation is more important in endgame\n    const endgameWeight = emptySquares < 16 ? 2.0 : 0.1;\n\n    return (playerPieces - opponentPieces) * endgameWeight;\n  }\n\n  /**\n   * Quick evaluation for move ordering (faster version)\n   */\n  static quickEvaluate(\n    board: Uint8Array,\n    position: BoardPosition,\n    player: PlayerColor,\n    flippedPositions: BoardPosition[],\n  ): number {\n    let score = 0;\n\n    // Position value\n    score += ADVANCED_POSITION_VALUES[position] ?? 0;\n\n    // Flipped pieces count\n    score += flippedPositions.length * 5;\n\n    // Corner bonus\n    if (isCorner(position)) {\n      score += 50;\n    }\n\n    // Avoid X-squares early\n    if (isXSquare(position)) {\n      score -= 25;\n    }\n\n    return score;\n  }\n\n  /**\n   * Game phase detection\n   */\n  static getGamePhase(board: Uint8Array): 'opening' | 'midgame' | 'endgame' {\n    let emptySquares = 0;\n\n    for (let i = 0; i < 64; i++) {\n      if (board[i] === PlayerColor.EMPTY) {\n        emptySquares++;\n      }\n    }\n\n    if (emptySquares > 40) return 'opening';\n    if (emptySquares > 16) return 'midgame';\n    return 'endgame';\n  }\n}\n\n/**\n * Export convenience functions\n */\nexport const evaluatePosition = AdvancedEvaluator.evaluatePosition;\nexport const quickEvaluate = AdvancedEvaluator.quickEvaluate;\nexport const getGamePhase = AdvancedEvaluator.getGamePhase;","/**\n * Game State Simulator\n *\n * Provides efficient game state simulation for AI search algorithms.\n * Creates new game states without modifying the original for minimax search.\n */\n\nimport { PlayerColor, BoardPosition, BOARD_SIZE, GameStatus } from '@/types/game-types';\nimport type { GameState } from '@/core/models/GameState';\nimport { getValidMoves } from '@/core/utils/move-validator';\n\n/**\n * Simulated game state for AI search\n */\nexport interface SimulatedGameState {\n  readonly board: Uint8Array;\n  readonly currentPlayer: PlayerColor;\n  readonly validMoves: Map<BoardPosition, readonly BoardPosition[]>;\n  readonly scores: {\n    readonly black: number;\n    readonly white: number;\n  };\n  readonly gameOver: boolean;\n  readonly consecutivePasses: number;\n}\n\n/**\n * Game state simulator for AI algorithms\n */\nexport class GameSimulator {\n  /**\n   * Convert a GameState to SimulatedGameState\n   */\n  static fromGameState(gameState: GameState): SimulatedGameState {\n    // Check if game is over based on game status\n    const gameOver = gameState.gameStatus === GameStatus.GAME_OVER ||\n                     (gameState as any).gameOver === true ||\n                     gameState.validMoves.size === 0;\n\n    return {\n      board: new Uint8Array(gameState.board),\n      currentPlayer: gameState.currentPlayer,\n      validMoves: new Map(gameState.validMoves),\n      scores: { ...gameState.scores },\n      gameOver,\n      consecutivePasses: (gameState as any).consecutivePasses || 0,\n    };\n  }\n\n  /**\n   * Make a move and return new simulated game state\n   */\n  static makeMove(\n    state: SimulatedGameState,\n    position: BoardPosition,\n  ): SimulatedGameState | null {\n    // Validate move\n    const flippedPositions = state.validMoves.get(position);\n    if (!flippedPositions) {\n      return null;\n    }\n\n    // Create new board\n    const newBoard = new Uint8Array(state.board);\n\n    // Place the piece\n    newBoard[position] = state.currentPlayer;\n\n    // Flip pieces\n    for (const flippedPos of flippedPositions) {\n      newBoard[flippedPos] = state.currentPlayer;\n    }\n\n    // Switch player\n    const nextPlayer = state.currentPlayer === PlayerColor.BLACK\n      ? PlayerColor.WHITE\n      : PlayerColor.BLACK;\n\n    // Calculate new scores\n    const newScores = this.calculateScores(newBoard);\n\n    // Find valid moves for next player\n    const nextValidMoves = getValidMoves(newBoard, nextPlayer);\n\n    // Check for consecutive passes\n    let newConsecutivePasses = 0;\n    let gameOver = false;\n\n    if (nextValidMoves.size === 0) {\n      // Next player has no moves, switch back\n      const afterPassPlayer = nextPlayer === PlayerColor.BLACK\n        ? PlayerColor.WHITE\n        : PlayerColor.BLACK;\n\n      const afterPassMoves = getValidMoves(newBoard, afterPassPlayer);\n\n      if (afterPassMoves.size === 0) {\n        // Game over - both players have no moves\n        gameOver = true;\n        newConsecutivePasses = 2;\n      } else {\n        // Switch back to original player\n        newConsecutivePasses = 1;\n        return {\n          board: newBoard,\n          currentPlayer: afterPassPlayer,\n          validMoves: afterPassMoves,\n          scores: newScores,\n          gameOver: false,\n          consecutivePasses: newConsecutivePasses,\n        };\n      }\n    }\n\n    return {\n      board: newBoard,\n      currentPlayer: nextPlayer,\n      validMoves: nextValidMoves,\n      scores: newScores,\n      gameOver,\n      consecutivePasses: newConsecutivePasses,\n    };\n  }\n\n  /**\n   * Make a pass (skip turn) and return new game state\n   */\n  static makePass(state: SimulatedGameState): SimulatedGameState {\n    const nextPlayer = state.currentPlayer === PlayerColor.BLACK\n      ? PlayerColor.WHITE\n      : PlayerColor.BLACK;\n\n    const nextValidMoves = getValidMoves(state.board, nextPlayer);\n    const newConsecutivePasses = state.consecutivePasses + 1;\n\n    return {\n      board: state.board, // Board unchanged\n      currentPlayer: nextPlayer,\n      validMoves: nextValidMoves,\n      scores: state.scores, // Scores unchanged\n      gameOver: newConsecutivePasses >= 2 || nextValidMoves.size === 0,\n      consecutivePasses: newConsecutivePasses,\n    };\n  }\n\n  /**\n   * Calculate scores from board state\n   */\n  private static calculateScores(board: Uint8Array): { black: number; white: number } {\n    let black = 0;\n    let white = 0;\n\n    for (let i = 0; i < board.length; i++) {\n      if (board[i] === PlayerColor.BLACK) {\n        black++;\n      } else if (board[i] === PlayerColor.WHITE) {\n        white++;\n      }\n    }\n\n    return { black, white };\n  }\n\n  /**\n   * Get all possible moves with their resulting states\n   */\n  static getAllPossibleMoves(\n    state: SimulatedGameState,\n  ): Array<{ move: BoardPosition; newState: SimulatedGameState }> {\n    const moves: Array<{ move: BoardPosition; newState: SimulatedGameState }> = [];\n\n    for (const move of state.validMoves.keys()) {\n      const newState = this.makeMove(state, move);\n      if (newState) {\n        moves.push({ move, newState });\n      }\n    }\n\n    return moves;\n  }\n\n  /**\n   * Check if game is in endgame phase\n   */\n  static isEndgame(state: SimulatedGameState): boolean {\n    let emptySquares = 0;\n    for (let i = 0; i < state.board.length; i++) {\n      if (state.board[i] === PlayerColor.EMPTY) {\n        emptySquares++;\n      }\n    }\n    return emptySquares <= 16;\n  }\n\n  /**\n   * Check if game is in opening phase\n   */\n  static isOpening(state: SimulatedGameState): boolean {\n    let occupiedSquares = 0;\n    for (let i = 0; i < state.board.length; i++) {\n      if (state.board[i] !== PlayerColor.EMPTY) {\n        occupiedSquares++;\n      }\n    }\n    return occupiedSquares <= 12; // First 8 moves after initial setup\n  }\n\n  /**\n   * Get game phase as a ratio (0 = start, 1 = end)\n   */\n  static getGamePhaseRatio(state: SimulatedGameState): number {\n    let occupiedSquares = 0;\n    for (let i = 0; i < state.board.length; i++) {\n      if (state.board[i] !== PlayerColor.EMPTY) {\n        occupiedSquares++;\n      }\n    }\n    return Math.min(1.0, (occupiedSquares - 4) / 60); // Start counting after initial 4 pieces\n  }\n\n  /**\n   * Generate a hash key for the game state (for transposition tables)\n   */\n  static getStateHash(state: SimulatedGameState): string {\n    // Create a hash based on board state and current player\n    const boardHash = Array.from(state.board).join('');\n    return `${boardHash}_${state.currentPlayer}_${state.consecutivePasses}`;\n  }\n\n  /**\n   * Check if two states are equivalent\n   */\n  static statesEqual(state1: SimulatedGameState, state2: SimulatedGameState): boolean {\n    if (state1.currentPlayer !== state2.currentPlayer) return false;\n    if (state1.consecutivePasses !== state2.consecutivePasses) return false;\n\n    for (let i = 0; i < state1.board.length; i++) {\n      if (state1.board[i] !== state2.board[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Copy a simulated game state\n   */\n  static copyState(state: SimulatedGameState): SimulatedGameState {\n    return {\n      board: new Uint8Array(state.board),\n      currentPlayer: state.currentPlayer,\n      validMoves: new Map(state.validMoves),\n      scores: { ...state.scores },\n      gameOver: state.gameOver,\n      consecutivePasses: state.consecutivePasses,\n    };\n  }\n\n  /**\n   * Get detailed state information for debugging\n   */\n  static getStateInfo(state: SimulatedGameState): {\n    pieceCount: { black: number; white: number; empty: number };\n    gamePhase: 'opening' | 'midgame' | 'endgame';\n    mobilityCount: number;\n  } {\n    let black = 0, white = 0, empty = 0;\n\n    for (let i = 0; i < state.board.length; i++) {\n      switch (state.board[i]) {\n        case PlayerColor.BLACK: black++; break;\n        case PlayerColor.WHITE: white++; break;\n        case PlayerColor.EMPTY: empty++; break;\n      }\n    }\n\n    let gamePhase: 'opening' | 'midgame' | 'endgame';\n    if (empty > 40) gamePhase = 'opening';\n    else if (empty > 16) gamePhase = 'midgame';\n    else gamePhase = 'endgame';\n\n    return {\n      pieceCount: { black, white, empty },\n      gamePhase,\n      mobilityCount: state.validMoves.size,\n    };\n  }\n\n  /**\n   * Validate that a simulated state is consistent\n   */\n  static validateState(state: SimulatedGameState): boolean {\n    try {\n      // Check board size\n      if (state.board.length !== 64) return false;\n\n      // Check player colors are valid\n      if (state.currentPlayer !== PlayerColor.BLACK &&\n          state.currentPlayer !== PlayerColor.WHITE) return false;\n\n      // Check scores match board\n      const calculatedScores = this.calculateScores(state.board);\n      if (calculatedScores.black !== state.scores.black ||\n          calculatedScores.white !== state.scores.white) return false;\n\n      // Check valid moves are actually valid\n      for (const [position, flips] of state.validMoves.entries()) {\n        if (position < 0 || position >= 64) return false;\n        if (state.board[position] !== PlayerColor.EMPTY) return false;\n        // Additional validation could check if flips are correct\n      }\n\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n}\n\n/**\n * Export convenience functions\n */\nexport const fromGameState = GameSimulator.fromGameState;\nexport const makeMove = GameSimulator.makeMove;\nexport const makePass = GameSimulator.makePass;\nexport const getAllPossibleMoves = GameSimulator.getAllPossibleMoves;","/**\n * Minimax AI Strategy with Alpha-Beta Pruning\n *\n * Advanced AI implementation using minimax algorithm with:\n * - Alpha-beta pruning for performance optimization\n * - Iterative deepening for time management\n * - Move ordering for better pruning\n * - Transposition table for cached results\n * - Configurable search depth and time limits\n */\n\nimport { AIDifficulty, PlayerColor, BoardPosition } from '@/types/game-types';\nimport type { GameState } from '@/core/models/GameState';\nimport { AIStrategyBase, type AIMoveResult, AIUtils } from '../ai-strategy-base';\nimport { evaluateAllMoves } from '@/core/utils/move-evaluator';\nimport { AdvancedEvaluator, quickEvaluate } from './evaluation';\nimport { GameSimulator, type SimulatedGameState } from '../game-simulator';\n\n/**\n * Minimax AI configuration\n */\nexport interface MinimaxConfig {\n  maxDepth: number;\n  maxTime: number;\n  useIterativeDeepening: boolean;\n  useTranspositionTable: boolean;\n  useMoveOrdering: boolean;\n  aspirationWindow?: number;\n}\n\n/**\n * Transposition table entry\n */\ninterface TranspositionEntry {\n  depth: number;\n  score: number;\n  flag: 'exact' | 'lower' | 'upper';\n  bestMove?: BoardPosition;\n  timestamp: number;\n}\n\n/**\n * Search result from minimax\n */\ninterface SearchResult {\n  score: number;\n  bestMove: BoardPosition;\n  depth: number;\n  nodesEvaluated: number;\n  timeElapsed: number;\n  terminated: boolean;\n}\n\n/**\n * Minimax AI Strategy Implementation\n */\nexport class MinimaxAI extends AIStrategyBase {\n  public readonly difficulty = AIDifficulty.MINIMAX;\n  public readonly name = 'Minimax AI';\n  public readonly description = 'Advanced AI using minimax with alpha-beta pruning';\n\n  private _config: MinimaxConfig;\n  private _transpositionTable = new Map<string, TranspositionEntry>();\n  private _killerMoves: BoardPosition[][] = [];\n  private _historyTable = new Map<string, number>();\n  private _nodesEvaluated = 0;\n  private _startTime = 0;\n\n  constructor(config: Partial<MinimaxConfig> = {}) {\n    super();\n    this._config = {\n      maxDepth: 6,\n      maxTime: 3000,\n      useIterativeDeepening: true,\n      useTranspositionTable: true,\n      useMoveOrdering: true,\n      aspirationWindow: 50,\n      ...config,\n    };\n\n    // Initialize killer moves table\n    for (let depth = 0; depth <= this._config.maxDepth; depth++) {\n      this._killerMoves[depth] = [];\n    }\n  }\n\n  protected async selectMoveImpl(\n    gameState: GameState,\n    player: PlayerColor,\n    timeLimit: number,\n  ): Promise<AIMoveResult> {\n    this._startTime = Date.now();\n    this._nodesEvaluated = 0;\n    const effectiveTimeLimit = Math.min(timeLimit, this._config.maxTime);\n\n    const validMoves = Array.from(gameState.validMoves.keys());\n\n    if (validMoves.length === 0) {\n      throw new Error('No valid moves available');\n    }\n\n    if (validMoves.length === 1) {\n      // Only one move available\n      return {\n        position: validMoves[0]!,\n        confidence: 1.0,\n        evaluation: 0,\n        thinkingTime: Date.now() - this._startTime,\n        depth: 0,\n        nodesEvaluated: 1,\n      };\n    }\n\n    let searchResult: SearchResult;\n\n    if (this._config.useIterativeDeepening) {\n      searchResult = await this.iterativeDeepening(gameState, player, effectiveTimeLimit);\n    } else {\n      searchResult = await this.search(gameState, player, this._config.maxDepth, effectiveTimeLimit);\n    }\n\n    const confidence = this.calculateConfidence(searchResult, validMoves.length);\n\n    return {\n      position: searchResult.bestMove,\n      confidence,\n      evaluation: searchResult.score,\n      thinkingTime: searchResult.timeElapsed,\n      depth: searchResult.depth,\n      nodesEvaluated: searchResult.nodesEvaluated,\n    };\n  }\n\n  /**\n   * Iterative deepening search\n   */\n  private async iterativeDeepening(\n    gameState: GameState,\n    player: PlayerColor,\n    timeLimit: number,\n  ): Promise<SearchResult> {\n    let bestResult: SearchResult = {\n      score: -Infinity,\n      bestMove: Array.from(gameState.validMoves.keys())[0]!,\n      depth: 1,\n      nodesEvaluated: 0,\n      timeElapsed: 0,\n      terminated: false,\n    };\n\n    let lastScore = 0;\n    let aspirationAlpha = -Infinity;\n    let aspirationBeta = Infinity;\n\n    for (let depth = 1; depth <= this._config.maxDepth; depth++) {\n      const depthStartTime = Date.now();\n\n      // Check time limit\n      if (Date.now() - this._startTime >= timeLimit * 0.9) {\n        break;\n      }\n\n      // Set aspiration window if available and enabled\n      if (this._config.aspirationWindow && depth > 2) {\n        aspirationAlpha = lastScore - this._config.aspirationWindow;\n        aspirationBeta = lastScore + this._config.aspirationWindow;\n      }\n\n      try {\n        const result = await this.minimaxSearch(\n          gameState,\n          depth,\n          aspirationAlpha,\n          aspirationBeta,\n          true,\n          player,\n          timeLimit,\n        );\n\n        // If search completed successfully, update best result\n        if (result.score > -Infinity) {\n          bestResult = {\n            score: result.score,\n            bestMove: result.bestMove!,\n            depth,\n            nodesEvaluated: this._nodesEvaluated,\n            timeElapsed: Date.now() - this._startTime,\n            terminated: false,\n          };\n          lastScore = result.score;\n        }\n\n        // Research with wider window if aspiration search failed\n        if (this._config.aspirationWindow &&\n            (result.score <= aspirationAlpha || result.score >= aspirationBeta)) {\n          const widerResult = await this.minimaxSearch(\n            gameState,\n            depth,\n            -Infinity,\n            Infinity,\n            true,\n            player,\n            timeLimit,\n          );\n\n          if (widerResult.score > -Infinity) {\n            bestResult = {\n              score: widerResult.score,\n              bestMove: widerResult.bestMove!,\n              depth,\n              nodesEvaluated: this._nodesEvaluated,\n              timeElapsed: Date.now() - this._startTime,\n              terminated: false,\n            };\n          }\n        }\n\n      } catch (error) {\n        // Time limit reached, return best result so far\n        break;\n      }\n\n      // Early termination for quick wins/losses\n      if (Math.abs(bestResult.score) > 1000) {\n        break;\n      }\n    }\n\n    return bestResult;\n  }\n\n  /**\n   * Single depth search\n   */\n  private async search(\n    gameState: GameState,\n    player: PlayerColor,\n    depth: number,\n    timeLimit: number,\n  ): Promise<SearchResult> {\n    const result = await this.minimaxSearch(\n      gameState,\n      depth,\n      -Infinity,\n      Infinity,\n      true,\n      player,\n      timeLimit,\n    );\n\n    return {\n      score: result.score,\n      bestMove: result.bestMove!,\n      depth,\n      nodesEvaluated: this._nodesEvaluated,\n      timeElapsed: Date.now() - this._startTime,\n      terminated: result.score === -Infinity,\n    };\n  }\n\n  /**\n   * Minimax search with alpha-beta pruning\n   */\n  private async minimaxSearch(\n    gameState: GameState | SimulatedGameState,\n    depth: number,\n    alpha: number,\n    beta: number,\n    isMaximizing: boolean,\n    originalPlayer: PlayerColor,\n    timeLimit: number,\n  ): Promise<{ score: number; bestMove?: BoardPosition }> {\n    this._nodesEvaluated++;\n\n    // Check time limit\n    if (Date.now() - this._startTime >= timeLimit) {\n      return { score: -Infinity };\n    }\n\n    // Check transposition table\n    if (this._config.useTranspositionTable) {\n      const ttEntry = this.lookupTransposition(gameState, depth);\n      if (ttEntry) {\n        if (ttEntry.flag === 'exact') {\n          return { score: ttEntry.score, bestMove: ttEntry.bestMove };\n        } else if (ttEntry.flag === 'lower' && ttEntry.score >= beta) {\n          return { score: ttEntry.score, bestMove: ttEntry.bestMove };\n        } else if (ttEntry.flag === 'upper' && ttEntry.score <= alpha) {\n          return { score: ttEntry.score, bestMove: ttEntry.bestMove };\n        }\n      }\n    }\n\n    // Terminal node evaluation\n    if (depth === 0 || gameState.validMoves.size === 0) {\n      // Convert to simulated state if needed for evaluation\n      const simState = 'board' in gameState && 'scores' in gameState && 'currentPlayer' in gameState\n        ? gameState as SimulatedGameState\n        : GameSimulator.fromGameState(gameState as GameState);\n\n      // Create a GameState-like object for the evaluator\n      const evalState = {\n        board: simState.board,\n        currentPlayer: simState.currentPlayer,\n        validMoves: simState.validMoves,\n        scores: simState.scores,\n        gameOver: simState.gameOver,\n      } as unknown as GameState;\n\n      const evaluation = AdvancedEvaluator.evaluatePosition(evalState, originalPlayer);\n      return { score: evaluation.totalScore };\n    }\n\n    // Get and order moves\n    const moves = this.getOrderedMoves(gameState, depth, originalPlayer);\n    let bestMove: BoardPosition | undefined;\n    let bestScore = isMaximizing ? -Infinity : Infinity;\n\n    for (const move of moves) {\n      // Make the move\n      const newGameState = this.makeMove(gameState, move);\n\n      if (!newGameState) continue;\n\n      // Recursive search\n      const result = await this.minimaxSearch(\n        newGameState,\n        depth - 1,\n        alpha,\n        beta,\n        !isMaximizing,\n        originalPlayer,\n        timeLimit,\n      );\n\n      // Update best score and move\n      if (isMaximizing) {\n        if (result.score > bestScore) {\n          bestScore = result.score;\n          bestMove = move;\n        }\n        alpha = Math.max(alpha, bestScore);\n      } else {\n        if (result.score < bestScore) {\n          bestScore = result.score;\n          bestMove = move;\n        }\n        beta = Math.min(beta, bestScore);\n      }\n\n      // Alpha-beta pruning\n      if (beta <= alpha) {\n        // Update killer moves\n        this.updateKillerMoves(move, depth);\n        break;\n      }\n    }\n\n    // Store in transposition table\n    if (this._config.useTranspositionTable) {\n      this.storeTransposition(gameState, depth, bestScore, bestMove, alpha, beta);\n    }\n\n    return { score: bestScore, bestMove };\n  }\n\n  /**\n   * Get ordered moves for better alpha-beta pruning\n   */\n  private getOrderedMoves(\n    gameState: GameState | SimulatedGameState,\n    depth: number,\n    player: PlayerColor,\n  ): BoardPosition[] {\n    const validMoves = Array.from(gameState.validMoves.keys());\n\n    if (!this._config.useMoveOrdering) {\n      return validMoves;\n    }\n\n    // Evaluate moves for ordering\n    const evaluatedMoves = validMoves.map(move => {\n      const flippedPositions = gameState.validMoves.get(move) || [];\n      const score = quickEvaluate(gameState.board as Uint8Array, move, player, [...flippedPositions]);\n\n      // Bonus for killer moves\n      let bonus = 0;\n      if (this._killerMoves[depth] && this._killerMoves[depth].includes(move)) {\n        bonus += 1000;\n      }\n\n      // History table bonus\n      const historyKey = `${move}_${player}`;\n      const historyScore = this._historyTable.get(historyKey) || 0;\n      bonus += historyScore;\n\n      return { move, score: score + bonus };\n    });\n\n    // Sort by score descending (best moves first)\n    evaluatedMoves.sort((a, b) => b.score - a.score);\n\n    return evaluatedMoves.map(item => item.move);\n  }\n\n  /**\n   * Make a move and return new game state\n   */\n  private makeMove(gameState: GameState | SimulatedGameState, move: BoardPosition): SimulatedGameState | null {\n    const simState = 'board' in gameState && 'validMoves' in gameState && 'currentPlayer' in gameState\n      ? gameState as SimulatedGameState\n      : GameSimulator.fromGameState(gameState as GameState);\n\n    return GameSimulator.makeMove(simState, move);\n  }\n\n  /**\n   * Update killer moves heuristic\n   */\n  private updateKillerMoves(move: BoardPosition, depth: number): void {\n    if (!this._killerMoves[depth]) {\n      this._killerMoves[depth] = [];\n    }\n\n    const killers = this._killerMoves[depth];\n    if (!killers.includes(move)) {\n      killers.unshift(move);\n      // Keep only top 2 killer moves per depth\n      if (killers.length > 2) {\n        killers.pop();\n      }\n    }\n  }\n\n  /**\n   * Lookup transposition table\n   */\n  private lookupTransposition(gameState: GameState | SimulatedGameState, depth: number): TranspositionEntry | null {\n    const key = this.getTranspositionKey(gameState);\n    const entry = this._transpositionTable.get(key);\n\n    if (entry && entry.depth >= depth) {\n      return entry;\n    }\n\n    return null;\n  }\n\n  /**\n   * Store result in transposition table\n   */\n  private storeTransposition(\n    gameState: GameState | SimulatedGameState,\n    depth: number,\n    score: number,\n    bestMove: BoardPosition | undefined,\n    alpha: number,\n    beta: number,\n  ): void {\n    const key = this.getTranspositionKey(gameState);\n\n    let flag: 'exact' | 'lower' | 'upper';\n    if (score <= alpha) {\n      flag = 'upper';\n    } else if (score >= beta) {\n      flag = 'lower';\n    } else {\n      flag = 'exact';\n    }\n\n    this._transpositionTable.set(key, {\n      depth,\n      score,\n      flag,\n      bestMove,\n      timestamp: Date.now(),\n    });\n\n    // Limit table size\n    if (this._transpositionTable.size > 100000) {\n      this.cleanupTranspositionTable();\n    }\n  }\n\n  /**\n   * Generate transposition table key\n   */\n  private getTranspositionKey(gameState: GameState | SimulatedGameState): string {\n    // Simple hash based on board state and current player\n    return `${Array.from(gameState.board).join('')}_${gameState.currentPlayer}`;\n  }\n\n  /**\n   * Cleanup old transposition table entries\n   */\n  private cleanupTranspositionTable(): void {\n    const now = Date.now();\n    const cutoff = now - 300000; // 5 minutes\n\n    for (const [key, entry] of this._transpositionTable.entries()) {\n      if (entry.timestamp < cutoff) {\n        this._transpositionTable.delete(key);\n      }\n    }\n  }\n\n  /**\n   * Calculate confidence based on search result\n   */\n  private calculateConfidence(result: SearchResult, moveCount: number): number {\n    let confidence = 0.7; // Base confidence\n\n    // Higher confidence for deeper searches\n    confidence += Math.min(result.depth / 10, 0.2);\n\n    // Lower confidence if search was terminated early\n    if (result.terminated) {\n      confidence -= 0.3;\n    }\n\n    // Higher confidence for clear wins/losses\n    if (Math.abs(result.score) > 500) {\n      confidence += 0.2;\n    }\n\n    // Lower confidence with many moves available\n    if (moveCount > 8) {\n      confidence -= 0.1;\n    }\n\n    return Math.max(0.1, Math.min(0.95, confidence));\n  }\n\n  /**\n   * Get configuration\n   */\n  getConfig(): MinimaxConfig {\n    return { ...this._config };\n  }\n\n  /**\n   * Update configuration\n   */\n  setConfig(config: Partial<MinimaxConfig>): void {\n    this._config = { ...this._config, ...config };\n  }\n\n  /**\n   * Clear caches\n   */\n  clearCaches(): void {\n    this._transpositionTable.clear();\n    this._historyTable.clear();\n    for (let depth = 0; depth <= this._config.maxDepth; depth++) {\n      this._killerMoves[depth] = [];\n    }\n  }\n}\n\n/**\n * Factory functions for creating minimax AI variants\n */\nexport const createMinimaxAI = {\n  /**\n   * Basic minimax with moderate depth\n   */\n  basic(): MinimaxAI {\n    return new MinimaxAI({\n      maxDepth: 4,\n      maxTime: 2000,\n      useIterativeDeepening: true,\n    });\n  },\n\n  /**\n   * Intermediate minimax with more depth\n   */\n  intermediate(): MinimaxAI {\n    return new MinimaxAI({\n      maxDepth: 6,\n      maxTime: 3000,\n      useIterativeDeepening: true,\n      useTranspositionTable: true,\n    });\n  },\n\n  /**\n   * Advanced minimax with full features\n   */\n  advanced(): MinimaxAI {\n    return new MinimaxAI({\n      maxDepth: 8,\n      maxTime: 5000,\n      useIterativeDeepening: true,\n      useTranspositionTable: true,\n      useMoveOrdering: true,\n      aspirationWindow: 50,\n    });\n  },\n\n  /**\n   * Custom minimax configuration\n   */\n  custom(config: Partial<MinimaxConfig>): MinimaxAI {\n    return new MinimaxAI(config);\n  },\n};","/**\n * Opening Book System\n *\n * Stores and retrieves optimal opening moves for Reversi/Othello.\n * Contains theory-based opening sequences and proven lines.\n */\n\nimport { BoardPosition, PlayerColor } from '@/types/game-types';\nimport type { GameState } from '@/core/models/GameState';\n\n/**\n * Opening book entry\n */\nexport interface OpeningEntry {\n  readonly position: BoardPosition;\n  readonly score: number;        // Theoretical evaluation\n  readonly frequency: number;    // How often this move is played\n  readonly winRate: number;      // Success rate (0-1)\n  readonly depth: number;        // How deep into the opening this is\n  readonly comment?: string;     // Human-readable description\n  readonly variations?: OpeningEntry[]; // Follow-up moves\n}\n\n/**\n * Opening book key (board position hash)\n */\ntype OpeningKey = string;\n\n/**\n * Named opening sequence\n */\nexport interface OpeningSequence {\n  readonly name: string;\n  readonly description: string;\n  readonly moves: BoardPosition[];\n  readonly evaluation: number;\n  readonly isMainLine: boolean;\n}\n\n/**\n * Opening Book Database\n */\nexport class OpeningBook {\n  private readonly _entries = new Map<OpeningKey, OpeningEntry[]>();\n  private readonly _sequences: OpeningSequence[] = [];\n  private readonly _maxDepth: number;\n\n  constructor(maxDepth = 12) {\n    this._maxDepth = maxDepth;\n    this.initializeOpeningDatabase();\n  }\n\n  /**\n   * Get the best move from opening book\n   */\n  getOpeningMove(gameState: GameState): BoardPosition | null {\n    const key = this.generateKey(gameState);\n    const entries = this._entries.get(key);\n\n    if (!entries || entries.length === 0) {\n      return null;\n    }\n\n    // Filter valid moves\n    const validEntries = entries.filter(entry =>\n      gameState.validMoves.has(entry.position)\n    );\n\n    if (validEntries.length === 0) {\n      return null;\n    }\n\n    // Select best move based on score and win rate\n    const bestEntry = validEntries.reduce((best, current) => {\n      const bestValue = best.score * 0.7 + best.winRate * 0.3;\n      const currentValue = current.score * 0.7 + current.winRate * 0.3;\n      return currentValue > bestValue ? current : best;\n    });\n\n    return bestEntry.position;\n  }\n\n  /**\n   * Get all opening moves with scores\n   */\n  getOpeningMoves(gameState: GameState): OpeningEntry[] {\n    const key = this.generateKey(gameState);\n    const entries = this._entries.get(key) || [];\n\n    return entries.filter(entry =>\n      gameState.validMoves.has(entry.position)\n    );\n  }\n\n  /**\n   * Check if position is in opening book\n   */\n  hasOpeningMove(gameState: GameState): boolean {\n    const key = this.generateKey(gameState);\n    const entries = this._entries.get(key);\n    return entries ? entries.some(entry => gameState.validMoves.has(entry.position)) : false;\n  }\n\n  /**\n   * Get opening depth (how many moves into theory we are)\n   */\n  getOpeningDepth(gameState: GameState): number {\n    let depth = 0;\n    const totalPieces = gameState.scores.black + gameState.scores.white;\n    const moveCount = totalPieces - 4; // Subtract initial 4 pieces\n\n    return Math.min(moveCount, this._maxDepth);\n  }\n\n  /**\n   * Get opening sequence by name\n   */\n  getSequence(name: string): OpeningSequence | null {\n    return this._sequences.find(seq => seq.name === name) || null;\n  }\n\n  /**\n   * Get all available sequences\n   */\n  getAllSequences(): OpeningSequence[] {\n    return [...this._sequences];\n  }\n\n  /**\n   * Initialize the opening database with known theory\n   */\n  private initializeOpeningDatabase(): void {\n    // Standard starting position: Black plays first after initial setup\n    // Initial board: center 4 squares occupied, Black to move\n\n    // Move 1: Black's first move options\n    this.addOpening('eeeeeeeeeeeeeeeeeeeeeeeeeeee12212100eeeeeeeeeeeeeeeeeeeeeeeeeeee', [\n      { pos: 19, score: 0, freq: 0.3, win: 0.52, comment: 'Tiger' },      // d3\n      { pos: 26, score: 0, freq: 0.25, win: 0.51, comment: 'Rabbit' },    // c4\n      { pos: 37, score: 0, freq: 0.25, win: 0.51, comment: 'Cat' },       // f5\n      { pos: 44, score: 0, freq: 0.2, win: 0.50, comment: 'Ox' },         // e6\n    ]);\n\n    // Tiger opening (d3): Most aggressive\n    this.addOpening('eeeeeeeeeeeeeeeeeeee1eeeeee12111100eeeeeeeeeeeeeeeeeeeeeeeeeeee', [\n      { pos: 18, score: 2, freq: 0.4, win: 0.53, comment: 'Tiger main line' }, // c3\n      { pos: 20, score: 0, freq: 0.3, win: 0.52, comment: 'Tiger solid' },     // e3\n      { pos: 11, score: -1, freq: 0.2, win: 0.49, comment: 'Tiger passive' },  // d2\n      { pos: 34, score: 1, freq: 0.1, win: 0.51, comment: 'Tiger counter' },   // c5\n    ]);\n\n    // Rabbit opening (c4): Balanced\n    this.addOpening('eeeeeeeeeeeeeeeeeeeeeeeeeeee11112100eeeeeeeeeeeeeeeeeeeeeeeeeeee', [\n      { pos: 18, score: 1, freq: 0.35, win: 0.52, comment: 'Rabbit main' },    // c3\n      { pos: 19, score: 1, freq: 0.35, win: 0.52, comment: 'Rabbit parallel' }, // d3\n      { pos: 25, score: 0, freq: 0.2, win: 0.50, comment: 'Rabbit edge' },     // b4\n      { pos: 33, score: -1, freq: 0.1, win: 0.48, comment: 'Rabbit weak' },    // b5\n    ]);\n\n    // Cat opening (f5): Solid\n    this.addOpening('eeeeeeeeeeeeeeeeeeeeeeeeeeee12211100eeeee1eeeeeeeeeeeeeeeeeeeeee', [\n      { pos: 45, score: 2, freq: 0.4, win: 0.54, comment: 'Cat main line' },   // f6\n      { pos: 43, score: 1, freq: 0.3, win: 0.52, comment: 'Cat solid' },       // d6\n      { pos: 29, score: 0, freq: 0.2, win: 0.50, comment: 'Cat transpose' },   // f4\n      { pos: 52, score: -1, freq: 0.1, win: 0.48, comment: 'Cat edge' },       // e7\n    ]);\n\n    // Ox opening (e6): Defensive\n    this.addOpening('eeeeeeeeeeeeeeeeeeeeeeeeeeee12211100eeeeeeeeeeee1eeeeeeeeeeeeeee', [\n      { pos: 43, score: 1, freq: 0.4, win: 0.52, comment: 'Ox main' },         // d6\n      { pos: 45, score: 1, freq: 0.3, win: 0.52, comment: 'Ox symmetric' },    // f6\n      { pos: 37, score: 0, freq: 0.2, win: 0.50, comment: 'Ox transpose' },    // f5\n      { pos: 52, score: -1, freq: 0.1, win: 0.48, comment: 'Ox passive' },     // e7\n    ]);\n\n    // Add deeper sequences for main lines\n    this.addDeepSequences();\n\n    // Add named sequences\n    this.addNamedSequences();\n  }\n\n  /**\n   * Add deeper opening sequences (6-12 moves)\n   */\n  private addDeepSequences(): void {\n    // Tiger main line continuation\n    this.addOpening('eeeeeeeeeeeeeeeeee11eeeeeee11111100eeeeeeeeeeeeeeeeeeeeeeeeeeee', [\n      { pos: 10, score: 3, freq: 0.5, win: 0.55, comment: 'Tiger sharp' },     // c2\n      { pos: 12, score: 2, freq: 0.3, win: 0.53, comment: 'Tiger solid' },     // e2\n      { pos: 25, score: 1, freq: 0.2, win: 0.51, comment: 'Tiger positional' }, // b4\n    ]);\n\n    // Advanced middle game transitions\n    this.addOpening('eeeeeeee11eeeeeeee11eeeeeee11111100eeeeeeeeeeeeeeeeeeeeeeeeeeee', [\n      { pos: 9, score: 2, freq: 0.4, win: 0.54, comment: 'Advanced tiger' },   // b2\n      { pos: 17, score: 2, freq: 0.3, win: 0.53, comment: 'Edge control' },    // b3\n      { pos: 24, score: 1, freq: 0.3, win: 0.52, comment: 'Center play' },     // a4\n    ]);\n  }\n\n  /**\n   * Add named opening sequences\n   */\n  private addNamedSequences(): void {\n    this._sequences.push(\n      {\n        name: 'Tiger Opening',\n        description: 'Aggressive opening focusing on quick development',\n        moves: [19, 18, 10], // d3, c3, c2\n        evaluation: 2,\n        isMainLine: true,\n      },\n      {\n        name: 'Rabbit Opening',\n        description: 'Balanced opening with flexible development',\n        moves: [26, 18, 19], // c4, c3, d3\n        evaluation: 1,\n        isMainLine: true,\n      },\n      {\n        name: 'Cat Defense',\n        description: 'Solid defensive setup',\n        moves: [37, 45, 43], // f5, f6, d6\n        evaluation: 1,\n        isMainLine: true,\n      },\n      {\n        name: 'Ox System',\n        description: 'Conservative approach with emphasis on stability',\n        moves: [44, 43, 45], // e6, d6, f6\n        evaluation: 0,\n        isMainLine: true,\n      },\n      {\n        name: 'Buffalo Opening',\n        description: 'Hypermodern approach delaying central confrontation',\n        moves: [19, 20, 12], // d3, e3, e2\n        evaluation: 1,\n        isMainLine: false,\n      },\n      {\n        name: 'Snake Variation',\n        description: 'Provocative opening leading to complex positions',\n        moves: [26, 25, 33], // c4, b4, b5\n        evaluation: 0,\n        isMainLine: false,\n      }\n    );\n  }\n\n  /**\n   * Helper method to add opening positions\n   */\n  private addOpening(\n    boardString: string,\n    moves: Array<{ pos: number; score: number; freq: number; win: number; comment?: string }>\n  ): void {\n    const entries: OpeningEntry[] = moves.map(move => ({\n      position: move.pos,\n      score: move.score,\n      frequency: move.freq,\n      winRate: move.win,\n      depth: this.calculateDepth(boardString),\n      comment: move.comment,\n    }));\n\n    this._entries.set(boardString, entries);\n  }\n\n  /**\n   * Generate position key from game state\n   */\n  private generateKey(gameState: GameState): string {\n    // Convert board to string representation\n    // 'e' = empty, '1' = black, '2' = white\n    return Array.from(gameState.board).map(cell => {\n      switch (cell) {\n        case PlayerColor.EMPTY: return 'e';\n        case PlayerColor.BLACK: return '1';\n        case PlayerColor.WHITE: return '2';\n        default: return 'e';\n      }\n    }).join('');\n  }\n\n  /**\n   * Calculate opening depth from board string\n   */\n  private calculateDepth(boardString: string): number {\n    const pieceCount = boardString.split('').filter(c => c !== 'e').length;\n    return Math.max(0, pieceCount - 4); // Subtract initial 4 pieces\n  }\n\n  /**\n   * Export opening statistics\n   */\n  getStatistics(): {\n    totalPositions: number;\n    maxDepth: number;\n    averageWinRate: number;\n    sequenceCount: number;\n  } {\n    const totalPositions = this._entries.size;\n    let totalWinRate = 0;\n    let entryCount = 0;\n\n    for (const entries of this._entries.values()) {\n      for (const entry of entries) {\n        totalWinRate += entry.winRate;\n        entryCount++;\n      }\n    }\n\n    return {\n      totalPositions,\n      maxDepth: this._maxDepth,\n      averageWinRate: entryCount > 0 ? totalWinRate / entryCount : 0,\n      sequenceCount: this._sequences.length,\n    };\n  }\n\n  /**\n   * Validate opening book integrity\n   */\n  validateBook(): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    // Check for duplicate entries\n    for (const [key, entries] of this._entries.entries()) {\n      const positions = new Set<BoardPosition>();\n      for (const entry of entries) {\n        if (positions.has(entry.position)) {\n          errors.push(`Duplicate position ${entry.position} in key ${key}`);\n        }\n        positions.add(entry.position);\n\n        // Validate entry values\n        if (entry.frequency < 0 || entry.frequency > 1) {\n          errors.push(`Invalid frequency for position ${entry.position}: ${entry.frequency}`);\n        }\n        if (entry.winRate < 0 || entry.winRate > 1) {\n          errors.push(`Invalid win rate for position ${entry.position}: ${entry.winRate}`);\n        }\n      }\n    }\n\n    // Validate sequences\n    for (const sequence of this._sequences) {\n      if (sequence.moves.length === 0) {\n        errors.push(`Empty sequence: ${sequence.name}`);\n      }\n      for (const move of sequence.moves) {\n        if (move < 0 || move >= 64) {\n          errors.push(`Invalid move ${move} in sequence ${sequence.name}`);\n        }\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n    };\n  }\n}\n\n/**\n * Default opening book instance\n */\nexport const defaultOpeningBook = new OpeningBook();\n\n/**\n * Factory functions for creating opening books\n */\nexport const createOpeningBook = {\n  /**\n   * Create standard opening book\n   */\n  standard(): OpeningBook {\n    return new OpeningBook(12);\n  },\n\n  /**\n   * Create extended opening book with deeper analysis\n   */\n  extended(): OpeningBook {\n    return new OpeningBook(16);\n  },\n\n  /**\n   * Create minimal opening book for faster lookup\n   */\n  minimal(): OpeningBook {\n    return new OpeningBook(8);\n  },\n};","/**\n * Endgame Solver\n *\n * Provides perfect play in endgame positions using:\n * - Exact minimax search when few squares remain\n * - Efficient move generation and evaluation\n * - Parity analysis for optimal timing\n * - Transposition tables for performance\n */\n\nimport { PlayerColor, BoardPosition } from '@/types/game-types';\nimport type { SimulatedGameState } from '../game-simulator';\nimport { GameSimulator } from '../game-simulator';\n\n/**\n * Endgame search result\n */\nexport interface EndgameResult {\n  readonly bestMove: BoardPosition;\n  readonly exactScore: number;      // Exact final score difference\n  readonly movesToEnd: number;      // Number of moves until game end\n  readonly isWin: boolean;          // True if position is winning\n  readonly nodesSearched: number;   // Performance metric\n  readonly timeElapsed: number;     // Time taken for calculation\n  readonly confidence: number;      // Always 1.0 for exact solutions\n}\n\n/**\n * Endgame solver configuration\n */\nexport interface EndgameSolverConfig {\n  maxEmptySquares: number;          // Solve when <= this many empty squares\n  useTranspositionTable: boolean;   // Cache results\n  useMoveOrdering: boolean;         // Order moves for better pruning\n  maxTimeMs: number;               // Maximum solving time\n  enableParity: boolean;           // Use parity analysis\n}\n\n/**\n * Endgame transposition table entry\n */\ninterface EndgameTransposition {\n  exactScore: number;\n  depth: number;\n  bestMove?: BoardPosition;\n  flag: 'exact' | 'lower' | 'upper';\n  timestamp: number;\n}\n\n/**\n * Endgame Solver Implementation\n */\nexport class EndgameSolver {\n  private readonly _config: EndgameSolverConfig;\n  private readonly _transpositionTable = new Map<string, EndgameTransposition>();\n  private _nodesSearched = 0;\n  private _startTime = 0;\n  private _timeLimit = 0;\n\n  constructor(config: Partial<EndgameSolverConfig> = {}) {\n    this._config = {\n      maxEmptySquares: 16,\n      useTranspositionTable: true,\n      useMoveOrdering: true,\n      maxTimeMs: 30000, // 30 seconds max\n      enableParity: true,\n      ...config,\n    };\n  }\n\n  /**\n   * Solve endgame position exactly\n   */\n  async solvePosition(\n    gameState: SimulatedGameState,\n    player: PlayerColor,\n    timeLimit?: number,\n  ): Promise<EndgameResult> {\n    this._startTime = Date.now();\n    this._timeLimit = timeLimit || this._config.maxTimeMs;\n    this._nodesSearched = 0;\n\n    // Verify this is an endgame position\n    const emptySquares = this.countEmptySquares(gameState.board);\n    if (emptySquares > this._config.maxEmptySquares) {\n      throw new Error(`Position has ${emptySquares} empty squares, exceeds maximum of ${this._config.maxEmptySquares}`);\n    }\n\n    const result = await this.exactSearch(gameState, player, emptySquares, -64, 64);\n\n    const timeElapsed = Date.now() - this._startTime;\n\n    if (!result.bestMove && result.bestMove !== 0) {\n      throw new Error('No valid move found in endgame position');\n    }\n\n    return {\n      bestMove: result.bestMove,\n      exactScore: result.score,\n      movesToEnd: emptySquares,\n      isWin: result.score > 0,\n      nodesSearched: this._nodesSearched,\n      timeElapsed,\n      confidence: 1.0, // Exact solution\n    };\n  }\n\n  /**\n   * Check if position qualifies for endgame solving\n   */\n  canSolve(gameState: SimulatedGameState): boolean {\n    const emptySquares = this.countEmptySquares(gameState.board);\n    return emptySquares <= this._config.maxEmptySquares;\n  }\n\n  /**\n   * Exact minimax search for endgame\n   */\n  private async exactSearch(\n    gameState: SimulatedGameState,\n    originalPlayer: PlayerColor,\n    depth: number,\n    alpha: number,\n    beta: number,\n  ): Promise<{ score: number; bestMove?: BoardPosition }> {\n    this._nodesSearched++;\n\n    // Check time limit\n    if (Date.now() - this._startTime >= this._timeLimit) {\n      throw new Error('Endgame solver timeout');\n    }\n\n    // Check transposition table\n    if (this._config.useTranspositionTable) {\n      const ttResult = this.lookupTransposition(gameState, depth);\n      if (ttResult) {\n        return { score: ttResult.exactScore, bestMove: ttResult.bestMove };\n      }\n    }\n\n    // Terminal position - calculate exact final score\n    if (gameState.gameOver || gameState.validMoves.size === 0) {\n      const finalScore = this.calculateFinalScore(gameState, originalPlayer);\n      return { score: finalScore };\n    }\n\n    // Get ordered moves\n    const moves = this.getOrderedMoves(gameState);\n    let bestMove: BoardPosition | undefined;\n    let bestScore = gameState.currentPlayer === originalPlayer ? -64 : 64;\n\n    for (const move of moves) {\n      const newState = GameSimulator.makeMove(gameState, move);\n      if (!newState) continue;\n\n      // Handle pass if no valid moves for next player\n      let nextState = newState;\n      if (nextState.validMoves.size === 0 && !nextState.gameOver) {\n        nextState = GameSimulator.makePass(nextState);\n      }\n\n      const result = await this.exactSearch(\n        nextState,\n        originalPlayer,\n        depth - 1,\n        alpha,\n        beta,\n      );\n\n      // Update best score and alpha-beta bounds\n      if (gameState.currentPlayer === originalPlayer) {\n        // Maximizing player\n        if (result.score > bestScore) {\n          bestScore = result.score;\n          bestMove = move;\n        }\n        alpha = Math.max(alpha, bestScore);\n      } else {\n        // Minimizing player\n        if (result.score < bestScore) {\n          bestScore = result.score;\n          bestMove = move;\n        }\n        beta = Math.min(beta, bestScore);\n      }\n\n      // Alpha-beta pruning\n      if (beta <= alpha) {\n        break;\n      }\n    }\n\n    // Store in transposition table\n    if (this._config.useTranspositionTable) {\n      this.storeTransposition(gameState, depth, bestScore, bestMove, alpha, beta);\n    }\n\n    return { score: bestScore, bestMove };\n  }\n\n  /**\n   * Calculate exact final score (difference in piece count)\n   */\n  private calculateFinalScore(gameState: SimulatedGameState, originalPlayer: PlayerColor): number {\n    let playerPieces = 0;\n    let opponentPieces = 0;\n    let emptySquares = 0;\n\n    for (let i = 0; i < gameState.board.length; i++) {\n      const piece = gameState.board[i];\n      if (piece === originalPlayer) {\n        playerPieces++;\n      } else if (piece !== PlayerColor.EMPTY) {\n        opponentPieces++;\n      } else {\n        emptySquares++;\n      }\n    }\n\n    // In endgame, empty squares go to the player who made the last move\n    if (emptySquares > 0) {\n      // Use parity to determine who gets the empty squares\n      if (this._config.enableParity) {\n        const parityAdvantage = this.calculateParity(gameState, originalPlayer);\n        if (parityAdvantage > 0) {\n          playerPieces += emptySquares;\n        } else {\n          opponentPieces += emptySquares;\n        }\n      } else {\n        // Simple heuristic: current player gets remaining squares\n        if (gameState.currentPlayer === originalPlayer) {\n          playerPieces += emptySquares;\n        } else {\n          opponentPieces += emptySquares;\n        }\n      }\n    }\n\n    return playerPieces - opponentPieces;\n  }\n\n  /**\n   * Calculate parity advantage (who is likely to get the last move)\n   */\n  private calculateParity(gameState: SimulatedGameState, player: PlayerColor): number {\n    const emptySquares = this.countEmptySquares(gameState.board);\n    const currentPlayerAdvantage = gameState.currentPlayer === player ? 1 : -1;\n\n    // In positions with odd number of empty squares, current player has advantage\n    if (emptySquares % 2 === 1) {\n      return currentPlayerAdvantage;\n    } else {\n      return -currentPlayerAdvantage;\n    }\n  }\n\n  /**\n   * Get ordered moves for better alpha-beta pruning\n   */\n  private getOrderedMoves(gameState: SimulatedGameState): BoardPosition[] {\n    const moves = Array.from(gameState.validMoves.keys());\n\n    if (!this._config.useMoveOrdering) {\n      return moves;\n    }\n\n    // Order moves by strategic value in endgame\n    const scoredMoves = moves.map(move => {\n      let score = 0;\n\n      // Prioritize corner moves\n      if ([0, 7, 56, 63].includes(move)) {\n        score += 1000;\n      }\n\n      // Prioritize edge moves\n      const row = Math.floor(move / 8);\n      const col = move % 8;\n      if (row === 0 || row === 7 || col === 0 || col === 7) {\n        score += 100;\n      }\n\n      // Prioritize moves that flip more pieces\n      const flippedCount = gameState.validMoves.get(move)?.length || 0;\n      score += flippedCount * 10;\n\n      // Avoid X-squares unless necessary\n      if ([9, 14, 49, 54].includes(move)) {\n        score -= 500;\n      }\n\n      return { move, score };\n    });\n\n    // Sort by score descending\n    scoredMoves.sort((a, b) => b.score - a.score);\n\n    return scoredMoves.map(item => item.move);\n  }\n\n  /**\n   * Count empty squares on board\n   */\n  private countEmptySquares(board: Uint8Array): number {\n    let count = 0;\n    for (let i = 0; i < board.length; i++) {\n      if (board[i] === PlayerColor.EMPTY) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Generate transposition table key\n   */\n  private generateTranspositionKey(gameState: SimulatedGameState): string {\n    return Array.from(gameState.board).join('') + '_' + gameState.currentPlayer;\n  }\n\n  /**\n   * Lookup transposition table\n   */\n  private lookupTransposition(\n    gameState: SimulatedGameState,\n    depth: number,\n  ): EndgameTransposition | null {\n    const key = this.generateTranspositionKey(gameState);\n    const entry = this._transpositionTable.get(key);\n\n    if (entry && entry.depth >= depth) {\n      return entry;\n    }\n\n    return null;\n  }\n\n  /**\n   * Store result in transposition table\n   */\n  private storeTransposition(\n    gameState: SimulatedGameState,\n    depth: number,\n    score: number,\n    bestMove: BoardPosition | undefined,\n    alpha: number,\n    beta: number,\n  ): void {\n    const key = this.generateTranspositionKey(gameState);\n\n    let flag: 'exact' | 'lower' | 'upper';\n    if (score <= alpha) {\n      flag = 'upper';\n    } else if (score >= beta) {\n      flag = 'lower';\n    } else {\n      flag = 'exact';\n    }\n\n    this._transpositionTable.set(key, {\n      exactScore: score,\n      depth,\n      bestMove,\n      flag,\n      timestamp: Date.now(),\n    });\n\n    // Limit table size\n    if (this._transpositionTable.size > 50000) {\n      this.cleanupTranspositionTable();\n    }\n  }\n\n  /**\n   * Clean up old transposition table entries\n   */\n  private cleanupTranspositionTable(): void {\n    const cutoff = Date.now() - 600000; // 10 minutes\n    for (const [key, entry] of this._transpositionTable.entries()) {\n      if (entry.timestamp < cutoff) {\n        this._transpositionTable.delete(key);\n      }\n    }\n  }\n\n  /**\n   * Get solver statistics\n   */\n  getStatistics(): {\n    transpositionEntries: number;\n    maxEmptySquares: number;\n    averageNodesPerSecond: number;\n  } {\n    const timeElapsed = Date.now() - this._startTime;\n    const nodesPerSecond = timeElapsed > 0 ? (this._nodesSearched / timeElapsed) * 1000 : 0;\n\n    return {\n      transpositionEntries: this._transpositionTable.size,\n      maxEmptySquares: this._config.maxEmptySquares,\n      averageNodesPerSecond: nodesPerSecond,\n    };\n  }\n\n  /**\n   * Clear all caches\n   */\n  clearCaches(): void {\n    this._transpositionTable.clear();\n  }\n\n  /**\n   * Update configuration\n   */\n  setConfig(config: Partial<EndgameSolverConfig>): void {\n    Object.assign(this._config, config);\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): EndgameSolverConfig {\n    return { ...this._config };\n  }\n}\n\n/**\n * Default endgame solver instance\n */\nexport const defaultEndgameSolver = new EndgameSolver();\n\n/**\n * Factory functions for creating endgame solvers\n */\nexport const createEndgameSolver = {\n  /**\n   * Fast solver for quick endgames\n   */\n  fast(): EndgameSolver {\n    return new EndgameSolver({\n      maxEmptySquares: 12,\n      maxTimeMs: 5000,\n      useMoveOrdering: true,\n    });\n  },\n\n  /**\n   * Deep solver for thorough analysis\n   */\n  deep(): EndgameSolver {\n    return new EndgameSolver({\n      maxEmptySquares: 20,\n      maxTimeMs: 60000,\n      useTranspositionTable: true,\n      useMoveOrdering: true,\n      enableParity: true,\n    });\n  },\n\n  /**\n   * Tournament solver for competitive play\n   */\n  tournament(): EndgameSolver {\n    return new EndgameSolver({\n      maxEmptySquares: 16,\n      maxTimeMs: 30000,\n      useTranspositionTable: true,\n      useMoveOrdering: true,\n      enableParity: true,\n    });\n  },\n\n  /**\n   * Custom configuration\n   */\n  custom(config: Partial<EndgameSolverConfig>): EndgameSolver {\n    return new EndgameSolver(config);\n  },\n};","/**\n * Advanced AI Strategy\n *\n * Master-level AI that combines multiple techniques:\n * - Opening book for theoretical play\n * - Minimax with alpha-beta pruning for midgame\n * - Endgame solver for perfect endplay\n * - Adaptive time management\n * - Monte Carlo Tree Search for complex positions\n */\n\nimport { AIDifficulty, PlayerColor, BoardPosition } from '@/types/game-types';\nimport type { GameState } from '@/core/models/GameState';\nimport { AIStrategyBase, type AIMoveResult } from '../ai-strategy-base';\nimport { MinimaxAI, type MinimaxConfig } from './minimax-ai';\nimport { OpeningBook, defaultOpeningBook } from './opening-book';\nimport { EndgameSolver, defaultEndgameSolver } from './endgame-solver';\nimport { GameSimulator, type SimulatedGameState } from '../game-simulator';\nimport { AdvancedEvaluator } from './evaluation';\n\n/**\n * Advanced AI configuration\n */\nexport interface AdvancedAIConfig {\n  // Opening book settings\n  useOpeningBook: boolean;\n  openingBookDepth: number;\n\n  // Midgame minimax settings\n  minimaxDepth: number;\n  minimaxTimeLimit: number;\n  useIterativeDeepening: boolean;\n\n  // Endgame solver settings\n  useEndgameSolver: boolean;\n  endgameThreshold: number; // Empty squares to trigger endgame\n  endgameTimeLimit: number;\n\n  // Adaptive settings\n  adaptiveTimeManagement: boolean;\n  thinkingTimeBase: number; // Base thinking time in ms\n  thinkingTimeMax: number;  // Maximum thinking time in ms\n\n  // Advanced features\n  useMonteCarlo: boolean;\n  monteCarloSamples: number;\n  useAspirationWindows: boolean;\n}\n\n/**\n * Game phase detection\n */\ntype GamePhase = 'opening' | 'midgame' | 'endgame';\n\n/**\n * Advanced AI Strategy Implementation\n */\nexport class AdvancedAI extends AIStrategyBase {\n  public readonly difficulty = AIDifficulty.ADVANCED;\n  public readonly name = 'Advanced AI';\n  public readonly description = 'Master-level AI combining opening book, minimax, and endgame solver';\n\n  private readonly _config: AdvancedAIConfig;\n  private readonly _openingBook: OpeningBook;\n  private readonly _endgameSolver: EndgameSolver;\n  private _minimaxAI: MinimaxAI;\n\n  // Performance tracking\n  private _phaseStats = {\n    opening: { moves: 0, totalTime: 0 },\n    midgame: { moves: 0, totalTime: 0 },\n    endgame: { moves: 0, totalTime: 0 },\n  };\n\n  constructor(config: Partial<AdvancedAIConfig> = {}) {\n    super();\n\n    this._config = {\n      // Opening book\n      useOpeningBook: true,\n      openingBookDepth: 12,\n\n      // Midgame minimax\n      minimaxDepth: 8,\n      minimaxTimeLimit: 5000,\n      useIterativeDeepening: true,\n\n      // Endgame solver\n      useEndgameSolver: true,\n      endgameThreshold: 16,\n      endgameTimeLimit: 30000,\n\n      // Adaptive time management\n      adaptiveTimeManagement: true,\n      thinkingTimeBase: 1000,\n      thinkingTimeMax: 10000,\n\n      // Advanced features\n      useMonteCarlo: false, // Disabled for now\n      monteCarloSamples: 1000,\n      useAspirationWindows: true,\n\n      ...config,\n    };\n\n    this._openingBook = defaultOpeningBook;\n    this._endgameSolver = defaultEndgameSolver;\n\n    // Configure minimax AI\n    const minimaxConfig: Partial<MinimaxConfig> = {\n      maxDepth: this._config.minimaxDepth,\n      maxTime: this._config.minimaxTimeLimit,\n      useIterativeDeepening: this._config.useIterativeDeepening,\n      useTranspositionTable: true,\n      useMoveOrdering: true,\n      aspirationWindow: this._config.useAspirationWindows ? 50 : undefined,\n    };\n\n    this._minimaxAI = new MinimaxAI(minimaxConfig);\n  }\n\n  protected async selectMoveImpl(\n    gameState: GameState,\n    player: PlayerColor,\n    timeLimit: number,\n  ): Promise<AIMoveResult> {\n    const startTime = Date.now();\n    const phase = this.detectGamePhase(gameState);\n    const adaptiveTimeLimit = this.calculateAdaptiveTimeLimit(gameState, timeLimit, phase);\n\n    let result: AIMoveResult;\n\n    try {\n      switch (phase) {\n        case 'opening':\n          result = await this.handleOpening(gameState, player, adaptiveTimeLimit);\n          break;\n\n        case 'midgame':\n          result = await this.handleMidgame(gameState, player, adaptiveTimeLimit);\n          break;\n\n        case 'endgame':\n          result = await this.handleEndgame(gameState, player, adaptiveTimeLimit);\n          break;\n\n        default:\n          result = await this.handleMidgame(gameState, player, adaptiveTimeLimit);\n      }\n\n      // Update performance statistics\n      const actualTime = Date.now() - startTime;\n      this._phaseStats[phase].moves++;\n      this._phaseStats[phase].totalTime += actualTime;\n\n      // Enhance result with phase information\n      return {\n        ...result,\n        thinkingTime: actualTime,\n      };\n\n    } catch (error) {\n      // Fallback to minimax if any component fails\n      console.warn(`Advanced AI ${phase} phase failed, falling back to minimax:`, error);\n      return this._minimaxAI.selectMove(gameState, player, adaptiveTimeLimit);\n    }\n  }\n\n  /**\n   * Handle opening phase using opening book\n   */\n  private async handleOpening(\n    gameState: GameState,\n    player: PlayerColor,\n    timeLimit: number,\n  ): Promise<AIMoveResult> {\n    if (this._config.useOpeningBook && this._openingBook.hasOpeningMove(gameState)) {\n      const openingMove = this._openingBook.getOpeningMove(gameState);\n\n      if (openingMove !== null) {\n        // Simulate thinking time for opening book moves\n        const thinkingTime = 200 + Math.random() * 300; // 200-500ms\n        await new Promise(resolve => setTimeout(resolve, thinkingTime));\n\n        return {\n          position: openingMove,\n          confidence: 0.9, // High confidence in opening theory\n          evaluation: 0, // Opening moves are theoretical\n          thinkingTime,\n          depth: this._openingBook.getOpeningDepth(gameState),\n          nodesEvaluated: 1,\n        };\n      }\n    }\n\n    // Fall back to minimax if no opening book move\n    return this._minimaxAI.selectMove(gameState, player, timeLimit);\n  }\n\n  /**\n   * Handle midgame using minimax with advanced evaluation\n   */\n  private async handleMidgame(\n    gameState: GameState,\n    player: PlayerColor,\n    timeLimit: number,\n  ): Promise<AIMoveResult> {\n    // Use the full minimax AI for midgame\n    return this._minimaxAI.selectMove(gameState, player, timeLimit);\n  }\n\n  /**\n   * Handle endgame using exact solver\n   */\n  private async handleEndgame(\n    gameState: GameState,\n    player: PlayerColor,\n    timeLimit: number,\n  ): Promise<AIMoveResult> {\n    if (!this._config.useEndgameSolver) {\n      return this._minimaxAI.selectMove(gameState, player, timeLimit);\n    }\n\n    const simState = GameSimulator.fromGameState(gameState);\n\n    if (this._endgameSolver.canSolve(simState)) {\n      try {\n        const endgameResult = await this._endgameSolver.solvePosition(\n          simState,\n          player,\n          Math.min(timeLimit, this._config.endgameTimeLimit),\n        );\n\n        return {\n          position: endgameResult.bestMove,\n          confidence: endgameResult.confidence,\n          evaluation: endgameResult.exactScore,\n          thinkingTime: endgameResult.timeElapsed,\n          depth: endgameResult.movesToEnd,\n          nodesEvaluated: endgameResult.nodesSearched,\n        };\n      } catch (error) {\n        console.warn('Endgame solver failed, falling back to minimax:', error);\n      }\n    }\n\n    // Fall back to deep minimax search\n    const deepMinimaxConfig = {\n      maxDepth: this._config.minimaxDepth + 2, // Extra depth for endgame\n      maxTime: timeLimit,\n      useIterativeDeepening: true,\n    };\n\n    const deepMinimax = new MinimaxAI(deepMinimaxConfig);\n    return deepMinimax.selectMove(gameState, player, timeLimit);\n  }\n\n  /**\n   * Detect current game phase\n   */\n  private detectGamePhase(gameState: GameState): GamePhase {\n    const totalPieces = gameState.scores.black + gameState.scores.white;\n    const emptySquares = 64 - totalPieces;\n\n    // Opening phase: first 8-12 moves\n    if (totalPieces <= 12) {\n      return 'opening';\n    }\n\n    // Endgame phase: 16 or fewer empty squares\n    if (emptySquares <= this._config.endgameThreshold) {\n      return 'endgame';\n    }\n\n    // Everything else is midgame\n    return 'midgame';\n  }\n\n  /**\n   * Calculate adaptive thinking time based on position complexity\n   */\n  private calculateAdaptiveTimeLimit(\n    gameState: GameState,\n    baseTimeLimit: number,\n    phase: GamePhase,\n  ): number {\n    if (!this._config.adaptiveTimeManagement) {\n      return baseTimeLimit;\n    }\n\n    const moveCount = gameState.validMoves.size;\n    const complexity = this.assessPositionComplexity(gameState);\n\n    let timeMultiplier = 1.0;\n\n    // Phase-based adjustments\n    switch (phase) {\n      case 'opening':\n        timeMultiplier = 0.3; // Quick opening moves\n        break;\n      case 'midgame':\n        timeMultiplier = 1.0; // Standard time\n        break;\n      case 'endgame':\n        timeMultiplier = 2.0; // More time for critical endgame\n        break;\n    }\n\n    // Complexity adjustments\n    timeMultiplier *= (1.0 + complexity * 0.5);\n\n    // Move count adjustments (more time when many options)\n    if (moveCount > 10) {\n      timeMultiplier *= 1.3;\n    } else if (moveCount < 3) {\n      timeMultiplier *= 0.7;\n    }\n\n    const adaptiveTime = Math.min(\n      this._config.thinkingTimeMax,\n      Math.max(\n        this._config.thinkingTimeBase * timeMultiplier,\n        baseTimeLimit * 0.5, // Don't go below 50% of base time\n      ),\n    );\n\n    return Math.min(adaptiveTime, baseTimeLimit);\n  }\n\n  /**\n   * Assess position complexity for time allocation\n   */\n  private assessPositionComplexity(gameState: GameState): number {\n    let complexity = 0;\n\n    // More moves = higher complexity\n    complexity += Math.min(gameState.validMoves.size / 15, 1.0);\n\n    // Score difference affects complexity\n    const scoreDiff = Math.abs(gameState.scores.black - gameState.scores.white);\n    complexity += Math.min(scoreDiff / 20, 0.5);\n\n    // Corner and edge availability\n    const corners = [0, 7, 56, 63];\n    const availableCorners = corners.filter(pos => gameState.board[pos] === PlayerColor.EMPTY);\n    complexity += availableCorners.length * 0.1;\n\n    return Math.min(complexity, 1.0);\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): AdvancedAIConfig {\n    return { ...this._config };\n  }\n\n  /**\n   * Update configuration\n   */\n  setConfig(config: Partial<AdvancedAIConfig>): void {\n    Object.assign(this._config, config);\n\n    // Update minimax configuration\n    const minimaxConfig: Partial<MinimaxConfig> = {\n      maxDepth: this._config.minimaxDepth,\n      maxTime: this._config.minimaxTimeLimit,\n      useIterativeDeepening: this._config.useIterativeDeepening,\n      aspirationWindow: this._config.useAspirationWindows ? 50 : undefined,\n    };\n\n    this._minimaxAI.setConfig(minimaxConfig);\n  }\n\n  /**\n   * Get performance statistics\n   */\n  getPerformanceStats(): {\n    opening: { moves: number; avgTime: number };\n    midgame: { moves: number; avgTime: number };\n    endgame: { moves: number; avgTime: number };\n    totalMoves: number;\n    overallAvgTime: number;\n  } {\n    const opening = {\n      moves: this._phaseStats.opening.moves,\n      avgTime: this._phaseStats.opening.moves > 0\n        ? this._phaseStats.opening.totalTime / this._phaseStats.opening.moves\n        : 0,\n    };\n\n    const midgame = {\n      moves: this._phaseStats.midgame.moves,\n      avgTime: this._phaseStats.midgame.moves > 0\n        ? this._phaseStats.midgame.totalTime / this._phaseStats.midgame.moves\n        : 0,\n    };\n\n    const endgame = {\n      moves: this._phaseStats.endgame.moves,\n      avgTime: this._phaseStats.endgame.moves > 0\n        ? this._phaseStats.endgame.totalTime / this._phaseStats.endgame.moves\n        : 0,\n    };\n\n    const totalMoves = opening.moves + midgame.moves + endgame.moves;\n    const totalTime = this._phaseStats.opening.totalTime +\n                      this._phaseStats.midgame.totalTime +\n                      this._phaseStats.endgame.totalTime;\n\n    return {\n      opening,\n      midgame,\n      endgame,\n      totalMoves,\n      overallAvgTime: totalMoves > 0 ? totalTime / totalMoves : 0,\n    };\n  }\n\n  /**\n   * Reset performance statistics\n   */\n  resetStats(): void {\n    this._phaseStats = {\n      opening: { moves: 0, totalTime: 0 },\n      midgame: { moves: 0, totalTime: 0 },\n      endgame: { moves: 0, totalTime: 0 },\n    };\n  }\n\n  /**\n   * Clear all caches\n   */\n  clearCaches(): void {\n    this._minimaxAI.clearCaches();\n    this._endgameSolver.clearCaches();\n  }\n}\n\n/**\n * Factory functions for creating advanced AI variants\n */\nexport const createAdvancedAI = {\n  /**\n   * Tournament-level AI with balanced settings\n   */\n  tournament(): AdvancedAI {\n    return new AdvancedAI({\n      useOpeningBook: true,\n      openingBookDepth: 12,\n      minimaxDepth: 8,\n      useEndgameSolver: true,\n      endgameThreshold: 16,\n      adaptiveTimeManagement: true,\n      thinkingTimeBase: 2000,\n      thinkingTimeMax: 15000,\n    });\n  },\n\n  /**\n   * Master-level AI with maximum strength\n   */\n  master(): AdvancedAI {\n    return new AdvancedAI({\n      useOpeningBook: true,\n      openingBookDepth: 16,\n      minimaxDepth: 10,\n      useEndgameSolver: true,\n      endgameThreshold: 20,\n      adaptiveTimeManagement: true,\n      thinkingTimeBase: 3000,\n      thinkingTimeMax: 30000,\n      useAspirationWindows: true,\n    });\n  },\n\n  /**\n   * Fast AI for quick games\n   */\n  blitz(): AdvancedAI {\n    return new AdvancedAI({\n      useOpeningBook: true,\n      openingBookDepth: 8,\n      minimaxDepth: 6,\n      useEndgameSolver: true,\n      endgameThreshold: 12,\n      adaptiveTimeManagement: false,\n      thinkingTimeBase: 500,\n      thinkingTimeMax: 2000,\n    });\n  },\n\n  /**\n   * Custom advanced AI\n   */\n  custom(config: Partial<AdvancedAIConfig>): AdvancedAI {\n    return new AdvancedAI(config);\n  },\n};","/**\n * AI Web Worker\n *\n * Runs AI computations in a separate thread to prevent main thread blocking\n * and maintain smooth animations during AI thinking.\n */\n\n// Import AI strategies\nimport { createRandomAI } from '../core/ai/strategies/random-ai';\nimport { createGreedyAI } from '../core/ai/strategies/greedy-ai';\nimport { createMinimaxAI } from '../core/ai/strategies/minimax-ai';\nimport { createAdvancedAI } from '../core/ai/strategies/advanced-ai';\nimport { AIDifficulty, PlayerColor } from '../types/game-types';\nimport type { GameState } from '../core/models/GameState';\nimport type { AIMoveResult } from '../core/ai/ai-strategy-base';\n\n// Worker message types\ninterface WorkerRequest {\n  type: 'CALCULATE_MOVE';\n  payload: {\n    id: string; // Request ID for tracking\n    gameState: GameState;\n    player: PlayerColor;\n    difficulty: AIDifficulty;\n    timeLimit: number;\n    customConfig?: any;\n  };\n}\n\ninterface WorkerResponse {\n  type: 'MOVE_RESULT' | 'ERROR';\n  payload: {\n    id: string;\n    result?: AIMoveResult;\n    error?: string;\n  };\n}\n\n/**\n * Create AI instance based on difficulty\n */\nfunction createAI(difficulty: AIDifficulty, customConfig?: any) {\n  switch (difficulty) {\n    case AIDifficulty.RANDOM:\n      return createRandomAI.smart();\n\n    case AIDifficulty.GREEDY:\n      return createGreedyAI.adaptive();\n\n    case AIDifficulty.MINIMAX_EASY:\n      return createMinimaxAI.basic();\n\n    case AIDifficulty.MINIMAX:\n      return createMinimaxAI.intermediate();\n\n    case AIDifficulty.MINIMAX_HARD:\n      return createMinimaxAI.advanced();\n\n    case AIDifficulty.ADVANCED:\n      return createAdvancedAI.tournament();\n\n    case AIDifficulty.MASTER:\n      return createAdvancedAI.master();\n\n    case AIDifficulty.BLITZ:\n      return createAdvancedAI.blitz();\n\n    case AIDifficulty.CUSTOM:\n      if (customConfig) {\n        return createAdvancedAI.custom(customConfig);\n      }\n      return createAdvancedAI.tournament();\n\n    default:\n      return createGreedyAI.standard();\n  }\n}\n\n/**\n * Main worker message handler\n */\nself.addEventListener('message', async (event: MessageEvent<WorkerRequest>) => {\n  const { type, payload } = event.data;\n\n  if (type === 'CALCULATE_MOVE') {\n    const { id, gameState, player, difficulty, timeLimit, customConfig } = payload;\n\n    try {\n      console.log(`🤖 AI Worker: Starting calculation for ${difficulty} (depth: ${getSearchDepth(difficulty)})`);\n\n      // Create AI instance\n      const ai = createAI(difficulty, customConfig);\n\n      // Calculate move (this runs in worker thread, won't block main thread)\n      const startTime = Date.now();\n      const result = await ai.selectMove(gameState, player, timeLimit);\n      const actualTime = Date.now() - startTime;\n\n      console.log(`🤖 AI Worker: Calculation complete in ${actualTime}ms`);\n\n      // Send result back to main thread\n      const response: WorkerResponse = {\n        type: 'MOVE_RESULT',\n        payload: {\n          id,\n          result: {\n            ...result,\n            thinkingTime: actualTime, // Override with actual time\n          },\n        },\n      };\n\n      self.postMessage(response);\n\n    } catch (error) {\n      console.error('🤖 AI Worker: Error during calculation:', error);\n\n      // Send error back to main thread\n      const response: WorkerResponse = {\n        type: 'ERROR',\n        payload: {\n          id,\n          error: error instanceof Error ? error.message : 'Unknown AI error',\n        },\n      };\n\n      self.postMessage(response);\n    }\n  }\n});\n\n/**\n * Get search depth for difficulty (for logging)\n */\nfunction getSearchDepth(difficulty: AIDifficulty): string {\n  switch (difficulty) {\n    case AIDifficulty.RANDOM: return '0';\n    case AIDifficulty.GREEDY: return '1';\n    case AIDifficulty.MINIMAX_EASY: return '4';\n    case AIDifficulty.MINIMAX: return '6';\n    case AIDifficulty.MINIMAX_HARD: return '8';\n    case AIDifficulty.ADVANCED: return '8+';\n    case AIDifficulty.MASTER: return '10+';\n    case AIDifficulty.BLITZ: return '6+';\n    case AIDifficulty.CUSTOM: return 'custom';\n    default: return 'unknown';\n  }\n}\n\n// Worker is ready\nconsole.log('🤖 AI Worker: Ready for calculations');"],"names":["PlayerColor","GameStatus","Grade","AIDifficulty","POSITION_VALUES","GRADE_THRESHOLDS","PERFORMANCE_TARGETS","isValidPosition","position","positionToCoords","isCorner","isEdge","coords","isXSquare","AIStrategyBase","gameState","player","timeLimit","startTime","targetTime","result","actualThinkingTime","actualTime","movesPlayed","totalThinkingTime","sum","time","totalNodes","nodes","totalDepth","depth","timeRatio","baseAccuracy","AIUtils","baseScore","jitterAmount","jitter","candidates","temperature","scaledCandidates","candidate","totalWeight","randomValue","cumulativeWeight","stability","row","col","friendlyNeighbors","pos","neighbors","dr","dc","newRow","newCol","_player","RandomAI","_timeLimit","validMoves","thinkingDelay","resolve","randomIndex","selectedPosition","evaluation","flippedPositions","score","SmartRandomAI","cornerMoves","safeEdgeMoves","xSquareMoves","normalMoves","candidateMoves","moveType","confidence","createRandomAI","validateMove","board","calculateFlips","allFlips","opponent","directions","startCoords","direction","flipsInDirection","calculateFlipsInDirection","flips","currentRow","currentCol","currentPosition","currentPiece","getValidMoves","applyMove","newBoard","flipPosition","isCornerMove","isEdgeMove","isXSquareMove","isCSquareMove","calculateMobility","validation","playerMoves","opponentMoves","calculateStability","protectedDirections","dir","neighborPos","evaluateMove","breakdown","calculateScoreBreakdown","grade","calculateGrade","positionValue","calculatePositionValue","flippedCount","stabilityBonus","calculateStabilityBonus","mobilityFactor","calculateMobilityFactor","total","placedStability","flippedPos","flippedStability","mobility","evaluateAllMoves","evaluatedMoves","a","b","getBestMove","bestMove","move","GreedyAI","remainingTime","sortedMoves","scoreGap","EnhancedGreedyAI","enhancedMoves","threshold","topCandidates","selectedMove","gamePhase","AdaptiveGreedyAI","strategy","strategicMoves","selectionTemperature","topMoves","myScore","opponentScore","scoreDifference","_gameState","moveCount","baseTime","createGreedyAI","EVALUATION_WEIGHTS","ADVANCED_POSITION_VALUES","STABILITY_VALUES","AdvancedEvaluator","cornerControl","edgeControl","potentialMobility","parity","material","piece","playerMobility","opponentMobility","playerStability","opponentStability","stabilityValue","stableDirections","pos1","pos2","corners","playerCorners","opponentCorners","corner","playerEdges","opponentEdges","playerPotential","opponentPotential","adjacentToPlayer","adjacentToOpponent","color","adjacent","emptySquares","i","playerPieces","opponentPieces","endgameWeight","quickEvaluate","GameSimulator","gameOver","state","nextPlayer","newScores","nextValidMoves","newConsecutivePasses","afterPassPlayer","afterPassMoves","black","white","moves","newState","occupiedSquares","state1","state2","empty","calculatedScores","MinimaxAI","config","effectiveTimeLimit","searchResult","bestResult","lastScore","aspirationAlpha","aspirationBeta","widerResult","alpha","beta","isMaximizing","originalPlayer","ttEntry","simState","evalState","bestScore","newGameState","bonus","historyKey","historyScore","item","killers","key","entry","flag","cutoff","createMinimaxAI","OpeningBook","maxDepth","entries","validEntries","best","current","bestValue","name","seq","boardString","cell","pieceCount","c","totalPositions","totalWinRate","entryCount","errors","positions","sequence","defaultOpeningBook","EndgameSolver","timeElapsed","ttResult","nextState","currentPlayerAdvantage","scoredMoves","count","nodesPerSecond","defaultEndgameSolver","AdvancedAI","minimaxConfig","phase","adaptiveTimeLimit","openingMove","thinkingTime","endgameResult","deepMinimaxConfig","totalPieces","baseTimeLimit","complexity","timeMultiplier","adaptiveTime","scoreDiff","availableCorners","opening","midgame","endgame","totalMoves","totalTime","createAdvancedAI","createAI","difficulty","customConfig","event","type","payload","id","ai","response","error"],"mappings":"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"}